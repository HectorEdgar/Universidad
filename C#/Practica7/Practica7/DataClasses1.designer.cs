#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Practica7
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="mventas")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void Insertartist(artist instance);
    partial void Updateartist(artist instance);
    partial void Deleteartist(artist instance);
    partial void Insertcompany(company instance);
    partial void Updatecompany(company instance);
    partial void Deletecompany(company instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Practica7.Properties.Settings.Default.mventasConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<artist> artist
		{
			get
			{
				return this.GetTable<artist>();
			}
		}
		
		public System.Data.Linq.Table<company> company
		{
			get
			{
				return this.GetTable<company>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.artist")]
	public partial class artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _artName;
		
		private string _company;
		
		private string _sales;
		
		private EntityRef<company> _company1;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnartNameChanging(string value);
    partial void OnartNameChanged();
    partial void OncompanyChanging(string value);
    partial void OncompanyChanged();
    partial void OnsalesChanging(string value);
    partial void OnsalesChanged();
    #endregion
		
		public artist()
		{
			this._company1 = default(EntityRef<company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_artName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string artName
		{
			get
			{
				return this._artName;
			}
			set
			{
				if ((this._artName != value))
				{
					this.OnartNameChanging(value);
					this.SendPropertyChanging();
					this._artName = value;
					this.SendPropertyChanged("artName");
					this.OnartNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string company
		{
			get
			{
				return this._company;
			}
			set
			{
				if ((this._company != value))
				{
					if (this._company1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncompanyChanging(value);
					this.SendPropertyChanging();
					this._company = value;
					this.SendPropertyChanged("company");
					this.OncompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sales", DbType="VarChar(50)")]
		public string sales
		{
			get
			{
				return this._sales;
			}
			set
			{
				if ((this._sales != value))
				{
					this.OnsalesChanging(value);
					this.SendPropertyChanging();
					this._sales = value;
					this.SendPropertyChanged("sales");
					this.OnsalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_artist", Storage="_company1", ThisKey="company", OtherKey="compName", IsForeignKey=true)]
		public company company1
		{
			get
			{
				return this._company1.Entity;
			}
			set
			{
				company previousValue = this._company1.Entity;
				if (((previousValue != value) 
							|| (this._company1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._company1.Entity = null;
						previousValue.artist.Remove(this);
					}
					this._company1.Entity = value;
					if ((value != null))
					{
						value.artist.Add(this);
						this._company = value.compName;
					}
					else
					{
						this._company = default(string);
					}
					this.SendPropertyChanged("company1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.company")]
	public partial class company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _compName;
		
		private string _location;
		
		private EntitySet<artist> _artist;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncompNameChanging(string value);
    partial void OncompNameChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public company()
		{
			this._artist = new EntitySet<artist>(new Action<artist>(this.attach_artist), new Action<artist>(this.detach_artist));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_compName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string compName
		{
			get
			{
				return this._compName;
			}
			set
			{
				if ((this._compName != value))
				{
					this.OncompNameChanging(value);
					this.SendPropertyChanging();
					this._compName = value;
					this.SendPropertyChanged("compName");
					this.OncompNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_artist", Storage="_artist", ThisKey="compName", OtherKey="company")]
		public EntitySet<artist> artist
		{
			get
			{
				return this._artist;
			}
			set
			{
				this._artist.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_artist(artist entity)
		{
			this.SendPropertyChanging();
			entity.company1 = this;
		}
		
		private void detach_artist(artist entity)
		{
			this.SendPropertyChanging();
			entity.company1 = null;
		}
	}
}
#pragma warning restore 1591
