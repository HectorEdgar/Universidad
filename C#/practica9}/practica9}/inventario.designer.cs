#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace practica9_
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="inventario")]
	public partial class inventarioDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void Insertproducts(products instance);
    partial void Updateproducts(products instance);
    partial void Deleteproducts(products instance);
    partial void Insertsuppliers(suppliers instance);
    partial void Updatesuppliers(suppliers instance);
    partial void Deletesuppliers(suppliers instance);
    #endregion
		
		public inventarioDataContext() : 
				base(global::practica9_.Properties.Settings.Default.inventarioConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public inventarioDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public inventarioDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public inventarioDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public inventarioDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<products> products
		{
			get
			{
				return this.GetTable<products>();
			}
		}
		
		public System.Data.Linq.Table<suppliers> suppliers
		{
			get
			{
				return this.GetTable<suppliers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.products")]
	public partial class products : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _productoId;
		
		private string _productCode;
		
		private string _name;
		
		private System.Nullable<int> _quantity;
		
		private System.Nullable<decimal> _price;
		
		private System.Nullable<int> _supplierId;
		
		private EntityRef<suppliers> _suppliers;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnproductoIdChanging(int value);
    partial void OnproductoIdChanged();
    partial void OnproductCodeChanging(string value);
    partial void OnproductCodeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    partial void OnsupplierIdChanging(System.Nullable<int> value);
    partial void OnsupplierIdChanged();
    #endregion
		
		public products()
		{
			this._suppliers = default(EntityRef<suppliers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productoId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int productoId
		{
			get
			{
				return this._productoId;
			}
			set
			{
				if ((this._productoId != value))
				{
					this.OnproductoIdChanging(value);
					this.SendPropertyChanging();
					this._productoId = value;
					this.SendPropertyChanged("productoId");
					this.OnproductoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productCode", DbType="Char(3)")]
		public string productCode
		{
			get
			{
				return this._productCode;
			}
			set
			{
				if ((this._productCode != value))
				{
					this.OnproductCodeChanging(value);
					this.SendPropertyChanging();
					this._productCode = value;
					this.SendPropertyChanged("productCode");
					this.OnproductCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(30)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(7,2)")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supplierId", DbType="Int")]
		public System.Nullable<int> supplierId
		{
			get
			{
				return this._supplierId;
			}
			set
			{
				if ((this._supplierId != value))
				{
					if (this._suppliers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsupplierIdChanging(value);
					this.SendPropertyChanging();
					this._supplierId = value;
					this.SendPropertyChanged("supplierId");
					this.OnsupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="suppliers_products", Storage="_suppliers", ThisKey="supplierId", OtherKey="suplierId", IsForeignKey=true)]
		public suppliers suppliers
		{
			get
			{
				return this._suppliers.Entity;
			}
			set
			{
				suppliers previousValue = this._suppliers.Entity;
				if (((previousValue != value) 
							|| (this._suppliers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._suppliers.Entity = null;
						previousValue.products.Remove(this);
					}
					this._suppliers.Entity = value;
					if ((value != null))
					{
						value.products.Add(this);
						this._supplierId = value.suplierId;
					}
					else
					{
						this._supplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("suppliers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.suppliers")]
	public partial class suppliers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _suplierId;
		
		private string _name;
		
		private string _phone;
		
		private EntitySet<products> _products;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsuplierIdChanging(int value);
    partial void OnsuplierIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    #endregion
		
		public suppliers()
		{
			this._products = new EntitySet<products>(new Action<products>(this.attach_products), new Action<products>(this.detach_products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_suplierId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int suplierId
		{
			get
			{
				return this._suplierId;
			}
			set
			{
				if ((this._suplierId != value))
				{
					this.OnsuplierIdChanging(value);
					this.SendPropertyChanging();
					this._suplierId = value;
					this.SendPropertyChanged("suplierId");
					this.OnsuplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(30)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Char(8)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="suppliers_products", Storage="_products", ThisKey="suplierId", OtherKey="supplierId")]
		public EntitySet<products> products
		{
			get
			{
				return this._products;
			}
			set
			{
				this._products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_products(products entity)
		{
			this.SendPropertyChanging();
			entity.suppliers = this;
		}
		
		private void detach_products(products entity)
		{
			this.SendPropertyChanging();
			entity.suppliers = null;
		}
	}
}
#pragma warning restore 1591
