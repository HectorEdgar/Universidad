; The Horde version 3.1
; An Artificial Intelligence Script written by Archon 2009-2013

; Settings: (preferred settings)
; Game Version: UP, AoFE
; Game Type: Any (RM and PIDM)
; Location: Any [doesn't play maps where transports of villagers is required (e.g. Migration); doesn't play 'nothing' maps, requires ai_info_map_type BLACK_FOREST 0 1 0 to detect MICHI]
; Map Size: Any
; Teams: Yes
; Resources: Any (standard)
; Difficulty: Any (hard)
; Population: Any (200)
; Starting Age: Any (dark age or PI)
; Victory: Any (conquest)
; All Techs: No
; Civilisation: Any
; Get the latest version at: http://forums.aiscripters.com/viewtopic.php?f=8&t=2176


;List of taunts it reacts to:
;3 - 6: Gives resources away if it has enough.
;31 - Attack an Enemy: If requested by an AI, it targets player stored by sn-target-player-number.
;33 - Stop slinging resources. If slinging is requested early and is immediately canceled it may mess up the strategy.
;38 - Sling Resources. Human player only, stops any unit production except for villagers.
;222 - Help Allies. If requested by an AI, it targets player stored in goal 82.
;249 - Chats current resource amount
;250 - Chats current strategy


;Reuse obsolete strategic numbers that have no effect.
(defconst sn-current-age 193);tracks our current age
(defconst sn-military-level 190); compares our military with enemy
(defconst sn-resource-control 191); 0=spend res free, 1=navy, 2=research only; > 2 specific items
(defconst sn-infantry-threat 53)
(defconst sn-archer-threat 64)
(defconst sn-cavalry-threat 65)

;Goals
(defconst increase-town-size-goal 1); this increases town size when needed, 0 = no increase, 2 = building placed this rule pass, else increase
(defconst attack-goal 2)
(defconst strategy-goal 3)
(defconst unit-goal 4)
(defconst train-civ-goal 5);1=train villagers, !=1 no villagers
(defconst control-goal 6); 6 = allow to be shot, 7 = shot, also controls if stone for a castle is needed.
(defconst anti-cavalry-threat-goal 7)
(defconst monk-threat-goal 8)
(defconst enemy-goal 9); keep track of what our foe is doing
(defconst farm-goal 10);enable/disable farming
(defconst under-attack-goal 11); town  under attack or just a little harass?
(defconst enemy-boats-goal 12)
(defconst ffa-game-goal 13)
(defconst need-loom-goal 14)
(defconst escrow-purpose-goal 15); keeps track on what we use our escrow
(defconst spread-military-goal 16); spread military every couple of minutes to prevent villagers stuck
(defconst uu-up-goal 17); use escrow to upgrade uu
(defconst hostilities-goal 18); set this flag when we're attacked or attacking - avoid rule too long error
(defconst ranged-unit-type-goal 19);shows the ranged unit we use
(defconst retreat-now-goal 20); use to retreat with UP, condition: 1=always, 2=when attacking, 3=attack conditions false
(defconst housing-goal 21); used to build multiple houses with UP
(defconst anti-monk-threat-goal 22)
(defconst enemy-sighted-goal 23); when enemy activities detected, split the attack groups
(defconst attack-status-goal 24); indicates if we stop or regroup the attack
(defconst forward-threat-goal 25); enemy tower rush threat
(defconst enemy-fortifications-goal 26)
(defconst restart-attack-goal 27); restarts attack in team games if TSA was reduced to place a building
(defconst save-wood-goal 28); controls spending wood
(defconst meso-enemy-goal 29); enemy has a meso civ; saves elements in a rule
(defconst nr-map-goal 30); focus on eco in easily wall-able maps vs humans
(defconst tribute-goal 31); ask for resources
(defconst patrol-goal 32); resets patrol attacks sent by the direct unit feature
(defconst split-rule-goal 33); split rule if we need more than 16 elements
(defconst tc-dodging-goal 34); move scout out of TC fire
(defconst kill-scouts-goal 35); kill enemy scouts
(defconst forward-goal 36)
(defconst micro-goal 41)
(defconst hunting-goal 42); controls hunting
(defconst math-goal 43); math goal, or temporary stored values
(defconst math-goal2 44)
(defconst math-goal3 45)
(defconst math-goal4 46)
(defconst raid-goal 47); raiding weak player's eco.
(defconst closest-enemy-goal 48); stores player number of nearest enemy
(defconst threat-time-goal 49); stores time in miliseconds we were last attacked
(defconst threat-player-goal 50); stores player number of the attacker
(defconst threat-source-goal 51); unit class of the last enemy attacker
(defconst threat-target-goal 52); unit class of the our last attacked unit
(defconst winning-player-goal 53); player number of enemy winning by specifal victory condition
(defconst victory-type-goal 54); winning type
(defconst victory-time-goal 55); time left
(defconst is-zero-goal 56); is always zero for some UP stuff
(defconst is-one-goal 57); is always one for some UP stuff
(defconst dark-build-order-goal 58); 1 = dock first, 2 = skip farms on a map that has more berries
(defconst aofe-game-goal 60); set to 1 if forgotten empires expansion is detected
(defconst p1x-goal 61)
(defconst p1y-goal 62)
(defconst p2x-goal 63)
(defconst p2y-goal 64)
(defconst object-point-goal 65)
(defconst object-point-y-goal 66)
(defconst save-point-goal 67)
(defconst save-point-y-goal 68)
(defconst point-distance-goal 69)
(defconst position-goal 70); detect if we're pocket (=2) or flank (=1) player
(defconst forward-point-goal 71)
(defconst forward-point-y-goal 72)
(defconst attacking-enemy-goal 82); stores player number of the attacker; shared with Barbarian
(defconst team-coordination-goal 392); shared with Barbarian
(defconst position-self-goal 478)
(defconst position-self-y-goal 479)


;SN/Goal Values
(defconst dark 78)
(defconst df-transit 79)
(defconst feudal 80)
(defconst fc-transit 81)
(defconst castle 82)
(defconst ci-transit 83)
(defconst imperial 84)
(defconst flush 200)
(defconst rush 201)
(defconst boom 202)
(defconst fast-imp 203)
(defconst sling 204)
(defconst mix 1)
(defconst belated-flush-defense 5)
(defconst aggressive-rush 6)
(defconst shot 7)
(defconst navy 4000)
(defconst flank 1)
(defconst pocket 2)
(defconst retreat 1)
(defconst groups 2)
(defconst tsa 3)


;Timers
(defconst increase-town-size-timer 1)
(defconst reset-town-size-timer 2)
(defconst scouting-timer 3)
(defconst attack-timer 4)
(defconst spread-military-timer 5)
(defconst under-attack-timer 7)
(defconst second-mill-timer 8)
(defconst civ-explore-timer 8)
(defconst lumber-timer 8)
(defconst one-minute-timer 9)
(defconst tribute-timer 10)
(defconst micro-timer 11); rest is up only, as in 1.0c only 10 timers are available
(defconst navy-attack-timer 12); don't spam attack or we can't retreat boats from fortifications
(defconst help-ally-timer 13); indicated when we sent help to ally
(defconst villager-timer 14); timer for forcedrop to continuously train villager
(defconst retreat-timer 15); timer to avoid looping retreat unit commands
(defconst hunting-timer 16)
(defconst garrison-timer 17)
(defconst disable-defend-groups-timer 18); always enable defending again
(defconst monk-micro-timer 19)
(defconst misc-micro-timer 20)
(defconst train-forward-timer 21)

;Unit IDs
(defconst male-hunter 122)
(defconst female-hunter 216)
(defconst male-forager 120)
(defconst female-forager 354)
(defconst male-shepherd 592)
(defconst female-shepherd 590)
(defconst female-gold-miner 579)
(defconst male-gold-miner 581)
(defconst hunter 976)
(defconst food-gatherer 978)
(defconst ri-herbal-medicine 441)
(defconst ri-perfusion 457)
(defconst ri-anarchy 16)
(defconst unpacked-trebuchet 42)
(defconst rax-husky-line 759)
(defconst ranged-units 900)
(defconst buildings 903)
(defconst civilians 904)
(defconst infantry-units 906)
(defconst cavalry-units 912)
(defconst siege-units 913)
(defconst religious-units 918)
(defconst cavalry-archer-units 936)
(defconst gunpowder-units 944)
(defconst warships 922)
(defconst tree 915)
(defconst forage-bush 59)
(defconst gold-mine 66)
(defconst stone-mine 102)
(defconst shore-fish 933)
(defconst sea-fish 905)
(defconst sheep 958)
(defconst relic 285)
(defconst revealer 112)
(defconst flare 274)
(defconst tc-arrow 54)
(defconst watch-tower-arrow 786)
(defconst castle-arrow 746)
(defconst castle-arrow-chemistry 747)

;User Patch
(defconst game-time 0); FactId Constants
(defconst population-cap 1)
(defconst population-headroom 2)
(defconst housing-headroom 3)
(defconst idle-farm-count 4)
(defconst food-amount 5)
(defconst wood-amount 6)
(defconst stone-amount 7)
(defconst gold-amount 8)
(defconst escrow-amount 9)
(defconst commodity-buying-price 10)
(defconst commodity-selling-price 11)
(defconst dropsite-min-distance 12)
(defconst soldier-count 13)
(defconst attack-soldier-count 14)
(defconst defend-soldier-count 15)
(defconst warboat-count 16)
(defconst attack-warboat-count 17)
(defconst defend-warboat-count 18)
(defconst current-age 19)
(defconst current-score 20)
(defconst civilization 21)
(defconst player-number 22)
(defconst player-in-game 23)
(defconst unit-count 24)
(defconst unit-type-count 25)
(defconst unit-type-count-total 26)
(defconst building-count 27)
(defconst building-type-count 28)
(defconst building-type-count-total 29)
(defconst population 30)
(defconst military-population 31)
(defconst civilian-population 32)
(defconst random-number 33)
(defconst resource-amount 34)
(defconst player-distance 35)
(defconst allied-goal 36)
(defconst allied-sn 37)
(defconst resource-percent 38)
(defconst enemy-buildings-in-town 39)
(defconst enemy-units-in-town 40)
(defconst enemy-villagers-in-town 41)
(defconst players-in-game 42)
(defconst defender-count 43)
(defconst building-type-in-town 44)
(defconst unit-type-in-town 45)
(defconst villager-type-in-town 46)
(defconst gaia-type-count 47)
(defconst gaia-type-count-total 48)
(defconst cc-gaia-type-count 49)
(defconst aggressive 0); Define AttackStance Constants
(defconst defensive 1)
(defconst stand-ground 2)
(defconst no-attack 3)
(defconst projectile-town-center 0); Define ProjectileType Constants
(defconst projectile-castle 1)
(defconst projectile-watch-tower 2)
(defconst projectile-bombard-tower 3)
(defconst projectile-ship 4)
(defconst projectile-siege 5)
(defconst projectile-fortification 6)
(defconst projectile-any 7)
(defconst find-attacker 0); Define FindPlayerMethod Constants
(defconst find-random 1)
(defconst find-closest 2)
(defconst find-ordered 3)
(defconst research-unavailable 0); Define ResearchState Constants
(defconst research-available 1)
(defconst research-pending 2)
(defconst research-complete 3)
(defconst timer-disabled 0); Define TimerState Constants
(defconst timer-triggered 1)
(defconst timer-running 2)
(defconst group-type-land-attack 100);Define GroupType Constants
(defconst group-type-land-explore 101)
(defconst group-type-land-trade 109)
(defconst group-type-water-attack 102)
(defconst group-type-water-explore 103)
(defconst group-type-water-trade 106)
(defconst group-type-transport-ship 104)
(defconst group-type-fishing-ship 105)
(defconst group-type-forward-builder 107)
(defconst group-type-monk 108)
(defconst place-normal 0);Define PlacementType Constants
(defconst place-forward 1)
(defconst place-control 2)
(defconst place-point 3)
(defconst amount-tribute-inefficiency 46)
(defconst position-center 0)
(defconst position-opposite 1)
(defconst position-corner 2)
(defconst position-enemy 3)
(defconst position-border 4)
(defconst position-mirror 5)
(defconst position-flank 6)
(defconst position-zero 7)
(defconst position-map-size 8)
(defconst position-self 9)
(defconst position-target 10)
(defconst position-focus 11)
(defconst position-object 12)
(defconst position-point 13)
(defconst search-local 1); my units
(defconst search-remote 2); focus player's units
(defconst action-default 0)
(defconst action-move 1)
(defconst action-patrol 2)
(defconst formation-line 2)
(defconst formation-box 4)
(defconst formation-stagger 7)
(defconst formation-flank 8)
(defconst action-default 0)
(defconst action-move 1)
(defconst action-patrol 2)
(defconst action-guard 3)
(defconst action-follow 4)
(defconst action-stop 5)
(defconst cmdid-flag 0)
(defconst cmdid-livestock-gaia 1)
(defconst cmdid-civilian-building 2)
(defconst cmdid-villager 3)
(defconst cmdid-military 4)
(defconst cmdid-trade 5)
(defconst cmdid-monk 6)
(defconst cmdid-transport 7)
(defconst cmdid-relic 8)
(defconst cmdid-unknown 9)
(defconst cmdid-military-building 10)
(defconst actionid-attack 600)
(defconst actionid-defend 601)
(defconst actionid-build 602)
(defconst actionid-heal 603)
(defconst actionid-convert 604)
(defconst actionid-explore 605)
(defconst actionid-stop 606)
(defconst actionid-runaway 607)
(defconst actionid-retreat 608)
(defconst actionid-gather 609)
(defconst actionid-move 610)
(defconst actionid-patrol 611)
(defconst actionid-follow 612)
(defconst actionid-hunt 613)
(defconst actionid-transport 614)
(defconst actionid-trade 615)
(defconst actionid-evade 616)
(defconst actionid-enter 617)
(defconst actionid-repair 618)
(defconst actionid-train 619)
(defconst actionid-research 620)
(defconst actionid-unload 621)
(defconst orderid-attack 700)
(defconst orderid-defend 701)
(defconst orderid-build 702)
(defconst orderid-heal 703)
(defconst orderid-convert 704)
(defconst orderid-explore 705)
(defconst orderid-stop 706)
(defconst orderid-runaway 707)
(defconst orderid-retreat 708)
(defconst orderid-gather 709)
(defconst orderid-move 710)
(defconst orderid-patrol 711)
(defconst orderid-follow 712)
(defconst orderid-hunt 713)
(defconst orderid-transport 714)
(defconst orderid-trade 715)
(defconst orderid-evade 716)
(defconst orderid-enter 717)
(defconst orderid-repair 718)
(defconst orderid-train 719)
(defconst orderid-research 720)
(defconst orderid-unload 721)
(defconst object-data-id 0)
(defconst object-data-type 1)
(defconst object-data-class 2)
(defconst object-data-category 3)
(defconst object-data-cmdid 4)
(defconst object-data-action 5)
(defconst object-data-order 6)
(defconst object-data-target 7)
(defconst object-data-point-x 8)
(defconst object-data-point-y 9)
(defconst object-data-hitpoints 10)
(defconst object-data-maxhp 11)
(defconst object-data-range 12)
(defconst object-data-speed 13)
(defconst object-data-dropsite 14)
(defconst object-data-resource 15)
(defconst object-data-carry 16)
(defconst object-data-garrisoned 17)
(defconst object-data-garrison-count 18)
(defconst object-data-status 19)
(defconst sort-targets 0)
(defconst sort-random 1)
(defconst sort-distance 2)
(defconst sort-hitpoints 3)
(defconst sort-range 4)
(defconst find-attacker 0)
(defconst find-random 1)
(defconst find-closest 2)
(defconst find-ordered 3)
(defconst ally 0)
(defconst neutral 1)
(defconst any 2)
(defconst enemy 3)


;AoFE item list
#load-if-defined CIV-TAGS-FOR-EDITOR
(defconst ITALIAN-CIV 0)
(defconst MAGYAR-CIV 0)
(defconst INDIAN-CIV 0)
(defconst SLAVIC-CIV 0)
(defconst INCAN-CIV 0)
#end-if
(defconst italian 19)
(defconst indian 20)
(defconst incan 21)
(defconst magyar 22)
(defconst slavic 23)
(defconst stable-tarkan 886)
(defconst stable-elite-tarkan 887)
(defconst boyar 876)
(defconst elite-boyar 878)
(defconst kamayuk 879)
(defconst elite-kamayuk 881)
(defconst slinger 185)
(defconst ri-elite-magyar-huszar 472)
(defconst magyar-huszar 869)
(defconst elite-magyar-huszar 871)
(defconst ri-elite-elephant-archer 481)
(defconst elephant-archer 873)
(defconst elite-elephant-archer 875)
(defconst imperial-camel 897)
(defconst ri-elite-genoese-crossbow 468)
(defconst genoese-crossbowman 866)
(defconst elite-genoese-crossbowman 868)
(defconst heavy-eagle-warrior 753)
(defconst condottiero 882)
(defconst ri-chivalry 493)
(defconst ri-inquisition 492)
(defconst ri-sipahi 491)
(defconst ri-madrasah 490)
(defconst ri-ironclad 489)
(defconst ri-boiling-oil 488)
(defconst ri-nomads 487)
(defconst ri-panokseon 486)
(defconst ri-yasama 484)
(defconst ri-marauders 483)
(defconst ri-atlatl 460)
(defconst ri-war-wolf 461)
(defconst ri-greek-fire 464)
(defconst ri-chieftains 463)
(defconst ri-stronghold 482)
(defconst ri-great-wall 462)
(defconst ri-orthodoxy 512)
(defconst ri-druzhina 513)
(defconst ri-elite-boyar 504)
(defconst ri-andean-sling 516)
(defconst ri-couriers 517)
(defconst ri-elite-kamayuk 509)
(defconst ri-sultans 506)
(defconst ri-shatagni 507)
(defconst ri-imperial-camel 521)
(defconst ri-mercenaries 514)
(defconst ri-recurve-bow 515)
(defconst ri-silk-road 499)
(defconst ri-pavise 494)
(defconst ri-revetments 525)
(defconst ri-eagle-warrior 384)
(defconst ri-gillnets 65)
(defconst ri-hunting-dogs 526)
(defconst ri-obsidian-arrows 485)
(defconst siege-tower 885)
(defconst upgraded-palisade-wall 119)
(defconst sea-tower 785)
(defconst sea-wall 788)
(defconst sn-local-targeting-mode 286)

; Other SN
(defconst sn-food-modifier-percentage 156)
(defconst sn-wood-modifier-percentage 157)
(defconst sn-stone-modifier-percentage 158)
(defconst sn-gold-modifier-percentage 159)

;civ specific
#load-if-defined AZTEC-CIV
(defconst dark-age-villager 28)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit eagle-warrior)
(defconst unique-unit-food 110);minimum food amount
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit archer)
(defconst get-lightcav 0)
(defconst melee-unit eagle-warrior)
(defconst scout-unit eagle-warrior-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 600)
(defconst sling-number 100); > 10 actually never slings
(defconst sling-two 0)
(defconst blot-size 0)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 15)
(defconst villager-castle 12)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 10)
(defconst number-stables 5)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 10)
(defconst pidm-wood 10)
(defconst pidm-gold 75)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 36)
(defconst uu-wood2 30)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 1000)
(defconst escrow-amount-gold 500)
#end-if
#load-if-defined BRITON-CIV
(defconst dark-age-villager 28)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit archer)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 2)
(defconst military-level-flush-aggressive 1)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 90)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 12)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 3)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 0)
(defconst number-archery-ranges 9)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 47)
(defconst pidm-gold 48)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 34)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 30)
(defconst uu-wood2 36)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 30)
(defconst ci-uu-switch-wood 40)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 20)
(defconst michi-wood 39)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 850)
(defconst escrow-amount-gold 850)
#end-if
#load-if-defined BYZANTINE-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit skirmisher)
(defconst unique-unit-food 120)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit skirmisher)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 2)
(defconst military-level-flush-aggressive 1)
(defconst allow-forward-castle 0)
(defconst sling-time 270)
(defconst sling-number 80)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 12)
(defconst villager-monastery 12)
(defconst villager-town-center 15)
(defconst villager-castle 3)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 5)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 10)
(defconst pidm-wood 10)
(defconst pidm-gold 75)
(defconst pidm-stone 5)
(defconst pidm-food2 37)
(defconst pidm-wood2 32)
(defconst pidm-gold2 27)
(defconst pidm-stone2 4)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 39)
(defconst uu-wood2 39)
(defconst uu-gold2 18)
(defconst uu-stone2 3)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 37)
(defconst ci-uu-switch-gold 18)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 28)
(defconst michi-wood 31)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 1600)
(defconst escrow-amount-gold 800)
#end-if
#load-if-defined CELTIC-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 115)
(defconst default-flush-unit militiaman-line)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged 0)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 2)
(defconst military-level-flush-aggressive 1)
(defconst allow-forward-castle 0)
(defconst sling-time 200)
(defconst sling-number 30)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 3)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 16)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 55)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 39)
(defconst uu-wood 45)
(defconst uu-gold 13)
(defconst uu-stone 3)
(defconst uu-food2 40)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 1000)
(defconst escrow-amount-gold 800)
#end-if
#load-if-defined CHINESE-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst default-ranged archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 260)
(defconst sling-number 70)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 15)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 8)
(defconst number-archery-ranges 6)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 47)
(defconst pidm-gold 48)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 34)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 32)
(defconst uu-wood2 38)
(defconst uu-gold2 24)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 34)
(defconst ci-uu-switch-wood 34)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 24)
(defconst michi-wood 35)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 760)
(defconst escrow-amount-gold 760)
#end-if
#load-if-defined FRANKISH-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 8)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 14)
(defconst villager-market 8)
(defconst number-barracks 8)
(defconst number-stables 10)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 15)
(defconst pidm-food 45)
(defconst pidm-wood 0)
(defconst pidm-gold 50)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 44)
(defconst uu-wood2 26)
(defconst uu-gold2 25)
(defconst uu-stone2 5)
(defconst ci-uu-switch-food 43)
(defconst ci-uu-switch-wood 26)
(defconst ci-uu-switch-gold 25)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 1000)
(defconst escrow-amount-gold 850)
#end-if
#load-if-defined GOTHIC-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 100)
(defconst default-flush-unit militiaman-line)
(defconst no-gold-flush-unit skirmisher)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-ranged archer)
#else
(defconst default-ranged scorpion)
#end-if
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 250)
(defconst sling-number 40)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 20)
(defconst villager-archery-range 14)
(defconst villager-monastery 12)
(defconst villager-castle 10)
(defconst villager-mining-camp 14)
(defconst villager-town-center 18)
(defconst villager-siege-workshop 15)
(defconst villager-market 9)
(defconst number-barracks 14)
(defconst number-stables 1)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 52)
(defconst pidm-wood 12)
(defconst pidm-gold 36)
(defconst pidm-stone 0)
(defconst pidm-food2 36)
(defconst pidm-wood2 23)
(defconst pidm-gold2 36)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 51)
(defconst uu-wood2 28)
(defconst uu-gold2 19)
(defconst uu-stone2 2)
(defconst ci-uu-switch-food 46)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 20)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 1200)
(defconst escrow-amount-gold 550)
#end-if
#load-if-defined HUN-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst default-ranged cavalry-archer)
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-castle 10)
(defconst villager-archery-range 8)
(defconst villager-monastery 6)
(defconst villager-mining-camp 16)
(defconst villager-town-center 15)
(defconst villager-siege-workshop 5)
(defconst villager-market 12)
(defconst number-barracks 9)
(defconst number-stables 8)
(defconst number-archery-ranges 12)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 30)
(defconst pidm-gold 67)
(defconst pidm-stone 3)
(defconst pidm-food2 30)
(defconst pidm-wood2 32)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 30)
(defconst uu-wood2 36)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 1000)
(defconst escrow-amount-gold 500)
#end-if
#load-if-defined JAPANESE-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 110)
(defconst default-flush-unit militiaman-line)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit archer)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 210)
(defconst sling-number 75)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 16)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 60)
(defconst pidm-stone 0)
(defconst pidm-food2 38)
(defconst pidm-wood2 30)
(defconst pidm-gold2 27)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 38)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst michi-food 28)
(defconst michi-wood 31)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 950)
(defconst escrow-amount-gold 875)
#end-if
#load-if-defined KOREAN-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit my-unique-unit-line)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 180)
(defconst sling-number 20)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 16)
(defconst villager-archery-range 13)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 4)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 8)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 58)
(defconst pidm-gold 37)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 39)
(defconst pidm-gold2 30)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 48)
(defconst uu-gold 12)
(defconst uu-stone 4)
(defconst uu-food2 25)
(defconst uu-wood2 44)
(defconst uu-gold2 25)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 28)
(defconst ci-uu-switch-wood 40)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 20)
(defconst michi-wood 39)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 0)
(defconst escrow-amount-gold 800)
#end-if
#load-if-defined MAYAN-CIV
(defconst dark-age-villager 28)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit mix)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 0)
(defconst melee-unit eagle-warrior)
(defconst scout-unit eagle-warrior-line)
(defconst military-level-flush 2)
(defconst military-level-flush-aggressive 1)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 0)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 14)
(defconst villager-monastery 15)
(defconst villager-town-center 15)
(defconst villager-castle 4)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 12)
(defconst villager-market 17)
(defconst number-barracks 7)
(defconst number-stables 0)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 47)
(defconst pidm-gold 48)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 34)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 33)
(defconst uu-wood2 39)
(defconst uu-gold2 23)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 28)
(defconst ci-uu-switch-wood 38)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 20)
(defconst michi-wood 39)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 500)
(defconst escrow-amount-gold 0)
#end-if
#load-if-defined MONGOL-CIV
(defconst dark-age-villager 28)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit knight)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst unique-unit-food 0)
(defconst default-ranged cavalry-archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 1)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 230)
(defconst sling-number 50)
(defconst sling-two 0)
(defconst blot-size 0)
(defconst villager-barracks 14)
(defconst villager-stable 3)
(defconst villager-archery-range 14)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 3)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 8)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 5)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 30)
(defconst pidm-gold 65)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 34)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 30)
(defconst uu-wood2 36)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 35)
(defconst ci-uu-switch-wood 33)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 23)
(defconst michi-wood 36)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 1100)
(defconst escrow-amount-gold 675)
#end-if
#load-if-defined PERSIAN-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst unique-unit-food 0)
(defconst default-ranged cavalry-archer)
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 240)
(defconst sling-number 60)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 7)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 7)
(defconst villager-market 17)
(defconst number-barracks 4)
(defconst number-stables 6)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 37)
(defconst pidm-wood 0)
(defconst pidm-gold 58)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 46)
(defconst uu-wood2 24)
(defconst uu-gold2 26)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 46)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 24)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 1600)
(defconst escrow-amount-gold 1200)
#end-if
#load-if-defined SARACEN-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-unit knight)
#else
(defconst default-unit my-unique-unit-line)
#end-if
(defconst unique-unit-food 135)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst default-ranged archer)
(defconst pocket-unit archer)
(defconst get-lightcav 1)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 190)
(defconst sling-number 25)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 15)
(defconst villager-town-center 18)
(defconst villager-castle 9)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 9)
(defconst number-barracks 6)
(defconst number-stables 9)
(defconst number-archery-ranges 8)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 10)
(defconst pidm-wood 10)
(defconst pidm-gold 75)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 30)
(defconst uu-wood2 36)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst ci-uu-switch-food 33)
(defconst ci-uu-switch-wood 33)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 600)
(defconst escrow-amount-gold 500)
#end-if
#load-if-defined SPANISH-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 110)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst default-ranged cavalry-archer)
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 14)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 8)
(defconst number-stables 6)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 45)
(defconst pidm-wood 0)
(defconst pidm-gold 50)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 42)
(defconst uu-wood2 24)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 1200)
(defconst escrow-amount-gold 600)
#end-if
#load-if-defined TEUTONIC-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 14)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 7)
(defconst villager-market 17)
(defconst number-barracks 8)
(defconst number-stables 6)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 16)
(defconst pidm-food 45)
(defconst pidm-wood 0)
(defconst pidm-gold 50)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 42)
(defconst uu-wood2 24)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 1200)
(defconst escrow-amount-gold 600)
(defconst farm-wood 40)
#else
(defconst farm-wood 60)
#end-if
#load-if-defined TURKISH-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 110)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-ranged archer)
#else
(defconst default-ranged cavalry-archer)
#end-if
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 220)
(defconst sling-number 35)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 14)
(defconst villager-stable 3)
(defconst villager-archery-range 3)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 7)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 45)
(defconst pidm-wood 0)
(defconst pidm-gold 50)
(defconst pidm-stone 5)
(defconst pidm-food2 42)
(defconst pidm-wood2 20)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 40)
(defconst uu-wood2 26)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst escrow-amount-food 850)
(defconst escrow-amount-gold 750)
#end-if
#load-if-defined VIKING-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 115)
(defconst default-flush-unit militiaman-line)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit archer)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 600)
(defconst sling-number 95)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 9)
(defconst villager-town-center 7)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 60)
(defconst pidm-stone 0)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 38)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 46)
(defconst ci-uu-switch-wood 26)
(defconst ci-uu-switch-gold 22)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 1300)
(defconst escrow-amount-gold 550)
#end-if
#load-if-defined INCAN-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit eagle-warrior)
(defconst unique-unit-food 110)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit eagle-warrior)
(defconst get-lightcav 0)
(defconst melee-unit eagle-warrior)
(defconst scout-unit eagle-warrior-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 16)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 60)
(defconst pidm-stone 0)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 41)
(defconst uu-wood2 27)
(defconst uu-gold2 28)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 36)
(defconst ci-uu-switch-wood 32)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 1300)
(defconst escrow-amount-gold 550)
#end-if
#load-if-defined INDIAN-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit skirmisher)
(defconst unique-unit-food 160)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst melee-unit militiaman-line)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 195)
(defconst sling-number 60)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 18)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 9)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 60)
(defconst pidm-stone 0)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 38)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 1300)
(defconst escrow-amount-gold 550)
#end-if
#load-if-defined ITALIAN-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit archer)
(defconst unique-unit-food 115)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 12)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 18)
(defconst villager-castle 3)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 60)
(defconst pidm-stone 0)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 38)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 1300)
(defconst escrow-amount-gold 550)
#end-if
#load-if-defined MAGYAR-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 130)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-ranged archer)
#else
(defconst default-ranged cavalry-archer)
#end-if
(defconst pocket-unit knight)
(defconst get-lightcav 0); uu instead
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 7)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 12)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 14)
(defconst villager-market 17)
(defconst number-barracks 8)
(defconst number-stables 6)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 60)
(defconst pidm-stone 0)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 42)
(defconst uu-wood2 24)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst michi-food 30)
(defconst michi-wood 29)
(defconst ci-uu-switch-food 32)
(defconst ci-uu-switch-wood 36)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 1300)
(defconst escrow-amount-gold 550)
#end-if
#load-if-defined SLAVIC-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit knight)
(defconst unique-unit-food 115)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
#load-if-not-defined DEATH-MATCH
(defconst default-ranged monk)
#else
(defconst default-ranged 0)
#end-if
(defconst pocket-unit scorpion)
(defconst get-lightcav 1)
(defconst melee-unit knight)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 2)
(defconst villager-stable 16)
(defconst villager-archery-range 16)
(defconst villager-monastery 6)
(defconst villager-town-center 16)
(defconst villager-castle 4)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 6)
(defconst villager-market 17)
(defconst number-barracks 4)
(defconst number-stables 4)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 60)
(defconst pidm-stone 0)
(defconst pidm-food2 34)
(defconst pidm-wood2 24)
(defconst pidm-gold2 37)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 36)
(defconst uu-wood2 31)
(defconst uu-gold2 30)
(defconst uu-stone2 3)
(defconst michi-food 27)
(defconst michi-wood 32)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst escrow-amount-food 1300)
(defconst escrow-amount-gold 550)
#end-if

#load-if-defined BYZANTINE-CIV
(defconst imp-food 667)
(defconst imp-gold 536)
(defconst imp-f2 517)
(defconst imp-g2 400)
#else
#load-if-defined ITALIAN-CIV
(defconst imp-food 900)
(defconst imp-f2 730)
(defconst imp-g2 600)
(defconst imp-gold 720)
#else
(defconst imp-food 1000)
(defconst imp-f2 800)
(defconst imp-g2 650)
(defconst imp-gold 800)
#end-if
#end-if
#load-if-defined POST-IMPERIAL-AGE-START
(defconst pop-house 20)
#else
(defconst pop-house 50)
#end-if
#load-if-defined DEATH-MATCH
(defconst housing-headroom1 40)
(defconst housing-headroom2 40)
(defconst camp-distance 45)
(defconst food-distance 0)
(defconst wood-distance -1)
#load-if-defined POST-IMPERIAL-AGE-START
(defconst market-time 420)
#else
(defconst market-time 900)
#end-if
(defconst number-markets 3)
(defconst number-blacksmiths 2)
(defconst mill-distance 15)
(defconst hunt-distance 0)
(defconst spread-interval 40)
(defconst home-exploration-time 30)
(defconst town-center-placement 0)
(defconst special-attack-type2 town-center)
#else
(defconst housing-headroom1 3)
(defconst housing-headroom2 25)
(defconst camp-distance 15)
(defconst food-distance 25)
(defconst wood-distance 0)
(defconst market-time 2700)
(defconst number-blacksmiths 1)
(defconst number-markets 2)
#load-if-not-defined SCANDANAVIA-MAP
(defconst mill-distance 15)
(defconst hunt-distance 0)
#else
(defconst mill-distance 29)
(defconst hunt-distance 32)
#end-if
(defconst spread-interval 180)
#load-if-not-defined WONDER-RACE
(defconst home-exploration-time 300)
#else
(defconst home-exploration-time 32768)
#end-if
(defconst town-center-placement lumber-camp)
(defconst special-attack-type2 lumber-camp)
#end-if
#load-if-defined NOMAD-MAP
(defconst wood-distance2 -1)
#else
(defconst wood-distance2 30)
#end-if
#load-if-defined SALT-MARSH-MAP
(defconst dock-placement 1)
#else
(defconst dock-placement 0)
#end-if
#load-if-defined YUCATAN-MAP
(defconst max-warships 20)
#end-if
#load-if-defined HIGHLAND-MAP
(defconst max-warships 20)
#end-if
#load-if-not-defined HIGHLAND-MAP
#load-if-not-defined YUCATAN-MAP
(defconst max-warships 35)
#end-if
#end-if
#load-if-defined ARENA-MAP
(defconst camp-distance-tc 15)
#else
(defconst camp-distance-tc 22)
#end-if
#load-if-defined REGICIDE
#load-if-defined FORTRESS-MAP
(defconst lumber-delay 40)
#else
(defconst lumber-delay 180)
#end-if
#else
(defconst lumber-delay 180)
#end-if
#load-if-defined TINY-MAP
(defconst min-fishing 24)
(defconst heavy-wood 7000)
(defconst max-trade-cart 20)
(defconst trade-distance 54)
#end-if
#load-if-defined SMALL-MAP
(defconst min-fishing 40)
(defconst heavy-wood 8000)
(defconst max-trade-cart 20)
(defconst trade-distance 72)
#end-if
#load-if-defined MEDIUM-MAP
(defconst min-fishing 50)
(defconst heavy-wood 10000)
(defconst max-trade-cart 33)
(defconst trade-distance 90)
#end-if
#load-if-defined NORMAL-MAP
(defconst min-fishing 60)
(defconst heavy-wood 14000)
(defconst max-trade-cart 37)
(defconst trade-distance 120)
#end-if
#load-if-defined LARGE-MAP
(defconst min-fishing 70)
(defconst heavy-wood 18000)
(defconst max-trade-cart 40)
(defconst trade-distance 150)
#end-if
#load-if-defined GIANT-MAP
(defconst min-fishing 80)
(defconst heavy-wood 22000)
#load-if-defined TEAM-ISLANDS-MAP
(defconst max-trade-cart 40)
#else
(defconst max-trade-cart 50)
#end-if
(defconst trade-distance 192)
#end-if
#load-if-defined HIGHLAND-MAP
(defconst water-mixed 1000)
(defconst water-islands 1001)
#else
#load-if-defined TINY-MAP
(defconst water-mixed 1000)
(defconst water-islands 1001)
#end-if
#load-if-defined SMALL-MAP
(defconst water-mixed 2000)
(defconst water-islands 2001)
#end-if
#load-if-defined MEDIUM-MAP
(defconst water-mixed 4000)
(defconst water-islands 4001)
#end-if
#load-if-defined NORMAL-MAP
(defconst water-mixed 4000)
(defconst water-islands 4001)
#end-if
#load-if-defined LARGE-MAP
(defconst water-mixed 4000)
(defconst water-islands 4001)
#end-if
#load-if-defined GIANT-MAP
(defconst water-mixed 4000)
(defconst water-islands 4001)
#end-if
#end-if
#load-if-not-defined TURBO-RANDOM-MAP
#load-if-not-defined POPULATION-CAP-25
(defconst number-rams 3)
(defconst number-garrison-units 4)
#load-if-defined DIFFICULTY-EASIEST
(defconst villager-feudal 16)
(defconst villager-flush 16)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst villager-feudal 19)
(defconst villager-flush 18)
#end-if
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-defined LOW-RESOURCES-START
#load-if-defined DIFFICULTY-MODERATE
(defconst villager-flush 27)
(defconst villager-feudal 29)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst villager-flush 24)
(defconst villager-feudal 28)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst villager-flush 20)
(defconst villager-feudal 24)
#end-if
#end-if
#load-if-defined MEDIUM-RESOURCES-START
#load-if-not-defined DIFFICULTY-HARDEST
(defconst villager-flush 20)
(defconst villager-feudal 24)
#else
(defconst villager-feudal 20)
(defconst villager-flush 16)
#end-if
#end-if
#load-if-defined HIGH-RESOURCES-START
(defconst villager-flush 16)
#load-if-not-defined DIFFICULTY-HARDEST
(defconst villager-feudal 16)
#else
(defconst villager-feudal 10)
#end-if
#end-if
#end-if ;NOT EASY
#end-if ;NOT EASIEST
#else
(defconst number-rams 2)
(defconst number-garrison-units 1)
(defconst villager-feudal 24)
(defconst villager-flush 24)
#end-if ; = POP25
#else ; = TURBO
#load-if-not-defined POPULATION-CAP-25
(defconst number-rams 3)
(defconst number-garrison-units 4)
#else
(defconst number-rams 2)
(defconst number-garrison-units 1)
#end-if
(defconst villager-flush 15)
(defconst villager-feudal 16)
#end-if
#load-if-defined GOLD-RUSH-MAP
#load-if-defined TINY-MAP
(defconst castle-age-camp-distance 38); high camp distance to reach center gold
#end-if
#load-if-defined SMALL-MAP
(defconst castle-age-camp-distance 48)
#end-if
#load-if-defined MEDIUM-MAP
(defconst castle-age-camp-distance 64)
#end-if
#load-if-defined NORMAL-MAP
(defconst castle-age-camp-distance 90)
#end-if
#load-if-defined LARGE-MAP
(defconst castle-age-camp-distance 124)
#end-if
#load-if-defined GIANT-MAP
(defconst castle-age-camp-distance 124)
#end-if
#else
(defconst castle-age-camp-distance 35)
#end-if ; not gold-rush-map
#load-if-not-defined UP-MICHI-STYLE
(defconst scorpion-gold-min 170)
(defconst villager-coinage 60)
(defconst safe-town 40)
#else
(defconst scorpion-gold-min 120)
(defconst villager-coinage 100)
(defconst safe-town 255)
#end-if
#load-if-defined POPULATION-CAP-25
(defconst max-fleet 20)
(defconst twenty-five-percent-pop 6)
(defconst thirty-percent-pop 7)
(defconst fourty-percent-pop 10)
(defconst sixty-percent-pop 15)
(defconst seventy-five-percent-pop 19)
(defconst eighty-five-percent-pop 21)
(defconst max-civ 12)
(defconst max-civ-pop 20)
(defconst del-civ-pop 24)
(defconst max-pop 25)
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
(defconst low-min-number-upgrade 1)
(defconst mid-min-number-upgrade 2)
(defconst high-min-number-upgrade 4)
(defconst max-trade-pop 0)
#end-if
#load-if-defined POPULATION-CAP-50
(defconst max-fleet 30)
(defconst twenty-five-percent-pop 13)
(defconst thirty-percent-pop 15)
(defconst fourty-percent-pop 20)
(defconst sixty-percent-pop 30)
(defconst seventy-five-percent-pop 38)
(defconst eighty-five-percent-pop 42)
(defconst max-civ 28)
(defconst max-civ-pop 45)
(defconst del-civ-pop 48)
(defconst max-pop 50)
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 2)
(defconst tc-level-five 2)
(defconst low-min-number-upgrade 2)
(defconst mid-min-number-upgrade 5)
(defconst high-min-number-upgrade 7)
(defconst max-trade-pop 0)
#end-if
#load-if-defined POPULATION-CAP-75
(defconst max-fleet 40)
(defconst twenty-five-percent-pop 19)
(defconst thirty-percent-pop 22)
(defconst fourty-percent-pop 30)
(defconst sixty-percent-pop 45)
(defconst seventy-five-percent-pop 57)
(defconst eighty-five-percent-pop 64)
(defconst max-civ 50)
(defconst max-civ-pop 65)
(defconst del-civ-pop 72)
(defconst max-pop 75)
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 2)
(defconst tc-level-five 2)
(defconst low-min-number-upgrade 5)
(defconst mid-min-number-upgrade 8)
(defconst high-min-number-upgrade 12)
(defconst max-trade-pop 7)
#end-if
#load-if-defined POPULATION-CAP-100
(defconst max-fleet 40)
(defconst twenty-five-percent-pop 25)
(defconst thirty-percent-pop 30)
(defconst fourty-percent-pop 40)
(defconst sixty-percent-pop 60)
(defconst seventy-five-percent-pop 75)
(defconst eighty-five-percent-pop 85)
(defconst max-civ 65)
(defconst max-civ-pop 95)
(defconst del-civ-pop 98)
(defconst max-pop 100)
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 2)
(defconst tc-level-four 2)
(defconst tc-level-five 3)
(defconst low-min-number-upgrade 5)
(defconst mid-min-number-upgrade 8)
(defconst high-min-number-upgrade 15)
(defconst max-trade-pop 10)
#end-if
#load-if-defined POPULATION-CAP-125
(defconst max-fleet 50)
(defconst twenty-five-percent-pop 32)
(defconst thirty-percent-pop 37)
(defconst fourty-percent-pop 50)
(defconst sixty-percent-pop 75)
(defconst seventy-five-percent-pop 94)
(defconst eighty-five-percent-pop 106)
(defconst max-civ 75)
(defconst max-civ-pop 115)
(defconst del-civ-pop 123)
(defconst max-pop 125)
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 2)
(defconst tc-level-four 3)
(defconst tc-level-five 3)
(defconst low-min-number-upgrade 5)
(defconst mid-min-number-upgrade 8)
(defconst high-min-number-upgrade 15)
(defconst max-trade-pop 12)
#end-if
#load-if-defined POPULATION-CAP-150
(defconst max-fleet 56)
(defconst twenty-five-percent-pop 38)
(defconst thirty-percent-pop 45)
(defconst fourty-percent-pop 60)
(defconst sixty-percent-pop 90)
(defconst seventy-five-percent-pop 113)
(defconst eighty-five-percent-pop 128)
(defconst max-civ 88)
(defconst max-civ-pop 140)
(defconst del-civ-pop 148)
(defconst max-pop 150)
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 3)
(defconst tc-level-four 3)
(defconst tc-level-five 4)
(defconst low-min-number-upgrade 5)
(defconst mid-min-number-upgrade 8)
(defconst high-min-number-upgrade 15)
(defconst max-trade-pop 15)
#end-if
#load-if-defined POPULATION-CAP-175
(defconst max-fleet 66)
(defconst twenty-five-percent-pop 44)
(defconst thirty-percent-pop 52)
(defconst fourty-percent-pop 70)
(defconst sixty-percent-pop 105)
(defconst seventy-five-percent-pop 131)
(defconst eighty-five-percent-pop 149)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 5)
(defconst max-civ 57)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 12)
(defconst max-civ 67)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 20)
(defconst max-civ 80)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 35)
(defconst max-civ 100)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 35)
(defconst max-civ 100)
#end-if
(defconst max-civ-pop 165)
(defconst del-civ-pop 173)
(defconst max-pop 175)
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 3)
(defconst tc-level-four 4)
(defconst tc-level-five 5)
(defconst low-min-number-upgrade 5)
(defconst mid-min-number-upgrade 8)
(defconst high-min-number-upgrade 15)
#end-if
#load-if-defined POPULATION-CAP-200
#load-if-not-defined POPULATION-CAP-EXTENDED
(defconst max-fleet 75)
(defconst twenty-five-percent-pop 50)
(defconst thirty-percent-pop 60)
(defconst fourty-percent-pop 80)
(defconst sixty-percent-pop 120)
(defconst seventy-five-percent-pop 150)
(defconst eighty-five-percent-pop 170)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 5)
(defconst max-civ 60)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 12)
(defconst max-civ 75)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 20)
(defconst max-civ 90)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 40)
(defconst max-civ 120)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 40)
(defconst max-civ 120)
#end-if
(defconst max-civ-pop 185)
#load-if-not-defined GOTHIC-CIV
(defconst del-civ-pop 196)
(defconst max-pop 200)
#else
(defconst del-civ-pop 206)
(defconst max-pop 210)
#end-if
#end-if
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 3)
(defconst tc-level-four 4)
(defconst tc-level-five 5)
(defconst low-min-number-upgrade 5)
(defconst mid-min-number-upgrade 8)
(defconst high-min-number-upgrade 15)
#end-if
#load-if-defined POPULATION-CAP-225
(defconst max-fleet 78)
(defconst twenty-five-percent-pop 56)
(defconst thirty-percent-pop 66)
(defconst fourty-percent-pop 90)
(defconst sixty-percent-pop 135)
(defconst seventy-five-percent-pop 169)
(defconst eighty-five-percent-pop 191)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 5)
(defconst max-civ 65)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 12)
(defconst max-civ 80)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 20)
(defconst max-civ 100)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 40)
(defconst max-civ 135)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 40)
(defconst max-civ 135)
#end-if
(defconst max-civ-pop 210)
(defconst del-civ-pop 221)
(defconst max-pop 225)
#end-if
#load-if-defined POPULATION-CAP-EXTENDED; Load for Pop >= 250 to prevent error message
#load-if-not-defined POPULATION-CAP-225
(defconst max-fleet 90)
(defconst twenty-five-percent-pop 63)
(defconst thirty-percent-pop 75)
(defconst fourty-percent-pop 100)
(defconst sixty-percent-pop 150)
(defconst seventy-five-percent-pop 187)
(defconst eighty-five-percent-pop 213)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 5)
(defconst max-civ 65)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 12)
(defconst max-civ 80)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 20)
(defconst max-civ 100)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 50)
(defconst max-civ 140)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 50)
(defconst max-civ 140)
#end-if
(defconst max-civ-pop 220)
(defconst del-civ-pop 246)
(defconst max-pop 250)
#end-if
#end-if
#load-if-defined DIFFICULTY-EASIEST
(defconst enable-patrol 0)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst enable-patrol 0)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst enable-patrol 0)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst enable-patrol 1)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst enable-patrol 1)
#end-if

(defrule
	(true)
=>
	(set-strategic-number sn-maximum-town-size 8)
	(set-strategic-number sn-task-ungrouped-soldiers 0); spread military 0=no,1=yes
	(set-strategic-number sn-total-number-explorers 10);start with all civilians as explorer and turn them off when sheeps or berries are found
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-minimum-civilian-explorers 12)
	(set-strategic-number sn-number-explore-groups 1);explore with scouts
	(set-difficulty-parameter ability-to-dodge-missiles 0);0=dodge,100=stay
	(set-strategic-number sn-percent-enemy-sighted-response 100);fight with all men
	(set-strategic-number sn-group-commander-selection-method 0)
	(set-strategic-number sn-ignore-attack-group-under-attack 0)
	(set-strategic-number sn-attack-group-size-randomness 0)
	(set-strategic-number sn-scale-minimum-attack-group-size 0)
	(set-strategic-number sn-scale-maximum-attack-group-size 0)
	(set-strategic-number sn-group-leader-defense-distance 3); increases chance to make a few big groups instead of many medium sized ones
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-intelligent-gathering 1);drop resources when switched to another type
	(set-strategic-number sn-retask-gather-amount 0);minimum amount to collect before allowed to switch	
	(set-strategic-number sn-camp-max-distance camp-distance);small distances at the start
	(set-strategic-number sn-mill-max-distance mill-distance)
	(set-strategic-number sn-cap-civilian-builders 100); maximum villagers that can be tasked as builder
	(set-strategic-number sn-cap-civilian-explorers 100); maximum villagers that can be tasked as explorer
	(set-strategic-number sn-maximum-hunt-drop-distance hunt-distance);Dont walk all over the map for resources 
	(set-strategic-number sn-maximum-food-drop-distance food-distance)
	(set-strategic-number sn-maximum-wood-drop-distance wood-distance)
	(set-strategic-number sn-maximum-stone-drop-distance 0)
	(set-strategic-number sn-maximum-gold-drop-distance 0)
	(set-strategic-number sn-blot-exploration-map 0);1=rexplore
	(set-strategic-number sn-blot-size blot-size);15=default, 0 scouts w/ high LOS, 1 rest
	(set-strategic-number sn-sentry-distance-variation 0)
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-group-form-distance 20)
	(set-strategic-number sn-consecutive-idle-unit-limit 0)
	(set-strategic-number sn-percent-attack-soldiers 100);attack with all men
	(set-strategic-number sn-attack-winning-player 1);attack player with most points
	(set-strategic-number sn-attack-winning-player-factor 10000)
	(set-strategic-number sn-attack-intelligence 1);doesn't really avoid TC/castle fire, but better than nothing
	(set-strategic-number sn-build-frequency 1);try to build somewhere else when interrupted, sometimes it helps when AI trys to build next to enemy
	(set-strategic-number sn-number-build-attempts-before-skip 5)
	(set-strategic-number sn-max-skips-per-attempt 5)
	(set-strategic-number sn-coop-share-attacking 1); usually helps ally too late, but better than nothing
	(set-strategic-number sn-coop-share-information 1); gives information to an AI ally
	(set-strategic-number sn-garrison-rams 0); load infantry in rams
	(set-strategic-number sn-current-age dark); initilisation dark-age
	(set-strategic-number sn-minimum-water-body-size-for-dock 999); don't build docks in small puddles
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-target-evaluation-in-progress 0)
	(set-strategic-number sn-target-evaluation-boat 0)
	(set-strategic-number sn-target-evaluation-rof 0)
	(set-strategic-number sn-target-evaluation-continent 0)
	(set-strategic-number sn-target-evaluation-siege-weapon 500);high value => siege vs buildings, soldier vs soldier
	(set-strategic-number sn-target-evaluation-distance evaluation-distance)
	(set-strategic-number sn-target-evaluation-time-kill-ratio 0)
	(set-strategic-number sn-target-evaluation-hitpoints evaluation-hitpoints)
	(set-strategic-number sn-target-evaluation-damage-capability 1)
	(set-strategic-number sn-target-evaluation-kills 0)
	(set-strategic-number sn-target-evaluation-randomness 0)
	(set-strategic-number sn-target-evaluation-attack-attempts 0)
	(set-strategic-number sn-target-evaluation-range -100)
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-special-attack-type2 special-attack-type2)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-zero-priority-distance 200)
	(set-strategic-number sn-attack-group-gather-spacing 5)
	(set-strategic-number sn-do-not-scale-for-difficulty-level 1)
	(set-strategic-number sn-initial-exploration-required 0); set this to 0 to build immediately
	(set-strategic-number sn-ignore-tower-elevation 1)
	(set-goal escrow-purpose-goal 0)
	(generate-random-number 100)
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-forage-defend-priority 1)
	(set-strategic-number sn-gold-defend-priority 1)
	(set-strategic-number sn-stone-defend-priority 1)
	(set-strategic-number sn-livestock-defend-priority 1)
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(disable-self)
)
(defrule
	(true)
=>
	(set-goal control-goal 0); secondary unit
	(set-goal enemy-goal 0); enemy strategy unkonwn
	(set-goal increase-town-size-goal 0); disable TS increase
	(set-goal strategy-goal default-strategy)
	(set-goal unit-goal default-unit)
	(set-goal ranged-unit-type-goal default-ranged)
	(set-goal under-attack-goal 0); not under attack
	(set-goal spread-military-goal 0)
	(enable-timer civ-explore-timer 150)
	(enable-timer attack-timer 1)
	(enable-timer spread-military-timer 220)
	(enable-timer tribute-timer 1)
	(enable-timer one-minute-timer 60)
	(disable-self)
)

(defrule
	(true)
=>
	(up-set-defense-priority c: house c: 1)
	(up-set-defense-priority c: watch-tower c: 500); default = 2000, 500 = standard military buildings
	(up-set-defense-priority c: guard-tower c: 500)
	(up-set-defense-priority c: keep c: 500)
	(up-set-defense-priority c: bombard-tower c: 500)
	(up-set-defense-priority c: 109 c: 400); TC standing
	(up-set-defense-priority c: market c: 700)
	(up-set-defense-priority c: monastery c: 550)
	(up-set-defense-priority c: mining-camp c: 750)
	(up-set-defense-priority c: lumber-camp c: 750)
	(disable-self)
)
(defrule
	(true)
=>
	(up-set-offense-priority c: buildings c: -1)
	(up-set-offense-priority c: 949 c: -1); farms
	(up-set-offense-priority c: 902 c: 0); trade carts
	(up-set-offense-priority c: 951 c: 11)
	(up-set-offense-priority c: 954 c: 11)
	(chat-to-all "The Horde Artificial Intelligence Script 3.1")
	(disable-self)
)
(defrule
	(or
		(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
		(not (player-in-game any-ally))
	)
	(nand
		(starting-age == post-imperial-age)
		(death-match-game)
	)
	(game-time > 60)
=>
	(set-strategic-number sn-dock-proximity-factor -1000)
	(set-strategic-number sn-dock-placement-mode dock-placement)
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-percent-building-cancellation 25)
	(set-strategic-number sn-wall-targeting-mode 1)
	(set-strategic-number sn-enable-new-building-system 1)
	(set-strategic-number sn-home-exploration-time home-exploration-time)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-town-center-placement town-center-placement)
	(set-strategic-number sn-enable-boar-hunting 2)
	(set-strategic-number sn-minimum-boar-lure-group-size 200); block boar hunting
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-livestock-to-town-center 1)
	(set-strategic-number sn-enable-offensive-priority 1)
	(set-strategic-number sn-disable-builder-assistance 1)
	(set-strategic-number sn-number-civilian-militia 0)
	(set-strategic-number sn-enable-patrol-attack enable-patrol)
	(disable-self)
)
(defrule
	(true)
=>
	(enable-timer villager-timer 1)
	(enable-timer navy-attack-timer 1)
	(enable-timer retreat-timer 1)
	(enable-timer micro-timer 1)
	(enable-timer garrison-timer 1)
	(enable-timer disable-defend-groups-timer 1)
	(set-goal is-zero-goal 0)
	(set-goal is-one-goal 1)
	(set-goal raid-goal 0)
	(disable-self)
)
(defrule
	(true); clear these goals/SNs each rule pass
=>
	(set-strategic-number sn-military-level 0)
	(set-strategic-number sn-archer-threat 0)
	(set-strategic-number sn-infantry-threat 0)
	(set-strategic-number sn-cavalry-threat 0)
	(set-goal anti-cavalry-threat-goal 0)
	(set-goal anti-monk-threat-goal 0)
	(set-goal monk-threat-goal 0)
	(set-goal enemy-sighted-goal 0)
	(set-goal attack-goal 0)
	(set-goal farm-goal 0)
	(set-goal housing-goal 0)
	(set-goal enemy-boats-goal 0)
	(set-goal hostilities-goal 0)
	(set-goal save-wood-goal 0)
	(set-goal math-goal 0)
)
(defrule
	(true)
=>
	(up-get-point position-self position-self-goal)
	(set-goal split-rule-goal 0)
	(set-goal tribute-goal 0)
	(set-goal threat-source-goal 0)
	(set-goal threat-target-goal 0)
	(set-goal team-coordination-goal 0)
	(set-goal forward-goal -1)
	(set-strategic-number sn-enable-training-queue 1)
	(up-get-threat-data threat-time-goal threat-player-goal threat-source-goal threat-target-goal)
	(up-find-player enemy find-attacker attacking-enemy-goal)
)
(defrule
	(players-building-count any-enemy > 0)
=>
	(up-find-player enemy find-closest closest-enemy-goal)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
)
(defrule
	(strategic-number sn-disable-defend-groups == 1)
	(timer-triggered disable-defend-groups-timer)
=>
	(set-strategic-number sn-disable-defend-groups 0)
)
(defrule
	(strategic-number sn-allow-adjacent-dropsites != 0)
	(nor
		(up-pending-placement c: 621)
		(up-pending-placement c: lumber-camp)
	)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
)
(defrule
	(or
		(game-time < 1200); don't block early villagers in DM
		(nor
			(and
				(goal train-civ-goal -1)
				(population >= max-civ-pop)
			)
			(goal train-civ-goal 2)
		)
	)	
=>
	(set-goal train-civ-goal 1)
)
(defrule
	(game-time > 1800)
	(or
		(or
			(dropsite-min-distance wood == -1); wood gone
			(dropsite-min-distance wood == 255); or remaining wood is on other islands
		)
		(and
			(unit-type-count-total villager > thirty-percent-pop)
			(game-type == 8)
		)
	)
=>
	(set-goal train-civ-goal -1)
)
(defrule
	(current-age == imperial-age)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(or
		(and
			(unit-type-count villager > twenty-five-percent-pop)
			(game-time > 2700)
		)
		(and
			(and
				(players-unit-type-count every-enemy galley-line < 15)
				(players-unit-type-count every-enemy fire-ship-line < 15)
			)
			(warboat-count > 25)
		)
	)
=>
	(set-goal train-civ-goal -1)
)
(defrule
	(current-age == imperial-age)
	(strategic-number sn-resource-control < 1)
	(up-compare-goal escrow-purpose-goal != ri-halberdier)
	(civilian-population >= max-civ); more than enough civ, usually achieved by adding trade carts
	(or
		(gold-amount > 800); and enough of all resources
		(and
			(civilian-population > sixty-percent-pop)
			(unit-type-count trade-cart > 0)
		)
	)
	(wood-amount > 800)
	(food-amount > 800)
	(population > del-civ-pop)
	(population-cap <= 250)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
	(chat-to-player my-player-number "delete excess villager")
)
#load-if-defined DEFEND-WONDER
(defrule
	(unit-type-count-total villager > fourty-percent-pop)
=>
	(set-goal train-civ-goal -1)
)
#end-if
; Force drop food
; The force drop code is inspired by scripter's Chameleon aiscript
(defrule
	(or
		(or
			(and
				(unit-type-count villager < villager-feudal)
				(food-amount >= 50)
			)
			(and
				(food-amount >= 500)
				(strategic-number sn-current-age == dark)
			)
		)
		(strategic-number sn-current-age >= fc-transit)
	)	
=>
	(set-goal micro-goal -1); disable forced food drop code this pass
)
(defrule
	(current-age == dark-age)
	(food-amount < 50)
	(up-pending-objects c: villager == 1); villager is still queuing; this rule triggers at the start of the villager training rule
	(timer-triggered villager-timer)
	(goal micro-goal -1)
=>
	(enable-timer villager-timer 20); wait 20s
	(set-goal micro-goal 0)
)
(defrule
	(or
		(unit-type-count villager < 17); don't ruin late eco, with constant forced drops on every villager
		(dropsite-min-distance boar-hunting < 5); indicates we hunt boar, allow to force drop them
	)
	(food-amount < 50)
	(up-pending-objects c: villager < 2)
	(timer-triggered villager-timer)
	(goal micro-goal 0)
=>
	(set-goal math-goal 50)
	(up-get-fact food-amount 0 math-goal2)
	(up-modify-goal math-goal g:- math-goal2)
	(up-get-fact unit-type-count food-gatherer math-goal2)
	(up-modify-goal math-goal g:/ math-goal2)
	(up-modify-goal math-goal c:+ 1); add +1 because the result is integer
	(up-drop-resources food g: math-goal)
)
(defrule
	(current-age == dark-age)
	(unit-type-count villager >= 17)
	(food-amount < 50)
	(timer-triggered villager-timer)
	(goal micro-goal 0)
=>
	(up-drop-resources food c: 12); late dark age drop only hunter food
)
(defrule
	(research-available feudal-age)
	(up-pending-objects c: villager == 0)
	(unit-type-count food-gatherer > 0); make sure we can devide by the number of food gatherers
	(unit-type-count-total villager > 24)
	(goal train-civ-goal -1); villager training stopped, prepare to rise
	(food-amount < 500)
=>
	(set-goal math-goal 500)
	(up-get-fact food-amount 0 math-goal2)
	(up-modify-goal math-goal g:- math-goal2)
	(up-get-fact unit-type-count food-gatherer math-goal2)
	(up-modify-goal math-goal g:/ math-goal2)
	(up-modify-goal math-goal c:+ 1); add +1 because the result is integer
	(up-drop-resources food g: math-goal)
	(up-chat-data-to-self "Force drop food >= %d to advance to feudal age" g: math-goal)
)
(defrule
	(research-available castle-age)
	(food-amount >= 600)
	(gold-amount >= 160)
	(food-amount < 800)
	(can-train villager); TC is not occupied
	(unit-type-count food-gatherer > 0); make sure we can devide by the number of gold gatherers
=>
	(set-goal math-goal 800)
	(up-get-fact food-amount 0 math-goal2)
	(up-modify-goal math-goal g:- math-goal2)
	(up-get-fact unit-type-count food-gatherer math-goal2)
	(up-modify-goal math-goal g:/ math-goal2)
	(up-modify-goal math-goal c:+ 1); add +1 because the result is integer
	(up-drop-resources food g: math-goal)
	(up-chat-data-to-self "Force drop food >= %d to advance to castle age" g: math-goal)
)
(defrule
	(research-available castle-age)
	(food-amount >= 720)
	(gold-amount >= 160)
	(gold-amount < 200)
	(can-train villager); TC is not occupied
=>
	(set-goal math-goal 200)
	(up-get-fact gold-amount 0 math-goal2)
	(up-modify-goal math-goal g:- math-goal2)
	(up-get-fact unit-type-count 981 math-goal2)
	(up-modify-goal math-goal g:/ math-goal2)
	(up-modify-goal math-goal c:+ 1); add +1 because the result is integer
	(up-drop-resources gold g: math-goal)
	(up-chat-data-to-self "Force drop gold >= %d to advance to castle age" g: math-goal)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-defined DEATH-MATCH
(defrule
	(game-time < 1200)
=>
	(up-jump-rule 9)
)
#end-if
#load-if-not-defined WONDER-RACE; no enemies trigger weird stuff
(defrule
	(strategic-number sn-maximum-hunt-drop-distance > 0)
	(or
		(players-military-population any-enemy > 5); don't disable when hunter died to wolfes/boar
		(goal forward-threat-goal 1)
	)
	(or
		(unit-type-count 217 > 0); dead hunter
		(unit-type-count 227 > 0)
	)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-minimum-number-hunters 0)
	(up-jump-rule 11)
)
#end-if
(defrule
	(research-available ri-loom)
	(or
		(dropsite-min-distance boar-hunting < 30)
		(dropsite-min-distance deer-hunting < 32)
	)
	(up-object-type-count-total c: villager-food > 7)
	(or
		(building-type-count-total mill == 0)
		(up-object-type-count-total c: villager > 10)
	)
=>
	(set-goal need-loom-goal 1)
)
(defrule
	(research-completed ri-loom)
	(up-object-type-count-total c: villager > 10)
	(dropsite-min-distance boar-hunting < 30)
	(up-compare-goal hunting-goal < 1)
	(unit-type-count-total villager-hunter == 0)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 32)
	(set-strategic-number sn-minimum-number-hunters 1)
	(up-retask-gatherers food c: 1)
	(set-strategic-number sn-minimum-boar-lure-group-size 0); the next two SN may block hunting if they're above zero
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-enable-boar-hunting 2); boar hunting
	(set-goal hunting-goal 1)
	(enable-timer hunting-timer 10)
)
(defrule
	(research-completed ri-loom)
	(unit-type-count villager > 7)
	(or
		(building-type-count-total mill == 0)
		(unit-type-count villager-forager == 0)
	)
	(dropsite-min-distance boar-hunting < 30)
	(up-compare-goal hunting-goal < 1)
	(unit-type-count-total villager-hunter == 0)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 32)
	(set-strategic-number sn-minimum-number-hunters 1)
	(up-retask-gatherers food c: 1)
	(set-strategic-number sn-minimum-boar-lure-group-size 0); the next two SN may block hunting if they're above zero
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-enable-boar-hunting 2); boar hunting
	(set-goal hunting-goal 1)
	(enable-timer hunting-timer 10)
)
(defrule
	(timer-triggered hunting-timer)
	(or
		(goal hunting-goal 1)
		(dropsite-min-distance live-boar < 6); assistance for the 2nd boar
	)
	(unit-type-count villager-hunter > 0)
	(unit-type-count villager-hunter < 8)
	(dropsite-min-distance live-boar < 5)
=>
	(set-goal hunting-goal 2)
	(up-request-hunters c: 7)
	(set-strategic-number sn-minimum-boar-hunt-group-size 8); number of villagers to kill the boar
	(set-strategic-number sn-minimum-number-hunters 8); number of hunters to harvest the boar
	(set-strategic-number sn-minimum-boar-lure-group-size 1000); AI won't lure a boar if they can't match this SN. So it's effectively blocked
	(enable-timer hunting-timer 15)
)
(defrule
	(goal hunting-goal 2); hunt a second boar while still eating the first
	(up-remaining-boar-amount < 220)
	(or
		(dropsite-min-distance live-boar > 18)
		(up-remaining-boar-amount < 170)
	)
	(dropsite-min-distance live-boar < 30)
=>
	(up-retask-gatherers food c: 2)
	(set-strategic-number sn-minimum-number-hunters 10); 10 hunters = lure 2nd boar
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-minimum-boar-lure-group-size 1)
	(set-goal hunting-goal 3)
	(enable-timer hunting-timer 5)
	(chat-local-to-self "trying to lure second boar")
)
(defrule
	(timer-triggered hunting-timer)
	(goal hunting-goal 3)
	(up-remaining-boar-amount == 65535); first boar finished
	(dropsite-min-distance live-boar < 30)
	(dropsite-min-distance live-boar > 5)
=>
	(set-strategic-number sn-minimum-number-hunters 1)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-minimum-boar-lure-group-size 1)
	(set-goal hunting-goal 1)
	(enable-timer hunting-timer 10)
	(chat-local-to-self "release hunters: min hunter = 1")
)
(defrule
	(timer-triggered hunting-timer)
	(goal hunting-goal 3)
	(up-remaining-boar-amount < 50)
	(dropsite-min-distance live-boar > 30)
=>
	(set-strategic-number sn-minimum-number-hunters 0)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-minimum-boar-lure-group-size 1000); block again
	(set-goal hunting-goal 4)
	(chat-local-to-self "release hunters: min hunter = 0")
)
(defrule
	(unit-type-count villager-food > 7); or on island we won't get any assistance if everyone is chopping wood
	(dropsite-min-distance boar-hunting < 32)
	(up-compare-goal hunting-goal >= 4)
	(unit-type-count villager-hunter == 0)
=>
	(up-retask-gatherers food c: 1)
	(set-strategic-number sn-minimum-number-hunters 1)
	(set-strategic-number sn-enable-boar-hunting 2)
	(set-strategic-number sn-minimum-boar-lure-group-size 0)
	(set-goal hunting-goal 1)
	(enable-timer hunting-timer 15)
	(chat-local-to-self "hunting another boar")
)
#end-if
#end-if
#end-if
(defrule
	(research-completed ri-loom)
	(unit-type-count villager >= 12)
	(or
		(unit-type-count villager >= 22)
		(and
			(cc-players-unit-type-count 0 48 == 0); no boar on map
			(cc-players-unit-type-count 0 822 == 0)
		)
	)
	(up-compare-goal hunting-goal < 5)
	(or
		(dropsite-min-distance boar-hunting >= 32); either boar missed or already eaten - enable deer hunting
		(difficulty > hard)
	)
=>
	(set-strategic-number sn-enable-boar-hunting 1)
	(set-strategic-number sn-minimum-number-hunters 0)
	(set-goal hunting-goal 5)
)
(defrule
	(current-age == dark-age)
	(unit-type-count villager >= 22)
	(goal hunting-goal 5)
	(dropsite-min-distance deer-hunting < 30)
	(dropsite-min-distance boar-hunting >= 32)
	(unit-type-count villager-forager > 4)
	(strategic-number sn-enable-boar-hunting == 1)
	(strategic-number sn-minimum-number-hunters < 5)
=>
	(up-retask-gatherers 907 c: 1)
	(up-modify-sn sn-minimum-number-hunters c:+ 1);forced hunting: retask one forager
)
#load-if-defined SCANDANAVIA-MAP
(defrule
	(research-completed ri-loom)
	(unit-type-count villager > 16); start hunting boar in scandinavia later, but without check for existing hunters.
	(dropsite-min-distance boar-hunting < 32)
	(up-compare-goal hunting-goal < 1)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 32)
	(set-strategic-number sn-minimum-number-hunters 1)
	(up-retask-gatherers food c: 1)
	(set-strategic-number sn-minimum-boar-lure-group-size 0)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
	(set-strategic-number sn-enable-boar-hunting 2)
	(set-goal hunting-goal 1)
	(enable-timer hunting-timer 10)
	(disable-self)
)
(defrule	
	(research-completed ri-loom)
	(unit-type-count villager < 12)
	(building-type-count-total mill > 0)
	(dropsite-min-distance deer-hunting < 31)
=>
	(set-strategic-number sn-minimum-number-hunters 3)
	(set-strategic-number sn-maximum-hunt-drop-distance 16)
	(set-strategic-number sn-enable-boar-hunting 0)
	(chat-local-to-self "Early forced hunting in scandinavia")
	(disable-self)
)
#else
(defrule
	(research-completed ri-loom)
	(sheep-and-forage-too-far)
	(dropsite-min-distance boar-hunting > 32)
	(dropsite-min-distance deer-hunting < 15)
	(strategic-number sn-mill-max-distance > 30)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 32)
	(set-strategic-number sn-enable-boar-hunting 1)
	(set-strategic-number sn-minimum-number-hunters 0)
)
#end-if
(defrule
	(strategic-number sn-resource-control != 3)
	(nand
		(strategic-number sn-current-age == feudal)
		(and
			(strategic-number sn-resource-control == 2)
			(goal under-attack-goal 0)
		)
	)
=>
	(set-strategic-number sn-resource-control 0)
)
#load-if-defined WONDER-RACE
(defrule
	(true)
=>
	(set-goal strategy-goal fast-imp);overwrite all other settings
	(set-goal unit-goal wonder)
	(set-goal control-goal wonder)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total university < 1)
	(current-age == castle-age)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal university)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
=>
	(enable-timer 6 60)(disable-self)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(timer-triggered 6)
	(food-amount < 300); ri-stonecutting
	(can-buy-commodity food)
	(research-available ri-stonecutting)
=>
	(buy-commodity food)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(not (research-available ri-stonecutting))
=>
	(sell-commodity food)
	(delete-building farm)
	(enable-timer lumber-timer 1200)
)
(defrule
	(current-age == imperial-age)
	(wood-amount > 1100)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
)
(defrule
	(current-age == imperial-age)
	(wood-amount < 1000)
	(gold-amount > 1150)
	(commodity-buying-price wood <= 150)
=>
	(buy-commodity wood)
)
(defrule
	(current-age == imperial-age)
	(stone-amount < 1000)
	(gold-amount > 1174)
	(commodity-buying-price stone <= 175)
=>
	(buy-commodity stone)
)
(defrule
	(can-build wonder)
=>
	(build wonder)
)
(defrule
	(building-type-count-total wonder > 0)
=>
	(delete-building blacksmith)
	(delete-building market)
	(delete-building university)
	(delete-building monastery)
	(delete-building town-center)
	(set-goal increase-town-size-goal 2); block build system
)
#else
;******************** NAVY INITIALISATION ********************

(defrule
	(or
		(goal enemy-boats-goal 1)
		(players-building-type-count any-enemy dock > 0)
	)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(building-type-count-total blacksmith > 0)
=>
	(enable-wall-placement 2)
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-number-boat-explore-groups 0)
	(chat-to-player my-player-number "enemy boats sighted... pretend this map has water")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(taunt-detected any-human 34)
=>
	(acknowledge-taunt this-any-human 34)
	(enable-wall-placement 2)
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-number-boat-explore-groups 0)
)
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined OASIS-MAP
#load-if-not-defined SALT-MARSH-MAP
(defrule
	(or
		(cc-players-unit-type-count 0 sea-fish >= min-fishing)
		(cc-players-unit-type-count 0 shore-fish >= min-fishing)
	)
	(building-type-count town-center > 0); cp can't build docks on nomad either
=>
	(enable-wall-placement 2)
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-number-boat-explore-groups 0)
	(chat-to-player my-player-number "some fish found on map")
	(disable-self))
#else
(defrule
	(true)
=>
	(enable-wall-placement 2)
	(set-strategic-number sn-maximum-fish-boat-drop-distance 14)
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-number-boat-explore-groups 0)
	(chat-to-player my-player-number "some fish found on map")
	(disable-self))
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(wall-completed-percentage 2 == 100)
	(players-building-type-count my-player-number stone-wall < 15); this will be only true on islands
	(players-building-type-count my-player-number palisade-wall < 15)
=>
	(set-strategic-number sn-garrison-rams 0); don't load rams or the computer messes up with transports
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
	(set-strategic-number sn-group-form-distance 30); big distances to load transport ships
	(set-goal strategy-goal rush)
	(chat-to-player my-player-number "water map detected!")
)
(defrule	
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(building-type-count lumber-camp > 0)
	(building-type-count mill > 0)
	(building-type-count-total dock == 0)
	(wood-amount > 210)
	(game-time > 300)
	(up-pending-placement c: dock)
=>
	(up-reset-placement c: dock)
	(set-strategic-number sn-minimum-water-body-size-for-dock 999)
	(chat-to-player my-player-number "dock placement failed, assume land map")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(building-type-count lumber-camp > 0)
	(building-type-count mill > 0)
	(building-type-count-total dock == 0)
	(wood-amount > 210)
	(game-time > 300)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock 999)
	(chat-to-player my-player-number "dock placement failed, assume land map")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(or
		(goal unit-goal skirmisher)
		(goal unit-goal archer)
	)
	(up-compare-goal strategy-goal != flush)
	(current-age < castle-age)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(or
		(goal unit-goal my-unique-unit-line)
		(or
			(goal unit-goal skirmisher)
			(goal unit-goal archer)
		)
	)
	(current-age < castle-age)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal militiaman-line)
)
(defrule
	(or
		(players-unit-type-count any-enemy longboat-line > 0)
		(or
			(players-unit-type-count any-enemy galley-line > 0)
			(players-unit-type-count any-enemy fire-ship-line > 0)
		)
	)
=>
	(set-goal enemy-boats-goal 1)
)

(defrule
	(building-type-count dock > 0)
	(or
		(players-building-type-count any-enemy dock > 0)
		(players-unit-type-count any-enemy fishing-ship > 0)
	)
=>
	(set-goal enemy-boats-goal 1)
)
#load-if-not-defined UP-ALLY-IN-GAME
#load-if-not-defined UP-2-PLAYER-GAME
(defrule
	(game-time > 13)
=>
	(set-goal nr-map-goal 1)
	(set-goal ffa-game-goal 1)
	(disable-self)
)
#end-if
#end-if

;******************** MILITARY SUPERIORITY CODE ********************

(defrule
	(true)
=>
	(up-get-fact military-population 0 math-goal3)
	(up-get-fact-max any-enemy military-population 0 math-goal2)
	(up-modify-goal math-goal g:= math-goal3)
	(up-modify-goal math-goal g:- math-goal2)
)
(defrule
	(up-compare-goal math-goal > 5)
	(or
		(unit-type-count war-wagon-line > 12)
		(unit-type-count cavalry-units > 12)
	)
=>
	(set-strategic-number sn-military-level 1)
	(up-modify-goal math-goal3 c:* 10)
	(up-modify-goal math-goal2 c:* 13)
	(up-jump-rule 1)
)
(defrule
	(up-compare-goal math-goal > 5)
=>
	(set-strategic-number sn-military-level 1)
	(up-modify-goal math-goal3 c:* 10)
	(up-modify-goal math-goal2 c:* 15)
)
(defrule
	(military-population > 8)
	(up-compare-goal math-goal > 5)
	(up-compare-goal math-goal3 g:> math-goal2)
=>
	(set-strategic-number sn-military-level 2)
	(up-modify-goal math-goal3 c:/ 10)
	(up-modify-goal math-goal2 c:/ 7)
)
(defrule
	(military-population > 12)
	(up-compare-goal math-goal > 5)
	(up-compare-goal math-goal3 g:> math-goal2)
=>
	(set-strategic-number sn-military-level 3)
)
(defrule
	(up-compare-goal math-goal < -3)
	(military-population < 10)
=>
	(set-strategic-number sn-military-level -1)
)
(defrule
	(up-compare-goal math-goal < -5)
=>
	(up-modify-goal math-goal3 c:* 6)
	(up-modify-goal math-goal2 c:* 5)
)
(defrule
	(up-compare-goal math-goal < -5)
	(up-compare-goal math-goal3 g:< math-goal2)
=>
	(set-strategic-number sn-military-level -1)
	(up-modify-goal math-goal3 c:* 6)
	(up-modify-goal math-goal2 c:* 5)
)
(defrule
	(up-compare-goal math-goal < -5)
	(up-compare-goal math-goal3 g:< math-goal2)
	(strategic-number sn-military-level < 0)
=>
	(set-strategic-number sn-military-level -2)
	(up-modify-goal math-goal3 c:* 6)
	(up-modify-goal math-goal2 c:* 5)
)
(defrule
	(up-compare-goal math-goal < -5)
	(up-compare-goal math-goal3 g:< math-goal2)
	(strategic-number sn-military-level < -1)
=>
	(set-strategic-number sn-military-level -3)
)
(defrule
	(players-building-type-count any-enemy watch-tower > 3)
	(up-projectile-detected projectile-fortification c:< 5000)
	(goal forward-threat-goal 1)
	(goal strategy-goal flush)
	(current-age == feudal-age)
=>
	(set-strategic-number sn-resource-control 2)
	(up-gather-inside c: archery-range c: 1)
)
(defrule
	(strategic-number sn-infantry-threat < 1)
	(or 
		(or
			(or
				(players-unit-type-count any-enemy militiaman-line > 6)
				(players-unit-type-count any-enemy eagle-warrior-line > 6)
			)
			(or
				(players-unit-type-count any-enemy teutonic-knight-line > 4)
				(players-unit-type-count any-enemy berserk-line > 4)
			)
		)
		(or
			(or
				(players-unit-type-count any-enemy samurai-line > 4)
				(players-unit-type-count any-enemy woad-raider-line > 4)
			)
			(players-unit-type-count any-enemy jaguar-man-line > 4)
		)
	)
=>
	(set-strategic-number sn-infantry-threat 1)
)
(defrule
	(strategic-number sn-infantry-threat < 1)
	(or
		(players-unit-type-count any-enemy huskarl-line > 6)
		(players-unit-type-count any-enemy throwing-axeman-line > 6)
	)
=>
	(set-strategic-number sn-infantry-threat 1)
)
(defrule
	(strategic-number sn-infantry-threat < 2)
	(or 
		(or
			(or
				(players-unit-type-count any-enemy militiaman-line > 12)
				(players-unit-type-count any-enemy eagle-warrior-line > 12)
			)
			(or
				(players-unit-type-count any-enemy teutonic-knight-line > 10)
				(players-unit-type-count any-enemy berserk-line > 10)
			)
		)
		(or
			(or
				(players-unit-type-count any-enemy samurai-line > 10)
				(players-unit-type-count any-enemy woad-raider-line > 10)
			)
			(players-unit-type-count any-enemy jaguar-man-line > 12)
		)
	)
=>
	(set-strategic-number sn-infantry-threat 2)
)
(defrule
	(strategic-number sn-infantry-threat < 2)
	(or 
		(or
			(and
				(players-unit-type-count any-enemy spearman-line > 18)
				(unit-type-count cavalry-units > 20)
			)
			(players-unit-type-count any-enemy huskarl-line > 12)
		)
		(players-unit-type-count any-enemy throwing-axeman-line > 12)
	)
=>
	(set-strategic-number sn-infantry-threat 2)
)
(defrule
	(strategic-number sn-infantry-threat < 2)
	(or 
		(or
			(or
				(players-unit-type-count any-enemy militiaman-line > 20)
				(players-unit-type-count any-enemy eagle-warrior-line > 20)
			)
			(or
				(players-unit-type-count any-enemy teutonic-knight-line > 15)
				(players-unit-type-count any-enemy berserk-line > 15)
			)
		)
		(or
			(or
				(players-unit-type-count any-enemy samurai-line > 15)
				(players-unit-type-count any-enemy woad-raider-line > 15)
			)
			(players-unit-type-count any-enemy jaguar-man-line > 15)
		)
	)
=>
	(set-strategic-number sn-infantry-threat 3)
)
(defrule
	(strategic-number sn-infantry-threat < 3)
	(or 
		(or
			(and
				(players-unit-type-count any-enemy spearman-line > 25)
				(unit-type-count cavalry-units > 20)
			)
			(players-unit-type-count any-enemy huskarl-line > 16)
		)
		(players-unit-type-count any-enemy throwing-axeman-line > 15)
	)
=>
	(set-strategic-number sn-infantry-threat 3)
)
(defrule
	(strategic-number sn-infantry-threat < 3)
	(or 
		(or
			(or
				(players-unit-type-count any-enemy militiaman-line > 36)
				(players-unit-type-count any-enemy eagle-warrior-line > 36)
			)
			(or
				(players-unit-type-count any-enemy teutonic-knight-line > 24)
				(players-unit-type-count any-enemy berserk-line > 24)
			)
		)
		(or
			(or
				(players-unit-type-count any-enemy samurai-line > 24)
				(players-unit-type-count any-enemy woad-raider-line > 24)
			)
			(players-unit-type-count any-enemy jaguar-man-line > 24)
		)
	)
=>
	(set-strategic-number sn-infantry-threat 4)
)
(defrule
	(strategic-number sn-infantry-threat < 4)
	(or 
		(or
			(and
				(players-unit-type-count any-enemy spearman-line > 46)
				(unit-type-count cavalry-units > 20)
			)
			(players-unit-type-count any-enemy huskarl-line > 24)
		)
		(players-unit-type-count any-enemy throwing-axeman-line > 24)
	)
=>
	(set-strategic-number sn-infantry-threat 4)
)
(defrule
	(game-time < 1500)
	(players-building-type-count focus-player castle > 0); early enemy castle and ranged uu civ
	(or
		(or
			(players-civ focus-player briton)
			(players-civ focus-player chinese)
		)
		(or
			(or
				(players-civ focus-player mayan)
				(players-civ focus-player mongol)
			)
			(or
				(players-civ focus-player spanish)
				(players-civ focus-player turkish)
			)
		)
	)
=>
	(set-strategic-number sn-archer-threat 1)
)
(defrule
	(or
		(players-unit-type-count any-enemy hand-cannoneer > 6)
		(or
			(players-unit-type-count any-enemy conquistador-line > 4)
			(players-unit-type-count any-enemy janissary-line > 4)
		)
	)
=>
	(set-strategic-number sn-archer-threat 1)
)
(defrule
	(or 
		(or
			(players-unit-type-count any-enemy archer-line > 13)
			(or
				(players-unit-type-count any-enemy chu-ko-nu-line > 9)
				(players-unit-type-count any-enemy longbowman-line > 9)
			)
		)
		(or
			(or
				(players-unit-type-count any-enemy plumed-archer-line > 9)
				(players-unit-type-count any-enemy mangudai-line > 9)
			)
			(or
				(players-unit-type-count any-enemy cavalry-archer-line > 9)
				(players-unit-type-count any-enemy war-wagon-line > 9)
			)
		)
	)
=>
	(set-strategic-number sn-archer-threat 2)
)
(defrule
	(or
		(or
			(or
				(players-unit-type-count any-enemy elephant-archer > 9)
				(players-unit-type-count any-enemy genoese-crossbowman > 9)
			)
			(players-unit-type-count any-enemy hand-cannoneer > 13)
		)
		(or
			(players-unit-type-count any-enemy conquistador-line > 9)
			(players-unit-type-count any-enemy janissary-line > 9)
		)
	)
=>
	(set-strategic-number sn-archer-threat 2)
)
(defrule
	(or 
		(or
			(players-unit-type-count any-enemy archer-line > 25)
			(or
				(players-unit-type-count any-enemy chu-ko-nu-line > 20)
				(players-unit-type-count any-enemy longbowman-line > 20)
			)
		)
		(or
			(or
				(players-unit-type-count any-enemy plumed-archer-line > 20)
				(players-unit-type-count any-enemy mangudai-line > 20)
			)
			(or
				(players-unit-type-count any-enemy cavalry-archer-line > 20)
				(players-unit-type-count any-enemy war-wagon-line > 20)
			)
		)
	)
=>
	(set-strategic-number sn-archer-threat 3)
)
(defrule
	(or 
		(or
			(players-unit-type-count any-enemy genoese-crossbowman > 40)
			(or
				(players-unit-type-count any-enemy chu-ko-nu-line > 40)
				(players-unit-type-count any-enemy longbowman-line > 40)
			)
		)
		(or
			(or
				(players-unit-type-count any-enemy plumed-archer-line > 40)
				(players-unit-type-count any-enemy mangudai-line > 40)
			)
			(or
				(players-unit-type-count any-enemy cavalry-archer-line > 40)
				(players-unit-type-count any-enemy war-wagon-line > 40)
			)
		)
	)
=>
	(set-strategic-number sn-archer-threat 4)
)
(defrule
	(or
		(or
			(or
				(players-unit-type-count any-enemy magyar-huszar > 4)
				(players-unit-type-count any-enemy boyar > 4)
			)
			(or
				(or
					(players-unit-type-count any-enemy knight-line > 4)
					(players-unit-type-count any-enemy scout-cavalry-line > 4)
				)
				(or
					(players-unit-type-count any-enemy tarkan-line > 3)
					(players-unit-type-count any-enemy war-elephant-line > 2)
				)
			)
		)
		(or
			(players-unit-type-count any-enemy camel-line > 4)
			(players-unit-type-count any-enemy cataphract-line > 4)
		)
	)
=>
	(set-strategic-number sn-cavalry-threat 1)
)
(defrule
	(or
		(or
			(or
				(players-unit-type-count any-enemy magyar-huszar > 10)
				(players-unit-type-count any-enemy boyar > 10)
			)
			(or
				(or
					(players-unit-type-count any-enemy knight-line > 10)
					(players-unit-type-count any-enemy scout-cavalry-line > 10)
				)
				(or
					(players-unit-type-count any-enemy tarkan-line > 10)
					(players-unit-type-count any-enemy war-elephant-line > 6)
				)
			)
		)
		(or
			(players-unit-type-count any-enemy camel-line > 10)
			(players-unit-type-count any-enemy cataphract-line > 10)
		)
	)
=>
	(set-strategic-number sn-cavalry-threat 2)
)
(defrule
	(or
		(or
			(or
				(players-unit-type-count any-enemy magyar-huszar > 16)
				(players-unit-type-count any-enemy boyar > 16)
			)
			(or
				(or
					(players-unit-type-count any-enemy knight-line > 16)
					(players-unit-type-count any-enemy scout-cavalry-line > 16)
				)
				(or
					(players-unit-type-count any-enemy tarkan-line > 16)
					(players-unit-type-count any-enemy war-elephant-line > 10)
				)
			)
		)
		(or
			(players-unit-type-count any-enemy camel-line > 16)
			(players-unit-type-count any-enemy cataphract-line > 16)
		)
	)
=>
	(set-strategic-number sn-cavalry-threat 3)
)
(defrule
	(or
		(or
			(or
				(players-unit-type-count any-enemy magyar-huszar > 26)
				(players-unit-type-count any-enemy boyar > 22)
			)
			(or
				(or
					(players-unit-type-count any-enemy knight-line > 22)
					(players-unit-type-count any-enemy scout-cavalry-line > 26)
				)
				(or
					(players-unit-type-count any-enemy tarkan-line > 22)
					(players-unit-type-count any-enemy war-elephant-line > 15)
				)
			)
		)
		(or
			(players-unit-type-count any-enemy camel-line > 22)
			(players-unit-type-count any-enemy cataphract-line > 22)
		)
	)
=>
	(set-strategic-number sn-cavalry-threat 4)
)
(defrule
	(or
		(or
			(players-unit-type-count any-enemy camel-line > 9)
			(players-unit-type-count any-enemy spearman-line > 12)
		)
		(or
			(players-unit-type-count any-enemy mameluke-line > 9)
			(and
				(game-time < 1380)
				(players-unit-type-count any-enemy spearman-line > 6)
			)
		)
	)
=>
	(set-goal anti-cavalry-threat-goal 1)
)
(defrule
	(or
		(players-unit-type-count any-enemy scout-cavalry-line > 9)
		(or
			(players-unit-type-count any-enemy eagle-warrior-line > 9)
			(goal enemy-goal eagle-warrior)
		)
	)
=>
	(set-goal anti-monk-threat-goal 1)
)
(defrule
	(or
		(players-unit-type-count any-enemy monk > 5)
		(and
			(game-time < 1200)
			(players-building-type-count any-enemy monastery > 1)
		)
	)
	(or
		(game-time < 1500)
		(players-unit-type-count any-enemy monk > 11)
	)
	(or
		(game-time < 1800)
		(players-unit-type-count any-enemy monk > 18)
	)
=>
	(set-goal monk-threat-goal 1)
)
; Following rules help to make up for poor scouting.
(defrule
	(game-time > 900)
	(game-time < 1800)
	(strategic-number sn-cavalry-threat == 0)
	(or
		(players-unit-type-count focus-player knight-line > 0)
		(game-time < 1320)
	)
	(players-building-type-count focus-player stable > 0)

=>
	(set-strategic-number sn-cavalry-threat 1)
)
(defrule
	(strategic-number sn-cavalry-threat < 2)
	(game-time < 1800)
	(or
		(and
			(and
				(game-time < 1500)
				(players-unit-type-count focus-player knight-line > 3)
			)
			(or
				(players-unit-type-count focus-player knight-line > 5)
				(game-time < 1320)
			)
		)
		(players-building-type-count focus-player stable > 1)
	)
=>
	(set-strategic-number sn-cavalry-threat 2)
)
(defrule
	(game-time > 960)
	(game-time < 1040)
	(goal strategy-goal flush)
	(strategic-number sn-cavalry-threat == 0)
	(players-building-type-count every-enemy barracks < 2)
	(players-building-type-count every-enemy archery-range == 0)
	(players-military-population every-enemy < 2)
	(players-building-type-count every-enemy market == 0)
	(goal meso-enemy-goal -1)
=>
	(set-strategic-number sn-cavalry-threat 1)
)
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-cavalry-threat < 1)
	(current-age >= castle-age)
	(game-time < 480)
	(nor 
		(or
			(players-civ focus-player gothic)
			(players-civ focus-player korean)
		)
		(or
			(players-civ focus-player viking)
			(players-civ focus-player briton)
		)
	)
	(nor 
		(players-civ focus-player japanese)
		(goal meso-enemy-goal 1)
	)
=>
	(set-strategic-number sn-cavalry-threat 1)
)
#end-if
(defrule
	(strategic-number sn-archer-threat < 1)
	(players-current-age focus-player < imperial-age)
	(players-current-age-time focus-player < 600)
	(players-building-type-count focus-player archery-range > 1)
=>
	(set-strategic-number sn-archer-threat 1)
)
(defrule
	(up-compare-goal threat-time-goal < 2000)
	(up-compare-goal threat-target-goal != buildings)
	(up-compare-goal threat-target-goal != civilians)
	(up-compare-goal threat-target-goal != warships)
	(up-compare-goal threat-source-goal != warships)
=>
	(set-goal enemy-sighted-goal 1)
)
(defrule
	(unit-type-count fire-ship-line < 1)
	(unit-type-count ranged-units < 30)
	(unit-type-count war-wagon-line < 30)
	(unit-type-count scorpion-line < 20)
=>
	(set-difficulty-parameter ability-to-maintain-distance 0); hit and run
)
(defrule
	(or
		(goal unit-goal archer)
		(goal strategy-goal flush)
	)
	(up-research-status c: ri-ballistics < research-pending)
	(or
		(and
			(strategic-number sn-cavalry-threat >= 1)
			(strategic-number sn-infantry-threat == 0)
		)
		(players-unit-type-count any-enemy eagle-warrior-line > 10)
	)
=>
	(set-difficulty-parameter ability-to-maintain-distance 100); stay
)
(defrule
	(or
		(or
			(unit-type-count fire-ship-line > 0)
			(unit-type-count scorpion-line > 20)
		)
		(or
			(unit-type-count ranged-units > 50)
			(unit-type-count war-wagon-line > 50)
		)
	)
=>
	(set-difficulty-parameter ability-to-maintain-distance 100)
)
#end-if
#load-if-defined UP-MULTIPLE-ENEMIES
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-archer-threat > 1)
	(strategic-number sn-cavalry-threat > 1)
	(game-time < 1800)
	(up-compare-sn sn-focus-player-number g:== closest-enemy-goal)
	(players-unit-type-count focus-player archer-line > 15)
	(players-unit-type-count focus-player knight-line < 3)
=>
	(set-strategic-number sn-cavalry-threat 0); focus on one threat only
)
(defrule
	(strategic-number sn-archer-threat > 1)
	(strategic-number sn-cavalry-threat > 1)
	(game-time < 1800)
	(up-compare-sn sn-focus-player-number g:== closest-enemy-goal)
	(players-unit-type-count focus-player knight-line > 10)
	(players-unit-type-count focus-player archer-line < 3)
=>
	(set-strategic-number sn-archer-threat 0)
)
#end-if
#end-if


; Scouting
#load-if-not-defined DEATH-MATCH
(defrule
        (game-time > 1)
	(up-timer-status scouting-timer != timer-running)
        (game-time < home-exploration-time)
        (up-gaia-type-count c: sheep > 0)
=>
        (set-strategic-number sn-focus-player-number 0)
	(up-get-point position-self p1x-goal)
	(up-set-target-point p1x-goal)
        (up-reset-search 1 1 1 1)
        (up-filter-include -1 -1 -1 -1)
        (up-filter-exclude -1 -1 -1 -1)
        (up-filter-range -1 -1 -1 24)
)
(defrule
	(up-timer-status scouting-timer != timer-running)
        (game-time > 1)
        (game-time < home-exploration-time)
	(up-find-remote c: sheep c: 1)
=>
        (up-set-target-object search-remote c: 0)
	(up-find-local c: scout-unit c: 1)
        (up-get-point position-object p1x-goal)
        (up-target-point p1x-goal action-move -1 -1)
	(enable-timer scouting-timer 10)
)
#end-if
#load-if-not-defined WONDER-RACE
#load-if-not-defined DEATH-MATCH
#load-if-not-defined SCANDANAVIA-MAP
(defrule
	(strategic-number sn-minimum-civilian-explorers > 0)
	(timer-triggered civ-explore-timer)
	(game-time > 90)
	(strategic-number sn-maximum-wood-drop-distance == 0)
=>
	(set-strategic-number sn-maximum-wood-drop-distance -1)
	(chat-local-to-self "enable wood gathering")
)
(defrule
	(game-time > 90)
	(strategic-number sn-percent-civilian-explorers == 0)
	(building-type-count-total mill == 0)
	(unit-type-count villager < 11)
	(sheep-and-forage-too-far)
	(strategic-number sn-current-age == dark)
	(building-type-count town-center > 0)
=>
	(set-strategic-number sn-percent-civilian-builders 0)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-minimum-civilian-explorers 12)
	(set-strategic-number sn-maximum-food-drop-distance 32)
	(set-strategic-number sn-maximum-wood-drop-distance 0)
	(enable-timer civ-explore-timer 20)
	(chat-local-to-self "civ explore again")
	(disable-self)
)
#end-if
(defrule
	(or
		(players-building-type-count every-enemy dock == 0)
		(and
			(warboat-count > 7)
			(players-building-type-count any-enemy dock == 0)
		)
	)
	(warboat-count > 0)
	(strategic-number sn-number-boat-explore-groups < 1)
	(nand
		(warboat-count < 6)
		(unit-type-count revealer > 0)
	)
=>
	(set-strategic-number sn-number-boat-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 2)
	(chat-local-to-self "search enemy docks")
)
#else
(defrule
	(players-building-count every-enemy > 0)
	(players-unit-type-count every-enemy villager > 0)
	(strategic-number sn-number-explore-groups > 1)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-reset-scouts)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(players-building-count every-enemy == 0)
	(goal under-attack-goal 0)
	(warboat-count > 0)
=>
	(set-strategic-number sn-number-boat-explore-groups 5)
	(set-strategic-number sn-total-number-explorers 6)
)
(defrule
	(strategic-number sn-number-boat-explore-groups > 1)
	(players-building-type-count every-enemy dock > 0)
=>
	(set-strategic-number sn-number-boat-explore-groups 1)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(and
			(unit-type-count knight-line == 0)
			(strategic-number sn-military-level >= 0)
		)
		(game-time >= 1380)
	)
	(game-time > 1140)
	(game-time < 1800)
	(timer-triggered scouting-timer)
	(strategic-number sn-infantry-threat == 0)
	(strategic-number sn-archer-threat == 0)
	(strategic-number sn-cavalry-threat == 0)
	(goal monk-threat-goal 0)
=>
	(enable-timer scouting-timer 180)
	(set-strategic-number sn-percent-attack-soldiers 1)
	(attack-now)
)
(defrule
	(up-compare-goal tc-dodging-goal < 1)
	(game-time > 600)
	(players-building-count every-enemy > 0)
	(or
		(or
			(strategic-number sn-infantry-threat >= 1)
			(strategic-number sn-archer-threat >= 1)
		)
		(or
			(strategic-number sn-cavalry-threat >= 1)
			(goal monk-threat-goal 1)
		)
	)
=>
	(set-strategic-number sn-number-explore-groups 0);disable scouting when found threats to not waste units
)
(defrule
	(up-compare-goal tc-dodging-goal < 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(and
			(and
				(strategic-number sn-infantry-threat == 0)
				(strategic-number sn-archer-threat == 0)
			)
			(and
				(strategic-number sn-cavalry-threat == 0)
				(goal monk-threat-goal 0)
			)
		)
		(players-building-count any-enemy == 0)
	)
	(strategic-number sn-number-explore-groups == 0)
=>
	(set-strategic-number sn-number-explore-groups 1); restart scouting when no threats found
)
(defrule
	(up-compare-goal tc-dodging-goal < 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(players-current-age any-enemy == feudal-age)
	(players-current-age-time any-enemy > 360); enemy in feudal age for 6+ mins
	(game-time < 1320)
	(players-military-population any-enemy < 2); yet no military
	(players-building-count any-enemy == 0); not all enemy sighted
	(military-population > 10)
	(goal position-goal pocket)
=>
	(set-strategic-number sn-number-explore-groups 3); find the sling
	(set-strategic-number sn-total-number-explorers 3)
	(disable-self)
)
#load-if-not-defined DEATH-MATCH
#load-if-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(timer-triggered one-minute-timer)		
	(game-time > 400)
	(game-time < 1320)	
	(players-building-count any-enemy == 0)
=>
	(up-send-scout group-type-land-explore position-opposite)
	(chat-local-to-self "search for enemy")
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(timer-triggered one-minute-timer)		
	(game-time > 400)
	(game-time < 840)
	(players-building-count any-enemy == 0)
=>
	(up-send-scout group-type-land-explore position-flank)
	(chat-local-to-self "search for enemy")
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(timer-triggered one-minute-timer)
	(strategic-number sn-infantry-threat == 0)
	(strategic-number sn-archer-threat == 0)
	(strategic-number sn-cavalry-threat == 0)
	(goal monk-threat-goal 0)
	(nand
		(players-building-count any-enemy == 0)
		(goal position-goal pocket)
	)
	(game-time > 1140)
=>
	(up-send-scout group-type-land-explore position-enemy)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(timer-triggered one-minute-timer); scout enemy periodically if still not found. Hopefully the scout will run into another direction next time.			
		(game-time < 3)
	)
	(game-time < 720)
	(or
		(players-building-count every-enemy == 0)
		(player-in-game any-ally)
	)
=>
	(up-send-scout group-type-land-explore position-flank)
)
#end-if
#load-if-not-defined SCANDANAVIA-MAP
#load-if-not-defined COASTAL-MAP
#load-if-not-defined RIVERS-MAP
#load-if-not-defined SALT-MARSH-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(game-time >= 300)
	(nand
		(goal position-goal flank)
		(map-type highland)
	)
=>
	(up-send-scout group-type-land-explore position-center)
	(disable-self)
)
#end-if
#end-if
#end-if
#end-if
(defrule
	(up-compare-goal tc-dodging-goal < 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(nor
		(players-civ every-enemy gothic)
		(players-civ every-enemy viking)
	)
	(nor
		(players-civ every-enemy japanese)
		(goal meso-enemy-goal 1)
	)
	(strategic-number sn-cavalry-threat == 0)
	(strategic-number sn-number-explore-groups == 0)
=>
	(set-strategic-number sn-number-explore-groups 1);resume exploring
)
(defrule
	(or
		(players-civ any-enemy aztec)
		(or
			(players-civ any-enemy mayan)
			(players-civ any-enemy incan)
		)
	)
=>
	(set-goal meso-enemy-goal 1)
	(disable-self)
)
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(current-age == dark-age)
	(unit-type-count villager >= 22)
	(unit-type-count villager < 29)
	(up-player-distance focus-player < 70)
=>
	(up-get-fact unit-type-count villager math-goal)
	(up-get-focus-fact civilian-population 0 math-goal2)
	(up-modify-goal math-goal g:- math-goal2)
)
(defrule
	(current-age == dark-age)
	(unit-type-count villager >= 22); we have +2 villagers already, so enemy feudals early?! => flush
	(unit-type-count villager < 29)
	(up-player-distance focus-player < 70)
	(up-compare-goal math-goal > 1)
	(up-compare-goal enemy-goal != flush)
=>
	(set-goal enemy-goal flush)
)
(defrule
	(players-military-population every-enemy > 4)
	(or
		(game-time < 900)
		(players-military-population every-enemy > 7)
	)
	(or
		(game-time < 1000)
		(players-military-population every-enemy > 11)
	)
	(players-current-age every-enemy == feudal-age)
=>
	(set-goal enemy-goal flush)
)
(defrule
	(players-current-age every-enemy == dark-age)
	(or
		(goal ffa-game-goal 1)
		(or
			(players-civilian-population any-human-enemy > 24)
			(players-civilian-population any-enemy > 26)
		)
	)
	(goal enemy-goal flush)
=>
	(set-goal enemy-goal 0)
)
#load-if-defined CHINESE-CIV
(defrule
	(players-current-age every-enemy == dark-age)
	(or
		(or
			(starting-resources >= medium-resources); don't false trigger flush on settings chinese are able to keep their villager advantage
			(regicide-game)
		)
		(difficulty == hardest)
	)
	(goal enemy-goal flush)
=>
	(set-goal enemy-goal 0)
)
#end-if
(defrule
	(players-current-age every-enemy == castle-age)
	(game-time < 1200)
	(players-military-population every-enemy < 3); enemy fast castle without military could be rush so better be prepared
	(nor
		(goal enemy-goal rush)
		(goal enemy-goal eagle-warrior)
	)
=>
	(set-goal enemy-goal rush)
	(chat-to-player my-player-number "enemy fast castle")
)
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined IMPERIAL-AGE-START
#load-if-not-defined CASTLE-AGE-START
#load-if-not-defined DEATH-MATCH
#load-if-not-defined HIGH-RESOURCES-START
#load-if-not-defined DIFFICULTY-HARDEST
(defrule
	(game-time < 1260)
	(players-current-age focus-player >= castle-age)
	(players-military-population focus-player > 5)
	(goal enemy-goal flush)
	(goal strategy-goal flush)
	(building-type-count-total watch-tower == 0)
	(can-build watch-tower)
=>
	(up-set-placement-data my-player-number -1 c: 8)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: watch-tower)
)
(defrule
	(game-time < 1260)
	(players-current-age any-enemy >= castle-age)
	(players-military-population every-enemy > 5)
	(goal enemy-goal flush)
=>
	(set-goal enemy-goal skirmisher)
	(chat-to-player my-player-number "enemy not flushing")
)
(defrule
	(game-time < 1720)
	(up-compare-goal enemy-goal != castle)
	(or
		(and
			(players-current-age every-enemy == feudal-age)
			(up-compare-goal enemy-goal != flush)
		)
		(players-unit-type-count focus-player skirmisher-line > 8)
	)
	(players-military-population focus-player >= 6)
=>
	(set-goal enemy-goal skirmisher)
	(chat-to-player my-player-number "enemy trash strategy detected")
	(disable-self)
)
(defrule
	(game-time < 1500)
	(or
		(or
			(players-unit-type-count focus-player eagle-warrior-line > 7)
			(and
				(players-building-type-count focus-player barracks > 2)
				(players-unit-type-count focus-player militiaman-line < 3)
			)
		)
		(and
			(game-time < 1200)
			(and
				(players-building-type-count focus-player barracks > 1)
				(players-military-population focus-player < 2)
			)
		)
	)
=>
	(set-goal enemy-goal eagle-warrior)
	(chat-to-player my-player-number "24enemy EW rush detected")
	(disable-self)
)
(defrule
	(game-time < 1500)
	(players-unit-type-count focus-player eagle-warrior-line > 4)
	(players-current-age-time focus-player < 150)
=>
	(set-goal enemy-goal eagle-warrior)
	(chat-to-player my-player-number "24enemy EW rush detected")
	(disable-self)
)
(defrule
	(game-time >= 1800)
	(or
		(players-unit-type-count every-enemy eagle-warrior-line < 5)
		(game-time > 2400)
	)
	(players-unit-type-count every-enemy eagle-warrior-line < 20)
	(goal enemy-goal eagle-warrior)
=>
	(set-goal enemy-goal 0)
	(disable-self)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(or
		(or
			(goal under-attack-goal 1)
			(up-compare-goal patrol-goal >= 0)
		)
		(or
			(and
				(strategic-number sn-maximum-town-size >= 40)
				(strategic-number sn-minimum-water-body-size-for-dock < water-islands); TSA is not used on islands
			)
			(strategic-number sn-number-attack-groups > 0)
		)
	)
	(building-type-count-total town-center > 0)
=>
	(set-goal hostilities-goal 1)
)

;******************** STRATEGY SELECTION ********************

#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal nr-map-goal -1)
	(goal enemy-goal flush)
	(up-compare-goal control-goal != aggressive-rush)
	(up-compare-goal control-goal != shot)
	(up-compare-goal strategy-goal != sling)
	(up-compare-goal position-goal != pocket)
	(strategic-number sn-current-age == dark); not too early, if the enemy just had idle TC and we have no food for feudal
	(food-amount >= 430)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-strategic-number sn-task-ungrouped-soldiers 1); spread military to find forward towers, set back after 6 mins
	(set-goal spread-military-goal 1)
	(enable-timer spread-military-timer 360)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count stone-wall < 15); not on walled maps
	(goal enemy-goal flush)
	(current-age == dark-age)
	(goal control-goal aggressive-rush)
	(up-compare-goal position-goal != pocket)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal nr-map-goal -1)
	(building-type-count stone-wall < 15); not on walled maps
	(strategic-number sn-current-age == feudal)
	(goal position-goal flank)
	(up-compare-goal strategy-goal != flush)
	(building-type-count-total barracks > 0)
	(food-amount < 500)
	(players-military-population any-enemy > 2)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal belated-flush-defense); change gatherer percentages to collect more wood
	(chat-to-player my-player-number "bad start and enemy may flush")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count stone-wall < 15); not on walled maps
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal rush)
	(goal enemy-goal flush)
	(or
		(goal unit-goal skirmisher)
		(goal unit-goal my-unique-unit-line)
	)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal belated-flush-defense); change gatherer percentages to collect more wood
	(chat-to-player my-player-number "countering enemy flush with feudal war")
)
#load-if-not-defined BRITON-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count stone-wall < 15); not on walled maps
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal rush)
	(goal enemy-goal flush)
	(nor
		(or
			(goal control-goal aggressive-rush)
			(goal control-goal shot)
		)
		(goal position-goal pocket)
	)
	(building-type-count barracks > 0)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal belated-flush-defense); change gatherer percentages to collect more wood
	(chat-to-player my-player-number "countering enemy flush with feudal war")
)
#end-if
#end-if
#end-if
#load-if-defined DEATH-MATCH ; treat this as flush and build an army in feudal age.
(defrule
	(strategic-number sn-current-age == df-transit)
=>
	(set-goal enemy-goal flush)
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(disable-self)
)
#else
#load-if-not-defined SARACEN-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(nor
		(goal strategy-goal flush)
		(goal strategy-goal sling)
	)
	(or
		(building-type-count-total mining-camp == 0)
		(dropsite-min-distance gold < 0)
	)
	(strategic-number sn-current-age == feudal)
	(current-age-time < 10)
	(nor
		(town-under-attack)
		(goal unit-goal eagle-warrior)
	)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal no-gold-flush-unit)
	(set-strategic-number sn-maximum-gold-drop-distance 20)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal unit-goal my-unique-unit-line)
	(strategic-number sn-current-age == feudal)
	(current-age-time < 10)
	(or
		(dropsite-min-distance stone < 0); no stone found
		(dropsite-min-distance stone > 33); so switch strategy
	)
=>
	(set-goal unit-goal default-ranged); should work for all civs
)
(defrule
	(or
		(and
			(player-in-game any-human-enemy)
			(or
				(or
					(map-type black-forest)
					(cc-players-unit-type-count 0 tree > heavy-wood)
				)
				(or
					(map-type mongolia)
					(map-type oasis)
				)
			)
		)
		(building-type-count stone-wall-line > 15)
	)
=>
	(set-goal nr-map-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != boom)
	(goal unit-goal scout-cavalry)
	(taunt-detected any-human-ally 33)
=>
	(set-goal unit-goal knight)
)
#load-if-not-defined SARACEN-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined JAPANESE-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != boom)
	(up-compare-goal unit-goal g:!= ranged-unit-type-goal)
	(up-compare-goal ranged-unit-type-goal != scorpion)
	(up-compare-goal ranged-unit-type-goal != monk)
	(taunt-detected any-human-ally 33)
=>
	(set-goal ranged-unit-type-goal 0)
)
#end-if
#end-if
#end-if

(defrule
	(taunt-detected any-human-ally 38)
	(taunt-detected any-human-ally 33)
=>
	(acknowledge-taunt any-human-ally 38)
	(acknowledge-taunt any-human-ally 33)
	(chat-to-allies "Slinging stopped")
)
(defrule
	(or
		(taunt-detected any-human-ally 32)
		(taunt-detected any-human-ally 33)
	)
	(or
		(goal strategy-goal sling)
		(goal control-goal shot)
	)
=>
	(acknowledge-taunt any-human-ally 38)
	(acknowledge-taunt any-human-ally 33)
	(chat-to-allies "Strategy can't be changed")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != boom)
	(or
		(goal unit-goal militiaman-line)
		(goal unit-goal skirmisher)
	)
	(taunt-detected any-human-ally 33)
=>
	(acknowledge-taunt this-any-human-ally 33)
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(chat-to-allies "Strategy changed to booming")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != boom)
	(taunt-detected any-human-ally 33)
=>
	(acknowledge-taunt this-any-human-ally 33)
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(chat-to-allies "Strategy changed to booming")
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != boom)
	(taunt-detected any-human-ally 33)
=>
	(acknowledge-taunt this-any-human-ally 33)
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(chat-to-allies "Strategy changed to booming")
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(or
		(goal unit-goal archer)
		(goal unit-goal knight)
	)
	(taunt-detected any-human-ally 32)
=>
	(acknowledge-taunt this-any-human-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(chat-to-allies "Strategy changed to rush")
)
(defrule
	(current-age == dark-age)
	(taunt-detected any-human-ally 38)
=>
	(set-goal unit-goal skirmisher)
	(set-goal strategy-goal sling)
	(set-goal ranged-unit-type-goal 0)
	(set-goal control-goal 0)
	(chat-to-player-using-id this-any-ally 22072)
	(chat-to-player this-any-ally "Send 33 to stop slinging.")
	(disable-self)
)
(defrule
	(current-age > dark-age)
	(taunt-detected any-human-ally 38)
=>
	(chat-to-player-using-id this-any-ally 22072)
	(chat-to-player this-any-ally "Send 33 to stop slinging.")
	(disable-self)
)
(defrule
	(current-age > dark-age)
	(taunt-detected any-human-ally 38)
=>
	(set-strategic-number sn-resource-control sling)
)

; *** STRATEGY DEPENDING ON CIV ***

#load-if-not-defined UP-MICHI-STYLE
#load-if-defined AZTEC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(game-time > 13)
	(game-time < 60)
	(random-number <= 20)
	(nand
		(goal position-goal flank)
		(or
			(map-size normal)
			(or
				(map-size large)
				(map-size giant)
			)
		)
	)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(or
		(nand
			(goal meso-enemy-goal 1)
			(goal position-goal flank)
		)
		(goal nr-map-goal 1)
	)
	(random-number > 20)
	(random-number <= 40)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age < ci-transit)
	(random-number > 40)
	(random-number <= 60)
	(game-time > 13)
	(game-time < 60)
	(goal nr-map-goal 1)
=>
	(set-goal unit-goal eagle-warrior)
	(set-goal strategy-goal fast-imp)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number >= 50)
	(goal position-goal pocket)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal ffa-game-goal -1)
	(goal nr-map-goal -1)
	(strategic-number sn-current-age <= fc-transit)
	(nor
		(players-civ any-ally briton); don't play with too much ranged
		(players-civ any-ally mayan)
	)
	(random-number >= 70)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == castle)
	(or
		(and
			(goal strategy-goal boom)
			(or
				(goal unit-goal archer)
				(goal unit-goal eagle-warrior)
			)
		)
		(and
			(research-completed ri-elite-skirmisher)
			(goal unit-goal skirmisher)
		)
	)
	(goal ranged-unit-type-goal archer)
	(building-type-count-total town-center >= tc-level-three)
	(or
		(building-type-count-total town-center >= tc-level-five)
		(population-cap < 225)
	)
=>
	(set-goal strategy-goal fast-imp)
)
(defrule
	(or
		(strategic-number sn-archer-threat > 1)
		(and
			(players-building-type-count every-enemy archery-range > 1)
			(game-time < 1500)
		)
	)
	(goal unit-goal archer)
	(goal strategy-goal boom)
	(building-type-count stone-wall < 15)
	(building-type-count-total monastery > 0)
	(strategic-number sn-current-age < ci-transit)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal skirmisher)
)
(defrule
	(or
		(or
			(players-unit-type-count any-enemy huskarl-line > 15)
			(players-unit-type-count any-enemy samurai-line > 15)
		)
		(or
			(and
				(strategic-number sn-cavalry-threat > 3)
				(goal anti-monk-threat-goal 0)
			)
			(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
		)
	)
=>
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(goal unit-goal monk)
	(or
		(and
			(building-type-count-total barracks > 0)
			(building-type-count-total monastery < 2)
		)
		(research-completed ri-long-swordsman)
	)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(or
		(or
			(goal strategy-goal boom)
			(goal strategy-goal fast-imp)
		)
		(and
			(goal unit-goal skirmisher)
			(goal ranged-unit-type-goal archer)
		)
	)
	(up-compare-goal unit-goal != monk)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(strategic-number sn-current-age < ci-transit)
	(goal unit-goal eagle-warrior)
	(goal strategy-goal rush)
	(or
		(military-population > 60)
		(unit-type-count-total eagle-warrior-line > 45)
	)	
=>
	(set-goal unit-goal eagle-warrior)
	(set-goal strategy-goal fast-imp)
	(set-goal ranged-unit-type-goal 0)
)
(defrule
	(goal unit-goal eagle-warrior)
	(or 
		(players-building-type-count every-enemy castle > 0)
		(or
			(players-unit-type-count any-enemy teutonic-knight-line > 0)
			(players-unit-type-count any-enemy cataphract-line > 0)
		)
	)
	(game-time < 1500)
=>
	(set-goal unit-goal mix)
)
#load-if-defined UP-1-PLAYER-TEAM
(defrule
	(nor 
		(goal control-goal my-unique-unit-line)
		(goal unit-goal my-unique-unit-line)
	)
	(civilian-population > 90)
	(or
		(and
			(strategic-number sn-current-age >= ci-transit)
			(game-time > 3000)
		)
		(and
			(food-amount > 400)
			(gold-amount < 100)
		)
	)
	(current-age-time > 300)
=>
	(set-goal control-goal militiaman-line)
	(chat-to-player my-player-number "research m@a and long-swordsman")
	(disable-self)
)
#end-if
(defrule
	(game-time < 2100)
	(players-current-age any-enemy == imperial-age)
	(or
		(goal unit-goal mix)
		(goal unit-goal eagle-warrior)
	)
	(players-unit-type-count any-enemy eagle-warrior-line > 5)
=>
	(set-goal control-goal militiaman-line)
	(chat-to-player my-player-number "research m@a and long-swordsman")
	(disable-self)
)
(defrule
	(food-amount > 150)
	(or
		(gold-amount < 50)
		(food-amount > 300)
	)
	(or
		(and
			(research-completed ri-iron-casting)
			(and
				(goal unit-goal eagle-warrior)
				(goal enemy-goal eagle-warrior)
			)
		)
		(and
			(goal unit-goal monk)
			(players-unit-type-count any-enemy eagle-warrior-line > 7)
		)
	)	
=>
	(set-goal control-goal militiaman-line)
	(chat-to-player my-player-number "long-swordsman to counter EW rush")
	(disable-self)
)
#load-if-not-defined RIVERS-MAP
#load-if-not-defined BALTIC-MAP
(defrule
	(or
		(and
			(strategic-number sn-current-age >= ci-transit)
			(and
				(goal control-goal militiaman-line)
				(research-completed ri-long-swordsman)
			)
		)
		(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	)
	(nand
		(unit-type-count-total eagle-warrior-line > 20); go for eew instead as some enemy still may have ranged units
		(strategic-number sn-archer-threat > 0)
	)
=>
	(set-goal unit-goal militiaman-line)
	(disable-self)
)
#end-if
#end-if
(defrule
	(up-compare-goal control-goal != shot)
	(strategic-number sn-infantry-threat >= 3)
	(dropsite-min-distance stone < 5)
	(building-type-count-total town-center >= tc-level-two)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(building-type-count castle > 1)
	(goal control-goal my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(or
		(map-type baltic)
		(map-type rivers)
	)
	(current-age < castle-age)
	(goal unit-goal eagle-warrior)
	(players-unit-type-count any-enemy galley-line > 0)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
	(set-goal strategy-goal rush)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(or
		(map-type baltic)
		(map-type rivers)
	)	
	(goal unit-goal eagle-warrior)
	(or
		(goal enemy-boats-goal 0)
		(warboat-count > 40)
	)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(players-building-type-count any-enemy watch-tower > 3)
		(and
			(and
				(players-unit-type-count every-enemy skirmisher-line > 7)
				(players-unit-type-count every-enemy militiaman-line < 5)
			)
			(or
				(players-unit-type-count every-enemy skirmisher-line > 15)
				(game-time < 1500)
			)
		)
	)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
	(disable-self)
)
(defrule
	(goal strategy-goal flush)
	(goal unit-goal archer)
	(strategic-number sn-current-age == fc-transit)	
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
#load-if-defined UP-HUMAN-IN-GAME
(defrule
	(strategic-number sn-current-age == dark)
	(or
		(goal control-goal aggressive-rush)
		(and
			(goal unit-goal eagle-warrior)
			(goal strategy-goal rush)
		)
	)
	(goal nr-map-goal 1)
=>
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
)
#end-if
#end-if ; AZTEC CIV STRATEGY
#load-if-defined BRITON-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(or
		(or
			(random-number <= 20)
			(regicide-game)
		)
		(goal nr-map-goal 1)
	)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number > 90)
	(game-time < 60)
	(up-allied-goal every-ally unit-goal != knight)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(random-number >= 60)
	(game-time < 60)
	(goal nr-map-goal -1)
=>
	(set-goal unit-goal archer)
	(set-goal strategy-goal rush)
	(disable-self)
)
(defrule
	(up-compare-goal control-goal != shot)
	(or
		(and
			(goal strategy-goal flush)
			(strategic-number sn-current-age == fc-transit)
		)
		(and
			(building-type-count castle > 0)
			(goal unit-goal archer)
		)
	)
=>
	(set-goal unit-goal mix)
	(set-goal control-goal my-unique-unit-line)
	(disable-self)
)
(defrule
	(research-available ri-man-at-arms)
	(or
		(or
			(players-unit-type-count any-enemy eagle-warrior-line > 14)
			(players-unit-type-count any-enemy huskarl-line > 20)
		)
		(goal enemy-goal eagle-warrior)
	)
=>
	(set-goal control-goal militiaman-line)
	(disable-self)
)
#end-if ; BRITON STRATEGY
#load-if-defined BYZANTINE-CIV
(defrule
	(or
		(and
			(goal strategy-goal flush)
			(strategic-number sn-current-age == fc-transit)
		)
		(and
			(goal unit-goal skirmisher)
			(goal enemy-goal eagle-warrior)
		)
	)
	(building-type-count castle == 0)
=>
	(set-goal unit-goal mix)
	(disable-self)
)
(defrule
	(dropsite-min-distance stone < 5)
	(building-type-count-total town-center >= tc-level-three)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
=>
	(set-goal control-goal my-unique-unit-line)
	(chat-to-player my-player-number "prepare for unique-units")
	(disable-self)
)
(defrule
	(building-type-count castle > 1)
	(up-compare-goal unit-goal != my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(chat-to-player my-player-number "switch to unique-units")
	(disable-self)
)
(defrule
	(random-number > 80)
	(strategic-number sn-current-age == df-transit)
	(building-type-count-total archery-range == 0)
	(goal strategy-goal rush)
	(up-compare-goal enemy-goal != flush)
	(up-player-distance focus-player < 80)
	(or
		(or
			(players-civ focus-player hun)
			(players-civ focus-player mongol)
		)
		(or
			(players-civ focus-player persian)
			(players-civ focus-player frankish)
		)
	)
=>
	(set-goal unit-goal knight)
)
(defrule
	(or
		(goal position-goal pocket)
		(or
			(building-type-count castle > 0)
			(goal nr-map-goal 1)
		)
	)
	(random-number >= 60)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(goal unit-goal militiaman-line)
	(or
		(strategic-number sn-current-age == fc-transit)
		(research-available ri-long-swordsman)
	)
	(players-unit-type-count focus-player eagle-warrior-line < 5)
=>
	(set-goal unit-goal skirmisher)
	(set-goal control-goal 0)
)
(defrule
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
	(or
		(or
			(players-civ focus-player mayan); archer flush
			(players-civ focus-player briton)
		)
		(or
			(players-civ focus-player hun); scout or archer flush
			(and
				(players-building-type-count focus-player archery-range > 1)
				(game-time < 1200)
			)
		)
	)
	(up-player-distance focus-player < 80)
=>
	(set-goal unit-goal skirmisher)
)
(defrule
	(or
		(and
			(goal unit-goal knight)
			(game-time > 1800)
		)
		(and
			(goal unit-goal scorpion)
			(building-type-count town-center >= tc-level-four)
		)
	)
	(dropsite-min-distance stone < 6)
=>
	(set-goal control-goal my-unique-unit-line)
	(disable-self)
)
(defrule
	(or
		(goal unit-goal knight)
		(goal unit-goal scorpion)
	)
	(building-type-count castle > 0)
	(or
		(building-type-count castle > 1)
		(strategic-number sn-current-age >= ci-transit)
	)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
)
#load-if-defined UP-4-PLAYER-TEAM
(defrule
	(current-age == dark-age)
	(random-number > 40)
	(game-time > 25)
	(game-time < 60)
	(up-allied-goal every-ally unit-goal != knight)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
(defrule
	(current-age == dark-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number > 70)
	(or
		(goal nr-map-goal 1)
		(random-number > 90)
	)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(goal nr-map-goal 1)
		(and
			(goal position-goal pocket)
			(random-number < 20)
		)
	)
	(random-number <= 70)
	(game-time > 25)
	(game-time < 60)
=>
	(set-goal unit-goal scorpion)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(goal nr-map-goal 1)
		(and	
			(random-number < 20)
			(goal position-goal pocket)
		)
	)
	(random-number < 40)
	(building-type-count stone-wall-line < 15)
	(game-time > 25)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
	(nor
		(goal unit-goal knight)
		(goal unit-goal my-unique-unit-line)
	)
	(or
		(and
			(goal strategy-goal flush)
			(strategic-number sn-current-age >= fc-transit)
		)
		(and
			(goal unit-goal archer)
			(goal forward-threat-goal 1)
		)
	)
=>
	(set-goal unit-goal knight)
	(chat-to-player my-player-number "switch to knight")
)
(defrule
	(goal unit-goal knight)
	(goal strategy-goal rush)
	(strategic-number sn-current-age == fc-transit)
	(goal ranged-unit-type-goal archer)
	(up-research-status c: ri-bloodlines >= research-pending)
=>
	(set-goal ranged-unit-type-goal cavalry-archer)
	(disable-self)
)
(defrule
	(goal unit-goal knight)
	(or
		(goal control-goal 0)
		(goal control-goal aggressive-rush)
	)
	(or
		(and
			(building-type-count-total archery-range > 0)
			(building-type-count-total town-center >= tc-level-three)
		)
		(unit-type-count villager > fourty-percent-pop)
	)
	(dropsite-min-distance stone < 5)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(chat-to-player my-player-number "switch to uu")
)
(defrule
	(goal unit-goal knight)
	(goal control-goal my-unique-unit-line)
	(goal anti-cavalry-threat-goal 1)
	(civilian-population > 80)
	(building-type-count castle > 0)
=>
	(set-goal unit-goal militiaman-line)
	(disable-self)
)
#load-if-defined ARABIA-MAP
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
	(unit-type-count-total villager > 20)
	(unit-type-count-total villager < 28)
	(food-amount > 500)
	(goal strategy-goal rush)
	(not (player-valid any-ally))
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(chat-to-player my-player-number "switch to flush")
	(disable-self)
)
#end-if
(defrule
	(strategic-number sn-current-age == dark)
	(goal strategy-goal rush)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(building-type-count castle > 0)
		(random-number < 30)
	)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(or
			(goal nr-map-goal 1)
			(building-type-count castle > 0)
		)
		(random-number < 30)
	)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(goal nr-map-goal 1)
	(random-number > 60)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal -1)
	(building-type-count-total castle == 0)
	(random-number > 80)
	(game-time < 60)
=>
	(set-goal unit-goal archer)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(goal unit-goal knight)
	(players-unit-type-count any-enemy camel-line > 10)
	(dropsite-min-distance stone < 5)
	(game-time >= 1800)
	(research-available ri-man-at-arms)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(goal control-goal my-unique-unit-line)
	(players-unit-type-count any-enemy camel-line > 10)
	(building-type-count-total castle > 0)
	(research-available ri-man-at-arms)
	(or
		(building-type-count-total castle > 1)
		(strategic-number sn-archer-threat < 2)
	)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(goal unit-goal knight)
	(or
		(goal control-goal 0)
		(goal control-goal aggressive-rush)
	)
	(goal anti-cavalry-threat-goal 1)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(and
			(food-amount > 400)
			(gold-amount < 100)
		)
	)
	(research-available ri-man-at-arms)
	(research-completed ri-hand-cart)
	(building-type-count-total castle > 0)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
#load-if-defined UP-1-PLAYER-TEAM
(defrule
	(goal unit-goal knight)
	(strategic-number sn-military-level < 0)
	(goal anti-cavalry-threat-goal 1)
	(building-type-count-total castle == 0)
	(research-completed ri-hand-cart)
=>
	(set-goal control-goal militiaman-line)
)
#end-if
(defrule
	(goal unit-goal knight)
	(up-compare-goal strategy-goal != boom)
	(up-compare-goal control-goal != shot)
	(up-compare-goal ranged-unit-type-goal != scorpion)
	(goal anti-cavalry-threat-goal 1)
	(building-type-count-total castle == 0)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(and
			(food-amount > 400)
			(gold-amount < 100)
		)
	)
	(research-completed ri-hand-cart)
=>
	(set-goal control-goal militiaman-line)
)
(defrule
	(goal unit-goal knight)
	(goal control-goal militiaman-line)
	(players-unit-type-count any-enemy spearman-line > 30)
	(strategic-number sn-archer-threat < 2)
	(research-completed ri-long-swordsman)
	(building-type-count-total barracks >= 3)
	(up-compare-goal ranged-unit-type-goal != scorpion)
=>
	(set-goal unit-goal militiaman-line)
	(chat-to-player my-player-number "switch to militiaman-line")
)
(defrule
	(goal unit-goal militiaman-line)
	(players-unit-type-count every-enemy spearman-line < 20)
	(gold-amount > 500)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal unit-goal knight)
	(chat-to-player my-player-number "switch to knight-line")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total stone-wall > 15)
	(game-time > 13)
	(game-time < 60)
	(random-number > 40)
	(or
		(players-civ focus-player aztec)
		(players-civ focus-player saracen)
	)
=>
	(set-goal position-goal pocket); pretend, stay in dark a little longer and use extra resources on some early scouts to stop mush
	(set-goal control-goal aggressive-rush)
	(set-goal strategy-goal rush)
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
(defrule
	(current-age == castle-age)
	(goal unit-goal scout-cavalry)
=>
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total stone-wall < 15)
	(game-time > 13)
	(game-time < 60)
	(random-number > 50)
	(or
		(random-number > 70)
		(goal nr-map-goal 1)
	)
	(goal position-goal pocket)
=>
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal scorpion)
	(disable-self)
)
#end-if ;french
#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-archer-threat >= 1)
	(not (research-completed ri-champion))
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(chat-to-player my-player-number "switch to huskies")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(dropsite-min-distance stone < 6)
	(building-type-count-total town-center >= tc-level-three)
	(or
		(or
			(players-civ any-enemy briton)
			(players-civ any-enemy hun)
		)
		(or
			(or
				(players-civ any-enemy mongol)
				(players-civ any-enemy mayan)
			)
			(and
				(current-age == imperial-age)
				(goal unit-goal skirmisher)
			)
		)
	)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(up-compare-goal control-goal != militiaman-line)
	(or
		(or
			(players-unit-type-count any-enemy eagle-warrior-line > 10)
			(strategic-number sn-current-age >= ci-transit)
		)
		(and
			(and
				(food-amount > 500)
				(gold-amount < 100)
			)
			(goal unit-goal knight)
		)
	)
=>
	(set-goal control-goal militiaman-line)
)
(defrule
	(goal unit-goal knight)
	(research-completed ri-long-swordsman)
=>
	(set-goal unit-goal militiaman-line)
	(set-goal control-goal 0)
)
(defrule
	(or
		(random-number >= 80)
		(or
			(goal nr-map-goal 1)
			(building-type-count castle > 0)
		)
	)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
#end-if
#load-if-defined HUN-CIV
(defrule
	(current-age >= castle-age)
	(building-type-count archery-range >= 2)
	(nor
		(or
			(goal unit-goal cavalry-archer)
			(goal control-goal shot)
		)
		(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	)
=>
	(set-goal unit-goal cavalry-archer)
	(set-goal control-goal 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal ffa-game-goal -1)
	(building-type-count-total stone-wall < 15)
	(random-number > 60)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal control-goal aggressive-rush)
	(set-goal strategy-goal rush)
	(set-goal unit-goal cavalry-archer)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal 1)
	(building-type-count-total stone-wall < 15)
	(random-number > 60)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal cavalry-archer)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#load-if-defined JAPANESE-CIV
(defrule
	(strategic-number sn-current-age >= castle)
	(or
		(goal strategy-goal boom)
		(or
			(goal unit-goal knight)
			(goal unit-goal skirmisher)
		)
	)
	(building-type-count-total town-center >= tc-level-four)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(strategic-number sn-current-age == castle)
	(up-research-status c: ri-long-swordsman < research-pending)
	(unit-type-count-total militiaman-line < 10)
	(goal unit-goal militiaman-line)
=>
	(set-goal unit-goal skirmisher)
	(set-goal control-goal my-unique-unit-line)
)
(defrule
	(or
		(goal unit-goal skirmisher)
		(and
			(goal unit-goal knight)
			(building-type-count-total castle > 1)
		)
	)
	(building-type-count castle > 0)
	(up-research-status c: ri-long-swordsman < research-pending)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
#load-if-defined UP-1-PLAYER-TEAM
(defrule
	(current-age == dark-age)
	(or
		(or
			(and
				(goal ffa-game-goal 1)
				(random-number > 50)
			)
			(building-type-count castle > 0)
		)
		(and
			(random-number >= 80)
			(goal nr-map-goal 1)
		)
	)
	(game-time > 12)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(goal meso-enemy-goal 1)
	(random-number >= 90)
	(game-time > 12)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(goal meso-enemy-goal -1)
	(random-number < 8)
	(game-time > 15)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal strategy-goal flush)
	(goal nr-map-goal 1)
=>
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal strategy-goal flush)
	(unit-type-count villager > 27)
	(strategic-number sn-current-age == dark)
=>
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal rush)
	(disable-self)
)

#load-if-defined UP-GAME-AGE2-X2
(defrule
	(or
		(up-allied-goal any-ally strategy-goal == boom)
		(up-allied-goal any-ally strategy-goal == flush)
	)
	(game-time < sling-time)
	(game-time > 13)
	(goal strategy-goal boom)
	(goal nr-map-goal -1)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
)
(defrule
	(up-allied-goal any-ally strategy-goal == flush)
	(up-allied-goal any-ally unit-goal == knight)
	(game-time < sling-time)
	(game-time > 13)
	(goal position-goal pocket)
	(goal nr-map-goal -1)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
)
#end-if
#end-if
#load-if-defined KOREAN-CIV
(defrule
	(goal strategy-goal flush)
=>
	(set-goal unit-goal skirmisher)
	(disable-self)
)
(defrule
	(dropsite-min-distance stone < 5)
	(building-type-count-total town-center >= tc-level-three)
	(not (goal unit-goal my-unique-unit-line))
=>
	(set-goal control-goal my-unique-unit-line)
	(chat-to-player my-player-number "prepare for unique-units")
	(disable-self)
)
(defrule
	(building-type-count castle > 1)
	(goal unit-goal militiaman-line)
	(goal control-goal my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal militiaman-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(building-type-count castle > 1)
	(nor 
		(goal unit-goal militiaman-line)
		(goal unit-goal my-unique-unit-line)
	)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(random-number > 25)
	(random-number < 60)
	(goal nr-map-goal -1)
=>
	(set-goal unit-goal skirmisher)
	(set-goal strategy-goal flush)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(or
		(and
			(or
				(random-number >= 60)
				(players-civ every-enemy aztec)
			)
			(random-number > 40)
		)
		(building-type-count castle > 0)
	)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(or
		(goal nr-map-goal 1)
		(and
			(goal position-goal flank)
			(up-allied-goal any-ally strategy-goal == boom)
		)
	)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(or
		(and
			(random-number > 90)
			(game-time < 5)
		)
		(or
			(and
				(or
					(research-completed ri-heresy)
					(strategic-number sn-current-age >= ci-transit)
				)
				(or
					(goal strategy-goal boom)
					(goal strategy-goal fast-imp)
				)
			)
			(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
		)
	)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(not (goal strategy-goal boom))
	(strategic-number sn-current-age >= fc-transit)
	(or
		(players-building-type-count any-enemy watch-tower > 3)
		(and
			(and
				(players-unit-type-count every-enemy skirmisher-line > 7)
				(players-unit-type-count every-enemy militiaman-line < 5)
			)
			(or
				(players-unit-type-count every-enemy skirmisher-line > 15)
				(game-time < 1500)
			)
		)
	)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(goal unit-goal eagle-warrior)
	(or
		(players-civ every-enemy gothic)
		(players-civ every-enemy japanese)
	)
	(goal nr-map-goal -1)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(random-number >= 40)
	(random-number < 60)
	(goal nr-map-goal -1)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(goal nr-map-goal 1)
		(random-number < 40)
	)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(random-number >= 60)
	(or
		(random-number < 90)
		(player-in-game any-ally)
	)
	(game-time < 60)
	(goal ffa-game-goal -1)
	(building-type-count-total castle == 0)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(dropsite-min-distance stone < 5)
	(building-type-count-total town-center >= tc-level-three)
	(nor 
		(goal unit-goal my-unique-unit-line)
		(or
			(goal control-goal shot)
			(goal control-goal aggressive-rush)
		)
	)
	(or
		(not (goal unit-goal eagle-warrior))
		(strategic-number sn-current-age >= ci-transit)
	)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(chat-to-player my-player-number "prepare for unique-units")
	(disable-self)
)
(defrule
	(or
		(building-type-count castle > 1)
		(regicide-game)
	)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(chat-to-player my-player-number "switch to unique-units")
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(or
		(map-type baltic)
		(map-type rivers)
	)
	(current-age < castle-age)
	(goal unit-goal eagle-warrior)
	(players-unit-type-count any-enemy galley-line > 0)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
	(set-goal strategy-goal rush)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(or
		(map-type baltic)
		(map-type rivers)
	)	
	(goal unit-goal eagle-warrior)
	(or
		(goal enemy-boats-goal 0)
		(warboat-count > 40)
	)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(current-age < castle-age)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle == 0)
=>
	(set-goal unit-goal eagle-warrior)
)
#end-if
#load-if-defined MONGOL-CIV
(defrule
	(current-age == dark-age)
	(game-time > 30)
	(goal strategy-goal flush)
	(random-number >= 40)
=>
	(set-goal unit-goal default-flush-unit)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(game-time > 30)
	(goal strategy-goal flush)
	(random-number < 40)
=>
	(set-goal unit-goal skirmisher)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal flush)
=>
	(set-goal unit-goal knight)
	(chat-to-player my-player-number "switch to knights")
	(disable-self)
)
(defrule
	(or
		(goal unit-goal knight)
		(goal unit-goal skirmisher)
	)
	(not (goal control-goal my-unique-unit-line))
	(or
		(and
			(building-type-count-total archery-range > 0)
			(building-type-count-total town-center >= tc-level-three)
		)
		(unit-type-count villager > fourty-percent-pop)
	)
	(dropsite-min-distance stone < 5)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(chat-to-player my-player-number "switch to uu")
)
(defrule
	(goal strategy-goal flush)
	(goal unit-goal knight)
	(goal control-goal militiaman-line)
	(or
		(and
			(building-type-count-total archery-range > 0)
			(building-type-count-total town-center >= tc-level-three)
		)
		(unit-type-count villager > fourty-percent-pop)
	)
	(dropsite-min-distance stone < 5)
=>
	(set-goal unit-goal militiaman-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(chat-to-player my-player-number "switch to uu")
)
(defrule
	(goal unit-goal knight)
	(goal control-goal my-unique-unit-line)
	(goal anti-cavalry-threat-goal 1)
	(civilian-population > 90)
	(building-type-count castle > 0)
=>
	(set-goal unit-goal militiaman-line)
	(disable-self)
)
(defrule
	(building-type-count castle > 2)
	(or
		(goal unit-goal militiaman-line)
		(goal control-goal militiaman-line)
	)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal militiaman-line)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age == dark)
	(or
		(and
			(random-number < 90)
			(random-number >= 80)
		)
		(and
			(unit-type-count villager > 27)
			(goal strategy-goal flush)
		)
	)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(set-goal strategy-goal rush)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(goal nr-map-goal 1)
		(random-number >= 90)
	)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal nr-map-goal 1)
	(random-number >= 70)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
#end-if; mongol
#load-if-defined PERSIAN-CIV
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(or
		(goal strategy-goal flush)
		(and
			(research-available imperial-age)
			(dropsite-min-distance stone < 6)
		)
	)
	(unit-type-count-total archer < 8)
	(not (goal strategy-goal fast-imp))
=>
	(set-goal unit-goal knight)
	(chat-to-player my-player-number "switch to knights")
	(disable-self)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal flush)
	(unit-type-count-total archer >= 8)
=>
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-player my-player-number "switch to knights")
	(disable-self)
)
(defrule
	(random-number >= 50)
	(random-number < 80)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
=>
	(set-goal unit-goal scout-cavalry)
	(set-goal strategy-goal flush)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(or
		(and
			(or
				(goal nr-map-goal 1)
				(goal position-goal pocket)
			)
			(random-number < 60)
		)
		(building-type-count stone-wall > 15)
	)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age >= castle)
	(or
		(goal position-goal pocket)
		(goal nr-map-goal 1)
	)
	(or
		(random-number < 20)
		(building-type-count stone-wall > 15)
	)
	(random-number < 40)
	(building-type-count town-center >= tc-level-three)
	(current-age-time > 300)
=>
	(set-goal strategy-goal fast-imp)
	(set-goal unit-goal gunpowder-units)
)
(defrule
	(strategic-number sn-current-age >= castle)
	(or
		(goal position-goal pocket)
		(goal nr-map-goal 1)
	)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-research-status c: ri-paladin < research-pending)	
	(random-number < 60)
	(random-number >= 40)
	(building-type-count-total town-center >= tc-level-four)
=>
	(set-goal strategy-goal boom)
	(set-goal control-goal my-unique-unit-line)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal scorpion)
)
(defrule
	(strategic-number sn-current-age >= castle)
	(goal unit-goal my-unique-unit-line)
	(research-available my-unique-unit-upgrade)
	(up-research-status c: ri-paladin >= research-pending)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 0)
)
(defrule
	(random-number > 80)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-goal control-goal aggressive-rush)
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(random-number < 60)
	(random-number >= 40)
	(building-type-count-total stone-wall-line < 15)
	(goal nr-map-goal 1)
	(game-time > 13)
=>
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal gunpowder-units)
	(disable-self)
)
#end-if ; persian
#load-if-defined SARACEN-CIV
(defrule
	(current-age == dark-age)
	(random-number <= 20)
	(goal position-goal pocket)
	(game-time < 30)
=>
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(random-number <= 50)
	(game-time < 60)
=>
	(set-goal unit-goal scout-cavalry)
	(set-goal strategy-goal flush)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(random-number > 50)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(player-in-game any-computer-ally)
	(or
		(or
			(up-allied-goal any-ally unit-goal == skirmisher)
			(up-allied-goal any-ally unit-goal == archer)
		)
		(or
			(up-allied-goal any-ally unit-goal == my-unique-unit-line)
			(up-allied-goal every-ally strategy-goal == flush)
		)
	)
=>
	(set-goal unit-goal knight)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(up-compare-goal control-goal != shot)
	(player-in-game any-computer-ally)
	(up-allied-goal every-ally unit-goal == knight)
=>
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
)
(defrule
	(current-age == dark-age)
	(or
		(random-number > 80)
		(and
			(unit-type-count-total villager > 27)
			(goal strategy-goal flush)
		)
	)
	(game-time > 13)
	(game-time < 60)
	(up-compare-goal control-goal != shot)
=>
	(set-goal unit-goal archer)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
)
(defrule
	(goal position-goal pocket)
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(game-time > 60)
	(game-time < 70)
=>
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
)
(defrule
	(current-age == dark-age)
	(or
		(or
			(random-number > 70)
			(building-type-count stone-wall > 15)
		)
		(and
			(goal nr-map-goal 1)
			(random-number < 25)
		)
	)
	(game-time < 60)
=>
	(set-goal unit-goal monk)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal strategy-goal flush)
	(not (goal unit-goal knight))
=>
	(set-goal unit-goal knight)
)
(defrule
	(or
		(and
			(goal unit-goal knight)
			(strategic-number sn-current-age >= ci-transit)
		)
		(and
			(goal strategy-goal flush)
			(and
				(strategic-number sn-current-age == feudal)
				(players-unit-type-count any-enemy spearman-line > 6)
			)
		)
	)
=>
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(set-goal control-goal aggressive-rush); also stop slinging here, without even cavalier upgrade it is pretty pointless
)
(defrule
	(or
		(and
			(goal nr-map-goal 1)
			(building-type-count stone-wall-line < 15)
		)
		(and
			(and
				(random-number >= 70)
				(regicide-game)
			)
			(goal unit-goal monk)
		)
	)
	(game-time > 15)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal monk)
	(set-goal control-goal 0)
)
#end-if
#load-if-defined SPANISH-CIV
(defrule
	(goal control-goal 0)
	(or
		(goal anti-cavalry-threat-goal 1)
		(players-civ any-enemy gothic)
	)
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone < 5)
	(nand
		(strategic-number sn-current-age == castle)
		(goal strategy-goal boom)
	)
=>
	(set-goal control-goal my-unique-unit-line)
	(chat-to-player my-player-number "enable uu")
)
(defrule
	(goal unit-goal knight)
	(goal control-goal my-unique-unit-line)
	(goal anti-cavalry-threat-goal 1)
	(building-type-count castle >= 2)
	(nand
		(research-completed ri-paladin)
		(research-available my-unique-unit-upgrade)
	)
=>
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-player my-player-number "switch to uu")
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age == feudal)
	(or
		(players-unit-type-count any-enemy spearman-line > 6)
		(or
			(players-civ every-enemy mayan)
			(players-civ every-enemy briton)
		)
	)
=>
	(set-goal unit-goal skirmisher)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(goal nr-map-goal 1)
		(and
			(random-number < 20)
			(goal position-goal pocket)
		)
	)
	(game-time > 13)
	(game-time < 60)
	(up-compare-goal unit-goal != my-unique-unit-line)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(random-number >= 50)
	(or
		(random-number >= 80)
		(goal nr-map-goal 1)
	)
	(game-time > 15)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal nr-map-goal -1)
	(random-number >= 25)
	(random-number < 35)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal strategy-goal rush)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
#end-if; spanish
#load-if-defined TEUTONIC-CIV
#load-if-defined UP-1-PLAYER-TEAM
(defrule
	(goal unit-goal knight)
	(goal control-goal 0)
	(building-type-count castle > 0)
	(strategic-number sn-archer-threat < 2)
	(up-research-status c: ri-paladin < research-pending)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#else
(defrule
	(goal unit-goal knight)
	(goal control-goal 0)
	(building-type-count castle > 0)
	(strategic-number sn-archer-threat < 3)
	(goal anti-cavalry-threat-goal 1)
	(up-research-status c: ri-heavy-scorpion < research-pending)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal knight)
	(goal control-goal 0)
	(building-type-count castle > 0)
	(or
		(players-unit-type-count target-player spearman-line > 35)
		(players-unit-type-count target-player camel-line > 24)
	)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
(defrule
	(goal unit-goal knight)
	(goal control-goal my-unique-unit-line)
	(or
		(goal anti-cavalry-threat-goal 1)
		(strategic-number sn-infantry-threat >= 1)
	)
	(nor
		(players-civ every-enemy hun); dont switch to TK vs ca civs
		(strategic-number sn-archer-threat > 1)
	)
	(building-type-count castle > 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal strategy-goal flush)
=>
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(or
		(building-type-count stone-wall > 15)
		(random-number < 6)
	)
	(game-time > 13)
	(game-time < 60)
	(random-number <= 30)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number >= 70)
	(goal position-goal pocket)
	(game-time > 13)
	(population-cap >= 200)
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 0)
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(and
			(random-number >= 80)
			(nor
				(players-civ any-enemy briton)
				(players-civ any-enemy mayan)
			)
		)
		(and
			(building-type-count castle > 1)
			(goal unit-goal monk)
		)
	)
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal 1)
	(not (goal ranged-unit-type-goal monk))
	(game-time > 25)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
#end-if;teutonic
#load-if-defined TURKISH-CIV
(defrule
	(goal nr-map-goal -1)
	(random-number < 40)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
(defrule
	(or
		(and
			(or
				(goal ffa-game-goal 1)
				(and
					(random-number >= 50)
					(goal nr-map-goal 1)
				)
			)
			(goal strategy-goal flush)
		)
		(regicide-game)
	)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal 0)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age == feudal)
	(players-unit-type-count any-enemy spearman-line > 6)
=>
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal strategy-goal flush)
	(goal unit-goal default-ranged)
=>
	(set-goal unit-goal knight)
)
(defrule
	(goal unit-goal knight)
	(goal control-goal militiaman-line)
	(players-unit-type-count any-enemy spearman-line > 30)
	(strategic-number sn-archer-threat < 2)
	(research-completed ri-champion)
	(building-type-count-total barracks >= 3)
=>
	(set-goal unit-goal militiaman-line)
	(chat-to-player my-player-number "switch to militiaman-line")
)
(defrule
	(current-age == dark-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count stone-wall > 15)
	(game-time > 13)
	(random-number < 50)
=>
	(set-goal strategy-goal fast-imp)
	(set-goal unit-goal gunpowder-units)
	(set-goal ranged-unit-type-goal 0)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(current-age >= castle-age)
	(or
		(game-time > 2700)
		(death-match-game)
	)
	(nand
		(goal strategy-goal fast-imp)
		(current-age-time < 900)
	)
	(goal control-goal 0)
	(not (player-in-game any-ally))
=>
	(set-goal control-goal militiaman-line)
)
#load-if-defined UP-2-PLAYER-GAME
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total stone-wall > 15)
	(random-number > 80)
	(or
		(players-civ every-enemy aztec)
		(players-civ every-enemy saracen)
	)
=>
	(set-goal position-goal pocket); pretend, stay in dark a little longer and use extra resources on some early scouts to stop mush
	(set-goal control-goal aggressive-rush)
	(set-goal strategy-goal rush)
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
(defrule
	(current-age == castle-age)
	(goal unit-goal scout-cavalry)
=>
	(set-goal unit-goal knight)
	(disable-self)
)
#end-if
(defrule
	(game-time > 20)
	(game-time < 60)
	(goal position-goal flank)
	(goal strategy-goal flush)
	(up-allied-goal any-ally strategy-goal == boom)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
#end-if
#load-if-defined VIKING-CIV
#load-if-defined UP-1-PLAYER-TEAM
(defrule
	(random-number < 30)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(disable-self)
)
#else
(defrule
	(random-number < 30)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(disable-self)
)
#end-if
#load-if-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed); bug fix in maps that were previously falsely detected as water maps
	(goal strategy-goal flush)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(disable-self)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(current-age < castle-age)
	(not (goal strategy-goal flush))
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age == fc-transit)
	(military-population < 15)
	(not (goal unit-goal knight))
=>
	(set-goal unit-goal knight)
	(set-goal control-goal militiaman-line)
	(chat-to-player my-player-number "switch to knight")
)
#load-if-defined UP-GAME-AGE2-X2
(defrule
	(goal control-goal 0)
	(goal strategy-goal boom)
	(civilian-population > 90)
	(strategic-number sn-cavalry-threat > 2)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
#end-if
(defrule
	(goal control-goal 0)
	(or
		(and
			(civilian-population > 90)
			(or
				(strategic-number sn-current-age >= ci-transit)
				(and
					(food-amount > 400)
					(gold-amount < 200)
				)
			)
		)
		(or
			(goal anti-cavalry-threat-goal 1)
			(goal enemy-goal eagle-warrior)
		)
	)
	(not (goal strategy-goal boom))
=>
	(set-goal control-goal militiaman-line)
)
(defrule
	(goal control-goal 0)
	(or
		(or
			(goal enemy-goal eagle-warrior)
			(and
				(players-unit-type-count any-enemy huskarl-line > 4)
				(civilian-population > 60)
			)
		)
		(and
			(research-completed ri-arbalest)
			(research-completed ri-ring-archer-armor)
		)
	)
	(goal strategy-goal boom)
=>
	(set-goal control-goal militiaman-line)
)
(defrule
	(civilian-population >= 60)
	(research-completed ri-long-swordsman)
	(not (goal unit-goal militiaman-line))
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal militiaman-line)
	(chat-to-player my-player-number "switch to militiaman-line")
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal default-unit)
	(current-age < castle-age)
=>
	(set-goal unit-goal knight)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal nr-map-goal 1)
	(game-time > 25)
=>
	(set-goal unit-goal archer)
	(set-goal position-goal pocket); pretend
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(game-time > 25)
	(game-time < 60)
	(building-type-count castle > 0)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal boom)
	(disable-self)
)
#end-if; viking-civ
#load-if-defined INCAN-CIV
(defrule
	(or
		(strategic-number sn-current-age >= ci-transit)
		(and
			(current-age == feudal-age)
			(goal enemy-goal flush)
		)
	)
	(or
		(goal strategy-goal boom)
		(goal strategy-goal fast-imp)
	)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(players-building-type-count any-enemy watch-tower > 3)
		(and
			(players-unit-type-count every-enemy skirmisher-line > 7)
			(or
				(players-unit-type-count every-enemy skirmisher-line > 15)
				(game-time < 1500)
			)
		)
	)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number < 40)
	(or
		(random-number > 20)
		(goal nr-map-goal 1)
	)
	(game-time > 13)
=>
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number >= 40)
	(or
		(random-number < 80)
		(goal nr-map-goal 1)
	)
	(game-time > 13)
=>
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(current-age == castle-age)
	(goal strategy-goal boom)
	(building-type-count-total town-center >= tc-level-three)
=>
	(set-goal strategy-goal fast-imp)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(strategic-number sn-cavalry-threat == 0)
	(strategic-number sn-infantry-threat > 0)
	(not (research-completed ri-arbalest))
=>
	(set-goal ranged-unit-type-goal slinger)
	(disable-self)
)
#load-if-not-defined UP-POCKET-POSITION
#load-if-not-defined UP-1-PLAYER-TEAM
(defrule	
	(goal strategy-goal boom)
	(goal unit-goal archer)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(goal nr-map-goal -1)
=>
	(set-goal strategy-goal flush)
)
(defrule	
	(goal strategy-goal boom)
	(goal unit-goal eagle-warrior)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(goal nr-map-goal -1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal unit-goal rush)
)
#end-if
#end-if
(defrule
	(random-number >= 90)
	(goal ffa-game-goal -1)
	(building-type-count-total castle == 0)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(dropsite-min-distance stone < 5)
	(building-type-count-total town-center >= tc-level-three)
	(nor
		(goal unit-goal my-unique-unit-line)
		(goal control-goal shot)
	)
	(or
		(or
			(strategic-number sn-cavalry-threat > 2)
			(strategic-number sn-infantry-threat > 2)
		)
		(and
			(goal unit-goal archer)
			(strategic-number sn-current-age >= ci-transit)
		)
	)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(chat-to-player my-player-number "prepare for unique-units")
	(disable-self)
)
(defrule
	(building-type-count castle > 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
	(chat-to-player my-player-number "switch to unique-units")
	(disable-self)
)
#end-if; INCAN-CIV
#load-if-defined MAGYAR-CIV
(defrule
	(goal strategy-goal flush)
=>
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal strategy-goal flush)
	(random-number > 70)
=>
	(set-goal unit-goal knight)
	(chat-to-player my-player-number "switch to knights")
	(disable-self)
)
(defrule
	(or
		(strategic-number sn-current-age >= ci-transit)
		(building-type-count-total town-center >= tc-level-four)
	)
	(dropsite-min-distance stone < 5)
=>
	(set-goal uu-up-goal 1)
	(set-goal control-goal my-unique-unit-line)
)
(defrule
	(game-time > 13)
	(random-number >= 70)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal cavalry-archer)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(set-goal control-goal my-unique-unit-line)
	(disable-self)
)
(defrule
	(or
		(regicide-game)
		(goal nr-map-goal 1)
	)
	(game-time > 13)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal cavalry-archer)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(building-type-count castle == 0)
	(building-type-count stone-wall-line > 15)
	(or
		(players-civ every-enemy aztec)
		(players-civ every-enemy saracen)
	)
	(game-time >= 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal scout-cavalry)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(game-time > 13)
	(game-time < 60)
	(or
		(or
			(players-civ every-enemy hun)
			(players-civ every-enemy mongol)
		)
		(or
			(or
				(players-civ every-enemy persian)
				(players-civ every-enemy teutonic)
			)
			(or
				(players-civ every-enemy frankish)
				(players-civ every-enemy magyar)
			)
		)
	)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(disable-self)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(goal nr-map-goal -1)
	(random-number > 60)
	(game-time < 13)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
#else
(defrule
	(goal nr-map-goal -1)
	(random-number < 30)
	(game-time > 13)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
#end-if
(defrule
	(or
		(goal unit-goal skirmisher)
		(goal unit-goal archer)
	)
	(building-type-count stable > 1)
=>
	(set-goal unit-goal knight)
	(chat-to-player my-player-number "enable camels")
)
(defrule
	(goal unit-goal skirmisher)
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone < 6)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(or
		(and
			(goal unit-goal knight)
			(game-time > 1800)
		)
		(and
			(goal unit-goal scorpion)
			(building-type-count-total town-center >= tc-level-four)
		)
	)
	(dropsite-min-distance stone < 6)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(or
		(goal unit-goal knight)
		(goal unit-goal scorpion)
	)
	(building-type-count castle > 0)
	(or
		(building-type-count castle > 1)
		(goal unit-goal knight)
	)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
)
(defrule
	(food-amount > 150)
	(or
		(gold-amount < 50)
		(food-amount > 300)
	)
	(or
		(goal unit-goal monk)
		(goal strategy-goal flush)
	)
	(or
		(players-unit-type-count any-enemy eagle-warrior-line > 7)
		(goal enemy-goal eagle-warrior)
	)
=>
	(set-goal unit-goal militiaman-line)
	(chat-to-player my-player-number "long-swordsman to counter EW rush")
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == dark)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number > 80)
	(or
		(goal nr-map-goal 1)
		(random-number > 90)
	)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(goal nr-map-goal 1)
		(goal position-goal pocket)
	)
	(random-number < 80)
	(random-number > 60)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal scorpion)
	(set-goal position-goal pocket)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number < 15)
	(game-time < 60)
	(game-time > 13)
=>
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(set-goal strategy-goal rush)
	(disable-self)
)
#end-if; slavic-civ
#load-if-defined ITALIAN-CIV
(defrule
	(game-time < 60)
	(game-time > 16)
	(or
		(or
			(goal nr-map-goal 1)
			(random-number < 40)
		)
		(and
			(goal strategy-goal flush)
			(up-allied-goal any-ally strategy-goal == boom)
		)
	)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(goal nr-map-goal -1)
	(random-number > 60)
	(game-time > 13)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(disable-self)
)
#end-if
(defrule
	(goal nr-map-goal -1)
	(random-number >= 40)
	(random-number < 61)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(random-number < 10)
	(game-time > 20)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(goal unit-goal archer)
	(strategic-number sn-cavalry-threat > 1)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(goal control-goal my-unique-unit-line)
	(building-type-count castle > 0)
	(not (goal unit-goal gunpowder-units))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(or
		(strategic-number sn-infantry-threat > 2)
		(players-civ every-enemy gothic)
	)
=>
	(set-goal unit-goal gunpowder-units)
)
#end-if ;italy
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(or
		(game-time < 850)
		(and
			(building-type-count-total monastery > 0)
			(and
				(players-current-age focus-player == feudal-age)
				(players-military-population focus-player < 2)
			)
		)
	)
	(strategic-number sn-current-age >= fc-transit)
	(goal unit-goal eagle-warrior)
	(goal control-goal 0)
=>
	(set-goal control-goal aggressive-rush)
	(chat-to-player my-player-number "aggressive EW rush")
)
#end-if
#load-if-not-defined UP-POCKET-POSITION
#load-if-not-defined BRITON-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(goal strategy-goal boom)
	(goal unit-goal my-unique-unit-line)
	(goal train-civ-goal 1)
	(strategic-number sn-resource-control == 0)
	(players-military-population every-enemy > 3)
	(players-building-type-count every-enemy town-center < 2)
	(unit-type-count-total my-unique-unit-line < 3)
	(building-type-count castle > 0)
	(building-type-count stone-wall-line < 15)
	(current-age-time < 300)
	(current-age == castle-age)
	(food-amount < unique-unit-food)
=>
	(set-goal train-civ-goal -1)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if ; NOT MICHI
#end-if ; NOT DM
#load-if-defined DEATH-MATCH
#load-if-defined KOREAN-CIV
(defrule
	(starting-age < imperial-age)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal militiaman-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
	(strategic-number sn-infantry-threat > 1)
=>
	(set-goal ranged-unit-type-goal gunpowder-units)
	(disable-self)
)
#end-if
#end-if
#load-if-not-defined BRITON-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined VIKING-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined INDIAN-CIV
#load-if-defined UP-MICHI-STYLE
(defrule
	(or
		(taunt-detected any-computer 230)
		(taunt-detected any-human 230)
	)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(chat-to-player this-any-computer "strategy changed to mush")
	(chat-to-player this-any-human "strategy changed to mush")
	(acknowledge-taunt this-any-computer 230)
	(acknowledge-taunt this-any-human 230)
)
#else
(defrule
	(or
		(taunt-detected any-computer 230)
		(taunt-detected any-human 230)
	)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(chat-to-player this-any-computer "strategy changed to mush")
	(chat-to-player this-any-human "strategy changed to mush")
	(acknowledge-taunt this-any-computer 230)
	(acknowledge-taunt this-any-human 230)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
	(or
		(strategic-number sn-archer-threat > 1)
		(and
			(players-building-type-count any-enemy archery-range > 1)
			(goal enemy-goal skirmisher)
		)
	)
	(strategic-number sn-infantry-threat == 0)
=>
	(set-goal unit-goal skirmisher)
	(chat-to-player my-player-number "switch to skirmisher")
)
#load-if-not-defined AZTEC-CIV
#load-if-not-defined VIKING-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(or
		(goal strategy-goal boom); not loaded civ change theirs in the civ specific strategy part above
		(and
			(goal strategy-goal fast-imp)
			(up-compare-goal unit-goal != gunpowder-units)
		)
	)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal strategy-goal rush)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(current-age < castle-age)
	(goal unit-goal my-unique-unit-line); change it or it will bug as no extra stone will be gathered during castle age advance
	(building-type-count-total castle == 0)
=>
	(set-goal unit-goal militiaman-line)
)
#end-if
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined INDIAN-CIV
(defrule
	(goal strategy-goal rush)
	(or
		(goal unit-goal skirmisher)
		(goal unit-goal mix)
	)
	(not (goal control-goal my-unique-unit-line))
	(research-available imperial-age)
	(dropsite-min-distance stone < 6)
=>
	(set-goal unit-goal default-unit)
	(chat-to-player my-player-number "switch to default unit")
)
#end-if
#end-if
#end-if
#end-if
(defrule
	(goal strategy-goal flush)
	(goal unit-goal scout-cavalry)
	(gold-amount > 250)
	(building-type-count stable > 0)
=>
	(set-goal unit-goal skirmisher); use this to decrease gold gatherer percentage
)
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CELTIC-CIV
(defrule
	(goal strategy-goal flush)
	(or
		(goal unit-goal scout-cavalry)
		(goal unit-goal skirmisher)
	)
	(strategic-number sn-current-age == fc-transit)
=>
	(set-goal unit-goal default-ranged)
	(chat-to-player my-player-number "switch back to default ranged")
)
#end-if
(defrule
	(goal strategy-goal flush)
	(goal unit-goal default-ranged)
	(or
		(or
			(civ-selected frankish)
			(civ-selected persian)
		)
		(or
			(civ-selected spanish)
			(civ-selected teutonic)
		)
	)
=>
	(set-goal unit-goal knight)
	(chat-to-player my-player-number "switch to knights")
)
(defrule
	(goal strategy-goal flush)
	(goal unit-goal default-ranged)
	(or
		(or
			(civ-selected gothic)
			(civ-selected japanese)
		)
		(or
			(civ-selected viking)
			(civ-selected celtic)
		)
	)
=>
	(set-goal unit-goal militiaman-line)
	(chat-to-player my-player-number "switch to militiaman-line")
)
#end-if
#else ; not PIDM
(defrule
	(not (goal unit-goal cavalry-archer))
	(research-completed ri-bloodlines)
	(research-completed ri-paladin)
		
=>
	(set-goal unit-goal knight)
)
(defrule
	(nor
		(research-completed ri-bloodlines)
		(research-completed ri-paladin)
	)
=>
	(set-goal unit-goal my-unique-unit-line)
)
#end-if ;PIDM
#load-if-defined UP-MICHI-STYLE
#load-if-defined AZTEC-CIV
(defrule
	(random-number < 40)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(random-number >= 40)
	(random-number < 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(random-number >= 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
#end-if
#load-if-defined BRITON-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(random-number < 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(random-number >= 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(can-research-with-escrow my-unique-research)
	(research-completed my-unique-unit-upgrade)
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-archer-threat > 1)
=>
	(set-goal ranged-unit-type-goal scorpion)
	(disable-self)
)
#end-if
#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined HUN-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(disable-self)
)
#end-if
#load-if-defined JAPANESE-CIV
(defrule
	(random-number < 40)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 40)
	(random-number < 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined KOREAN-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined MONGOL-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(random-number < 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(random-number < 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 80)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(can-research-with-escrow my-unique-research)
	(or
		(research-completed my-unique-unit-upgrade)
		(unit-type-count my-unique-unit-line > 4)
	)
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined SPANISH-CIV
(defrule
	(random-number < 20)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 20)
	(random-number < 60)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 60)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
#end-if
#load-if-defined TEUTONIC-CIV
(defrule
	(random-number < 20)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 20)
	(random-number < 60)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 60)
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(research-completed my-unique-unit-upgrade)
=>
	(set-goal unit-goal gunpowder-units)
	(set-goal control-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
#end-if
#load-if-defined VIKING-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined INCAN-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal archer)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
#end-if
#load-if-defined ITALIAN-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal gunpowder-units)
	(set-goal control-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined MAGYAR-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal control-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(strategic-number sn-current-age == dark)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#load-if-not-defined INDIAN-CIV
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal knight)
	(or
		(and
			(not (research-completed ri-cavalier))
			(or
				(food-amount < 1300)
				(gold-amount < 750)
			)
		)
		(research-available ri-paladin)
	)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = ri-paladin")
	(set-difficulty-parameter ability-to-dodge-missiles 0); don't dodge, go melee instead
)
#else
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal knight)
	(unit-type-count camel-line > 7)
	(or
		(and
			(up-research-status c: ri-heavy-camel < research-complete)
			(or
				(food-amount < 1200)
				(gold-amount < 600)
			)
		)
		(research-available ri-imperial-camel)
	)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = ri-imperial-camel")
	(set-difficulty-parameter ability-to-dodge-missiles 0); don't dodge, go melee instead
)
#end-if
(defrule
	(nand
		(civ-selected mayan)
		(population < max-civ-pop)
	)
	(building-type-count castle > 0)
	(research-available my-unique-unit-upgrade)	
	(or
		(goal unit-goal my-unique-unit-line)
		(goal control-goal my-unique-unit-line)
	)
		
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = my-unique-unit-upgrade")
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal strategy-goal boom)
=>
	(set-goal strategy-goal rush)
	(set-strategic-number sn-free-siege-targeting 1)
)
#end-if ; MICHI MAP
#load-if-defined UP-GAME-AGE2-X2
(defrule
	(true)
=>
	(set-goal aofe-game-goal 1)
	(disable-self)
)
(defrule
	(gold-amount < 50)
	(unit-type-count fishing-ship > 10)
	(research-completed ri-hand-cart)
	(can-research ri-gillnets)
=>
	(research ri-gillnets)
)
(defrule
	(or
		(unit-type-count eagle-warrior > 12)
		(strategic-number sn-resource-control == ri-elite-eagle-warrior)
	)
	(can-research-with-escrow ri-eagle-warrior)
=>
	(up-release-escrow)
	(research ri-eagle-warrior)
)
(defrule
	(or
		(or
			(unit-type-count genoese-crossbowman > 14)
			(unit-type-count kamayuk > 14)
		)
		(or
			(unit-type-count magyar-huszar > 14)
			(or
				(unit-type-count elephant-archer > 14)
				(unit-type-count boyar > 14)
			)
		)
	)
	(can-research-with-escrow my-unique-unit-upgrade);fix for the fact that new uu don't count as my-uu-line
=>
	(up-release-escrow)
	(research my-unique-unit-upgrade)
	(set-goal uu-up-goal 0)
)
#load-if-defined AZTEC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count skirmisher-line > 15)
	(or
		(and
			(unit-type-count battering-ram-line > 3);  don't get this when we need siege
			(goal enemy-fortifications-goal 0)
		)
		(unit-type-count trebuchet-set > 0)
	)
	(can-research-with-escrow ri-atlatl)
=>
	(up-release-escrow)
	(research ri-atlatl)
)
(defrule
	(building-type-count castle > 0)
	(research-available my-unique-research)
	(research-completed ri-blast-furnace)
	(research-completed ri-plate-mail)
	(nand
		(or
			(unit-type-count eagle-warrior-line > 15)
			(unit-type-count heavy-eagle-warrior > 15); aofe
		)
		(research-available ri-elite-eagle-warrior)
	)
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(research-completed ri-blast-furnace)
	(research-completed ri-plate-mail)
	(can-research-with-escrow my-unique-research)
	(nand		
		(or
			(unit-type-count eagle-warrior-line > 15)
			(unit-type-count heavy-eagle-warrior > 15)
		)
		(research-available ri-elite-eagle-warrior)
	)
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined BRITON-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count trebuchet-set > 3)
	(research-completed my-unique-research)
	(can-research ri-war-wolf)
=>
	(research ri-war-wolf)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(building-type-count castle > 0)
	(research-available my-unique-research)
	(population >= del-civ-pop)
=>
	(set-strategic-number sn-resource-control 2)
)
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count fire-ship-line > 3)
	(can-research-with-escrow ri-greek-fire)
=>
	(up-release-escrow)
	(research ri-greek-fire)
)
(defrule
	(up-compare-goal ranged-unit-type-goal != archer)
	(research-completed ri-halberdier)
	(food-amount < 300)
	(gold-amount > 700)
	(wood-amount > 400)
=>
	(set-goal ranged-unit-type-goal archer)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(population > max-civ-pop)
	(can-research ri-stronghold)
=>
	(research ri-stronghold)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(building-type-count bombard-tower > 1)
	(can-research ri-great-wall)
=>
	(research ri-great-wall)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(population > del-civ-pop)
		(death-match-game)
	)
	(can-research ri-chivalry)
=>
	(research ri-chivalry)
)
(defrule
	(unit-type-count trade-cart > 20)
	(goal anti-cavalry-threat-goal 1)
	(goal unit-goal militiaman-line)
	(research-completed ri-cavalier)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
)
(defrule
	(unit-type-count trade-cart > 20)
	(goal anti-cavalry-threat-goal 1)
	(goal control-goal militiaman-line)
=>
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
)
#end-if
#load-if-defined GOTHIC-CIV
#end-if
#load-if-defined HUN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal my-unique-unit-line)
	(can-research ri-marauders)
=>
	(research ri-marauders)
)
#end-if
#load-if-defined JAPANESE-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(building-type-count watch-tower > 3)
	(or
		(research-completed ri-masonry)
		(goal under-attack-goal 1)
	)
	(can-research ri-yasama)
=>
	(research ri-yasama)
)
(defrule
	(research-completed my-unique-unit-upgrade)
	(unit-type-count trebuchet-set >= 4)
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow wood)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined KOREAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count turtle-ship-line > 3)
	(can-research ri-panokseon)
=>
	(research ri-panokseon)
)
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count archer-line > 14)
	(goal team-coordination-goal 1)
	(can-research ri-obsidian-arrows)
=>
	(research ri-obsidian-arrows)
)
#end-if
#load-if-defined MONGOL-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(wood-amount > 600)
	(can-research ri-nomads)
=>
	(research ri-nomads)
)
(defrule
	(building-type-count house > 0)
	(research-completed ri-nomads)
=>
	(up-delete-objects c: house c: 32767)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-murder-holes)
	(can-research ri-boiling-oil)
=>
	(research ri-boiling-oil)
)
(defrule
	(can-research-with-escrow my-unique-research)
	(or
		(research-completed my-unique-unit-upgrade)
		(unit-type-count my-unique-unit-line > 4)
	)
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count monk > 12)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(gold-amount < 500)
	)
	(can-research ri-madrasah)
=>
	(research ri-madrasah)
)
#end-if
#load-if-defined SPANISH-CIV
(defrule
	(or
		(strategic-number sn-resource-control <= 2)
		(strategic-number sn-resource-control == ri-inquisition)
	)
	(unit-type-count monk > 7)
	(strategic-number sn-current-age >= ci-transit)
	(can-research-with-escrow ri-inquisition)
=>
	(up-release-escrow)
	(research ri-inquisition)
)
(defrule	
	(random-number < 90)
	(goal strategy-goal boom)
	(goal unit-goal my-unique-unit-line)
	(current-age == castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-focus-player-number g:= closest-enemy-goal)
	(or
		(or
			(players-civ focus-player gothic)
			(players-civ focus-player indian)
		)
		(players-civ focus-player persian)
	)
=>
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(population > del-civ-pop)
	(current-age-time > 300)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(set-strategic-number sn-allow-civilian-defense 3)
)
#end-if
#load-if-defined TEUTONIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
	(can-research ri-ironclad)
=>
	(research ri-ironclad)
)
(defrule
	(goal unit-goal knight)
	(goal control-goal 0)
	(strategic-number sn-archer-threat >= 2)
	(goal anti-cavalry-threat-goal 1)
	(up-research-status c: my-unique-unit-upgrade < research-pending)
=>
	(set-goal control-goal 0)
	(set-goal uu-up-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(disable-self)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count cavalry-archer-units > high-min-number-upgrade)
	(can-research ri-sipahi)
=>
	(research ri-sipahi)
)
#end-if
#load-if-defined VIKING-CIV
(defrule
	(strategic-number sn-resource-control < 3)
	(unit-type-count berserk-line > mid-min-number-upgrade)
	(research-completed my-unique-unit-upgrade)
	(strategic-number sn-cavalry-threat > 1)
	(can-research ri-chieftains)
=>
	(research ri-chieftains)
)
(defrule
	(can-research-with-escrow my-unique-research)
	(research-completed my-unique-unit-upgrade)
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined MAGYAR-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(game-time > 3000)
	)
	(can-research-with-escrow ri-mercenaries)
=>
	(up-release-escrow)
	(research ri-mercenaries)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count cavalry-archer-units > high-min-number-upgrade)
	(goal unit-goal cavalry-archer)
	(can-research ri-recurve-bow)
=>
	(research ri-recurve-bow)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal 1)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(building-type-count-total stone-wall < 15)
	(up-allied-goal every-ally unit-goal != archer)
	(random-number < 3)
=>
	(set-goal unit-goal archer)
	(set-goal strategy-goal rush)
	(disable-self)
)
#end-if
#load-if-defined INCAN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(strategic-number sn-resource-control < 1)
		(goal hostilities-goal 1)
	)
	(or
		(unit-type-count skirmisher-line > 15)
		(unit-type-count slinger > 9)
	)
	(can-research ri-andean-sling)
=>
	(research ri-andean-sling)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-conscription)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
(defrule
	(dropsite-min-distance stone < 5)
	(or
		(up-compare-goal control-goal != shot)
		(research-completed ri-elite-eagle-warrior)
	)
	(strategic-number sn-cavalry-threat > 1)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(chat-to-player my-player-number "prepare for unique-units")
	(disable-self)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(or
		(strategic-number sn-resource-control <= 2)
		(strategic-number sn-resource-control == ri-orthodoxy)
	)
	(unit-type-count monk > 7)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(goal hostilities-goal 1)
	)
	(can-research-with-escrow ri-orthodoxy)
=>
	(up-release-escrow)
	(research ri-orthodoxy)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(research-completed ri-halberdier)
		(research-completed ri-champion)
	)
	(unit-type-count infantry-units > 20)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count camel-line > 7)
	(can-research-with-escrow ri-imperial-camel)
=>
	(up-release-escrow)
	(research ri-imperial-camel)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(gold-amount < 100)
		(strategic-number sn-current-age >= ci-transit)
	)
	(can-research ri-sultans)
=>
	(research ri-sultans)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count hand-cannoneer > 7)
	(can-research ri-shatagni)
=>
	(research ri-shatagni)
)
#end-if
#load-if-defined ITALIAN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(goal hostilities-goal 1)
		(strategic-number sn-resource-control < 1)
	)
	(or
		(unit-type-count genoese-crossbowman > 10)
		(research-completed my-unique-unit-upgrade)
	)
	(can-research ri-pavise)
=>
	(research ri-pavise)
)
#end-if
#end-if
(defrule
	(strategic-number sn-current-age == castle)
	(game-time > 1800)
	(goal unit-goal monk)
	(wood-amount > 400)
	(food-amount > 800)
	(gold-amount < 300)
=>
	(set-goal unit-goal skirmisher)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
)
(defrule
	(game-time > 3000)
	(goal ranged-unit-type-goal monk)
	(unit-type-count trade-cart < 6)
	(dropsite-min-distance gold > 10)
=>
	(set-goal ranged-unit-type-goal 0)
)

#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined DEATH-MATCH
#load-if-not-defined DEFEND-WONDER
#load-if-defined DIFFICULTY-HARD
#load-if-not-defined HIGH-RESOURCES-START
#load-if-not-defined FORTRESS-MAP
(defrule
	(current-age == dark-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal position-goal pocket)
	(game-time >= sling-time)
	(random-number > sling-number)
	(or
		(and
			(or
				(players-civ any-ally aztec)
				(players-civ any-ally mayan)
			)
			(up-allied-goal every-ally control-goal != shot)
		)
		(up-allied-goal any-ally control-goal == aggressive-rush)
	)
=>
	(chat-to-player this-any-ally "237")
	(chat-to-player my-player-number "237")
	(disable-self)
)
#load-if-defined UP-2-PLAYER-TEAM
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(up-compare-const sling-two == 1) 
	(random-number > sling-number)
	(game-time > sling-time)
	(strategic-number sn-current-age <= df-transit)
	(building-type-count-total barracks == 0)
	(up-compare-goal enemy-goal != flush)
	(up-allied-goal any-ally control-goal == aggressive-rush)
=>
	(chat-to-player this-any-ally "237")
	(chat-to-player my-player-number "237")
	(disable-self)
)
#end-if
#load-if-not-defined TURKISH-CIV
#load-if-not-defined SARACEN-CIV
(defrule
	(or
		(and
			(taunt-detected my-player-number 237)
			(taunt-detected any-ally 38)
		)
		(taunt-detected any-human-ally 38)
	)
=>
	(set-goal unit-goal skirmisher)
	(set-goal strategy-goal sling)
	(set-goal ranged-unit-type-goal 0)
	(set-goal control-goal 0)
	(acknowledge-taunt my-player-number 237)
	(chat-to-allies "I sling")
)
#else
(defrule
	(or
		(and
			(taunt-detected my-player-number 237)
			(taunt-detected any-ally 38)
		)
		(taunt-detected any-human-ally 38)
	)
=>
	(set-goal unit-goal gunpowder-units)
	(set-goal strategy-goal sling)
	(set-goal ranged-unit-type-goal 0)
	(set-goal control-goal 0)
	(acknowledge-taunt my-player-number 237)
	(chat-to-allies "I sling")
)
#end-if
#else
(defrule
	(or
		(and
			(taunt-detected my-player-number 237)
			(taunt-detected any-ally 38)
		)
		(taunt-detected any-human-ally 38)
	)
=>
	(set-goal unit-goal gunpowder-units)
	(set-goal strategy-goal sling)
	(set-goal ranged-unit-type-goal 0)
	(set-goal control-goal 0)
	(acknowledge-taunt my-player-number 237)
	(chat-to-allies "I sling")
)
#end-if
(defrule
	(or
		(game-time > 3000)
		(food-amount > 500)
	)
	(game-time > 1500)
	(or
		(unit-type-count villager > 80)
		(population-cap < 200)
	)
	(goal strategy-goal sling)
=>
	(set-goal strategy-goal fast-imp); don't train a large castle age army after a long time of slinging
)
(defrule
	(or
		(game-time > 3000)
		(food-amount > 500)
	)
	(game-time > 1500)
	(unit-type-count villager < 80)
	(population-cap >= 200)
	(goal strategy-goal sling)
=>
	(set-goal strategy-goal boom)
)
(defrule
	(goal control-goal shot)
	(or
		(and
			(population < 20); debug, as computer may tribute resigned allies
			(game-time > 900)
		)
		(and
			(current-age == imperial-age)
			(or
				(goal train-civ-goal -1); delete excess villager mode, so no resources needed anymore
				(and
					(research-completed ri-elite-eagle-warrior)
					(population > del-civ-pop)
				)
			)
		)
	)
=>
	(set-goal control-goal 0)
)
#load-if-not-defined INDIAN-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(goal position-goal flank)
	(goal control-goal aggressive-rush)
	(taunt-detected any-ally 237)
	(up-allied-goal every-ally control-goal != shot); sling/shot code doesn't work for two shots
=>
	(acknowledge-taunt this-any-ally 237)
	(chat-to-player this-any-ally "38")
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(set-goal control-goal shot)
	(chat-to-allies "I am shot")
)
#else
(defrule
	(goal position-goal flank)
	(up-compare-goal control-goal != shot)
	(up-allied-goal every-ally control-goal != shot)
	(taunt-detected any-ally 237)
=>
	(acknowledge-taunt this-any-ally 237)
	(chat-to-player this-any-ally "38")
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal shot)
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(chat-to-allies "I am shot")
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(goal control-goal shot)
=>
	(set-goal strategy-goal fast-imp)
)
#end-if
#else
(defrule
	(goal position-goal flank)
	(up-compare-goal control-goal != shot)
	(up-allied-goal every-ally control-goal != shot)
	(taunt-detected any-ally 237)
=>
	(acknowledge-taunt this-any-ally 237)
	(chat-to-player this-any-ally "38")
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal shot)
	(chat-to-allies "I am shot")
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(goal control-goal shot)
=>
	(set-goal strategy-goal fast-imp)
)
#end-if
#else
(defrule
	(goal position-goal flank)
	(taunt-detected any-ally 237)
	(up-compare-goal control-goal != shot)
	(up-allied-goal every-ally control-goal != shot)
=>
	(acknowledge-taunt this-any-ally 237)
	(chat-to-player this-any-ally "38")
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal monk)
	(set-goal uu-up-goal 1)
	(set-goal control-goal shot)
	(chat-to-allies "I am shot")
)
#end-if
#else
(defrule
	(goal position-goal flank)
	(taunt-detected any-ally 237)
	(up-compare-goal control-goal != shot)
	(up-allied-goal every-ally control-goal != shot); sling/shot code doesn't work for two shots
=>
	(acknowledge-taunt this-any-ally 237)
	(chat-to-player this-any-ally "38")
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal shot)
	(chat-to-allies "I am shot")
)
#end-if
#else
(defrule
	(goal position-goal flank)
	(up-compare-goal control-goal != shot)
	(up-allied-goal every-ally control-goal != shot)
	(taunt-detected any-ally 237)
=>
	(acknowledge-taunt this-any-ally 237)
	(chat-to-player this-any-ally "38")
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal shot)
	(chat-to-allies "I am shot")
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(goal control-goal shot)
=>
	(set-goal strategy-goal fast-imp)
)
#end-if
#end-if
#end-if ; no fortress
#end-if ; no high-res start
#end-if ;hard
#end-if ; not wonder defend
#load-if-defined HUN-CIV
(defrule
	(strategic-number sn-current-age == df-transit)
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(player-in-game any-computer-ally)
	(or
		(or
			(up-allied-goal any-ally unit-goal == skirmisher)
			(up-allied-goal any-ally unit-goal == archer)
		)
		(up-allied-goal any-ally unit-goal == my-unique-unit-line)
	)
=>
	(set-goal unit-goal knight)
)
#end-if
(defrule
	(goal strategy-goal sling)
	(building-type-count-total market > 0)
	(building-type-count-total mining-camp > 0)
	(building-type-count-total watch-tower < 1)
	(can-build watch-tower)
=>
	(up-set-placement-data my-player-number mining-camp c: 2)
	(up-build 2 0 c: watch-tower)
	(set-strategic-number sn-maximum-stone-drop-distance 7)
	(set-strategic-number sn-object-repair-level 20481); = +1 castles + 16384 siege + 4096 towers
)
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age < fc-transit)
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(up-compare-goal position-goal != pocket)
	(up-compare-goal control-goal != aggressive-rush)
	(up-compare-goal control-goal != shot)
=>
	(set-goal control-goal aggressive-rush)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if ; no DM
#load-if-defined BALTIC-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(goal position-goal pocket)
	(or
		(game-time < 1800)
		(and
			(goal enemy-boats-goal 1)
			(unit-type-count warships < 35)
		)
	)
=>
	(set-goal strategy-goal rush)
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
)
(defrule
	(game-time > 1800)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(goal position-goal pocket)
	(or
		(goal enemy-boats-goal 0)
		(unit-type-count warships > 50)
	)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed); water secured, train land army
)
#end-if
#else
(defrule
	(strategic-number sn-resource-control <= 1)
	(building-type-count-total town-center > 0)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(can-research ri-double-bit-axe)
		(can-research ri-horse-collar)
	)
=>
	(research ri-double-bit-axe)
	(research ri-horse-collar)
)
(defrule
	(or
		(and
			(game-time > 2400)
			(up-compare-const get-lightcav == 1)
		)
		(goal monk-threat-goal 1)
	)
	(can-research ri-light-cavalry)
=>
	(research ri-light-cavalry)
)
#end-if

; end strategy section

;******************** RESOURCE MANAGEMENT AND AGE UP ********************
(defrule
	(players-unit-type-count any-enemy monk > 12)
	(or
		(players-unit-type-count any-enemy monk > 20); changed don't trigger if enemy doesn't do really lots of monks
		(game-time < 1800)
	)
	(research-available ri-heresy)
	(building-type-count monastery > 0)
=>
	(set-strategic-number sn-resource-control ri-heresy)
)
(defrule
	(or
		(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
		(building-type-count-total town-center == 0)
	)
=>
	(up-jump-rule 25)
)
(defrule
	(building-type-count town-center > 0)
	(current-age >= castle-age)
	(unit-type-count villager > villager-siege-workshop)
	(building-type-count-total siege-workshop < 1)
	(goal forward-threat-goal 1); don't check wood to block other buildings if enemy forwarded us
	(nand
		(unit-type-count ranged-units < 5)
		(strategic-number sn-military-level < 0)
	)
=>
	(set-strategic-number sn-resource-control battering-ram)
	(set-goal save-wood-goal 1)
)
(defrule
	(building-type-count-total town-center >= tc-level-two)
	(goal unit-goal my-unique-unit-line)
	(or
		(goal monk-threat-goal 1)
		(or
			(players-unit-type-count any-enemy mangonel-line > 1)
			(players-unit-type-count any-enemy scorpion-line > 4)
		)
	)
	(wood-amount >= 200)
	(current-age >= castle-age)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(wood-amount >= 200)
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 2)
	(building-type-count-total town-center < tc-level-four)
	(goal strategy-goal boom)
	(or
		(goal unit-goal knight)
		(civ-selected teutonic)
	)
	(strategic-number sn-archer-threat < 2)
=>
	(up-jump-rule 1)
)
(defrule
	(wood-amount >= 200)
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 2)
	(building-type-count-total town-center >= tc-level-two)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(and
			(strategic-number sn-archer-threat > 0)
			(goal position-goal flank)
		)
	)
	(or
		(goal unit-goal knight)
		(civ-selected teutonic)
	)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if
#end-if
(defrule
	(current-age >= castle-age)
	(wood-amount >= 200)
	(goal save-wood-goal 0)
	(goal unit-goal cavalry-archer)
	(building-type-count-total town-center == 1)
	(building-type-count-total stable == 1)
	(building-type-count-total archery-range > 3)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(building-type-count town-center > 0)
	(current-age >= castle-age)
	(or
		(strategic-number sn-military-level > 1)
		(goal team-coordination-goal 1)
	)
	(or
		(players-building-type-count any-enemy castle > 0)
		(goal unit-goal default-ranged)
	)
	(goal enemy-fortifications-goal 0)
	(strategic-number sn-military-level > 2)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal save-wood-goal 1)
)
(defrule
	(goal strategy-goal flush)
	(goal save-wood-goal 0)
	(building-type-count town-center > 0)
	(building-type-count-total monastery > 0)
	(research-completed ri-bodkin-arrow)
	(current-age >= castle-age)
	(strategic-number sn-military-level > 0)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-military-level > 1)
	(current-age == castle-age)
	(or
		(nor
			(goal strategy-goal fast-imp); don't delay fast imp or booms
			(goal strategy-goal boom)
		)
		(goal control-goal shot); except if meso shot
	)
	(building-type-count siege-workshop > 0)
	(unit-type-count-total siege-units == 0)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control battering-ram)
	(chat-to-player my-player-number "save-resources = battering-ram")
)
(defrule
	(building-type-count town-center > 0)
	(current-age >= castle-age)
	(wood-amount >= 200)
	(or
		(strategic-number sn-military-level > 1)
		(goal hostilities-goal 1)
	)
	(or
		(players-building-type-count any-enemy castle > 0)
		(goal unit-goal default-ranged)
	)
	(strategic-number sn-military-level > 2)
	(goal under-attack-goal 0)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal control-goal shot)
	(building-type-count-total town-center < tc-level-three)
	(players-building-type-count focus-player castle > 0)
=>
	(up-jump-rule 2)
)
(defrule
	(current-age >= castle-age)
	(wood-amount >= 200)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(or
		(or
			(strategic-number sn-archer-threat > 1)
			(players-unit-type-count any-enemy scorpion-line > 9)
		)
		(or
			(building-type-count-total stone-wall-line > 10)
			(players-building-type-count any-enemy castle > 0)
		)
	)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(building-type-count town-center > 0)
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(or
		(building-type-count monastery > 2); get fast imp with mush
		(or
			(goal strategy-goal fast-imp)
			(goal control-goal shot)
		)
	)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(current-age == castle-age)
	(strategic-number sn-resource-control == 0)
	(or
		(goal strategy-goal rush)
		(goal strategy-goal flush)
	)
	(strategic-number sn-military-level > 1)
	(goal unit-goal default-ranged)
	(building-type-count siege-workshop > 0)
	(unit-type-count-total battering-ram-line < 2)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control battering-ram)
	(chat-to-player my-player-number "save-resources = battering-ram")
)
(defrule
	(goal unit-goal knight)
	(building-type-count siege-workshop > 0)
	(strategic-number sn-archer-threat > 1)
	(strategic-number sn-military-level < 0)
	(unit-type-count-total mangonel-line < 1)
=>
	(up-jump-rule 7)
)
(defrule
	(goal forward-threat-goal 1)
	(building-type-count siege-workshop > 0)
	(or
		(unit-type-count-total battering-ram-line == 0)
		(players-building-type-count every-enemy watch-tower > 3)
	)
	(unit-type-count-total battering-ram-line < 3)
	(unit-type-count-total trebuchet-set == 0)
	(nand
		(strategic-number sn-military-level < 0)
		(goal under-attack-goal 1)
	)
	(civilian-population > 22)
=>
	(set-strategic-number sn-resource-control battering-ram)
	(chat-to-player my-player-number "save-resources = battering-ram")
)
(defrule
	(goal forward-threat-goal 1)
	(building-type-count siege-workshop > 0)
	(players-building-type-count every-enemy watch-tower > 5)
	(unit-type-count-total battering-ram-line < 8)
	(unit-type-count-total trebuchet-set == 0)
	(nand
		(strategic-number sn-military-level < 0)
		(goal under-attack-goal 1)
	)
=>
	(set-strategic-number sn-resource-control battering-ram)
	(chat-to-player my-player-number "save-resources = battering-ram")
)
(defrule
	(building-type-count siege-workshop > 0)
	(unit-type-count-total battering-ram-line == 0)
	(unit-type-count-total trebuchet-set == 0)
	(goal team-coordination-goal 1)
	(players-building-type-count any-enemy stone-wall > 10)
=>
	(set-strategic-number sn-resource-control battering-ram)
	(chat-to-player my-player-number "save-resources = battering-ram")
)
(defrule
	(building-type-count siege-workshop > 0)
	(unit-type-count battering-ram-line == 0)
	(or
		(up-projectile-detected 1 c:< 3500)
		(or
			(up-projectile-detected 2 c:< 3500)
			(up-projectile-detected 3 c:< 3500)
		)
	)
	(or
		(up-compare-goal under-attack-goal == 1)
		(goal forward-threat-goal 1)
	)
=>
	(set-strategic-number sn-resource-control battering-ram)
	(chat-to-player my-player-number "save-resources = battering-ram")
)
(defrule
	(strategic-number sn-resource-control < 3)
	(goal control-goal shot)
	(building-type-count siege-workshop > 0)
	(unit-type-count-total battering-ram-line == 0)
	(current-age == castle-age)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control battering-ram)
	(chat-to-player my-player-number "save-resources = battering-ram")
)
(defrule
	(current-age >= castle-age)
	(strategic-number sn-resource-control <= 2)
	(building-type-count siege-workshop > 0)
	(unit-type-count-total battering-ram-line == 0)
	(unit-type-count-total trebuchet-set == 0)
	(goal team-coordination-goal 1)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control battering-ram)
	(chat-to-player my-player-number "save-resources = battering-ram")
)
(defrule
	(or
		(and
			(goal forward-threat-goal 1)
			(unit-type-count battering-ram-line < 2)
		)
		(strategic-number sn-resource-control == battering-ram)
	)
	(can-train-with-escrow battering-ram-line)
=>
	(release-escrow wood)(release-escrow gold)
	(train battering-ram-line)
	(set-strategic-number sn-resource-control 0)
)
(defrule
	(goal increase-town-size-goal siege-workshop)
	(or 
		(or
			(goal unit-goal skirmisher)
			(goal strategy-goal boom)
		)
		(or 
			(goal unit-goal my-unique-unit-line)
			(goal unit-goal mix)
		)
	)
	(up-compare-goal forward-threat-goal != 1); don't build an aggressive siege-workshop with these strategies
	(building-type-count-total town-center < tc-level-two)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(current-age >= castle-age)
	(players-building-type-count target-player castle > 0)
	(strategic-number sn-target-evaluation-ally-proximity == 32767)
	(unit-type-count siege-units == 0)
	(up-allied-goal any-ally attacking-enemy-goal s:== sn-target-player-number)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control battering-ram)
	(chat-to-player my-player-number "save-resources = siege-workshop")
)
(defrule
	(current-age >= castle-age)
	(player-in-game any-ally)
	(military-population > 15)
	(nand
		(or
			(goal position-goal pocket)
			(goal strategy-goal boom)
		)
		(players-building-type-count any-ally siege-workshop > 0)
	)
	(players-military-population target-player < 5)
	(building-type-count-total siege-workshop < 1)
	(wood-amount < 200)
=>
	(set-goal save-wood-goal 1)
)
(defrule
	(current-age >= castle-age)
	(player-in-game any-ally)
	(military-population > 12)
	(or
		(nor
			(goal position-goal pocket)
			(goal strategy-goal boom)
		)
		(players-building-type-count target-player watch-tower > 0)
	)
	(players-military-population target-player < 5)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-goal 3)
)
#load-if-not-defined DEATH-MATCH
(defrule
	(building-type-count town-center > 0)
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(goal unit-goal archer)
	(or
		(and
			(goal control-goal aggressive-rush)
			(civ-selected mayan)
		)
		(and
			(players-building-type-count any-enemy watch-tower > 0)
			(goal strategy-goal rush)
		)
	)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(goal save-wood-goal 0)
	(building-type-count-total town-center >= tc-level-four)
	(or
		(goal ranged-unit-type-goal scorpion)
		(and
			(wood-amount > 1400)
			(research-completed ri-siege-ram)
		)
	)
	(building-type-count-total siege-workshop < 3)
	(wood-amount >= 400)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(goal save-wood-goal 0)
	(building-type-count-total town-center >= tc-level-four)
	(or
		(building-type-count-total town-center >= tc-level-five)
		(and
			(up-compare-goal strategy-goal != boom)
			(population-cap < 250)
		)
	)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(or
		(goal forward-threat-goal 1)
		(and
			(strategic-number sn-military-level < 0)
			(town-under-attack)
		)
	)
	(goal increase-town-size-goal siege-workshop)
	(can-build siege-workshop)
=>
	(up-set-placement-data my-player-number -1 c: -8)
	(up-build place-control 0 c: siege-workshop)
	(set-goal increase-town-size-goal 0)
)
(defrule
	(up-compare-goal forward-threat-goal != 1)
	(goal increase-town-size-goal siege-workshop)
	(can-build siege-workshop)
=>
	(up-set-placement-data my-player-number -1 c: 16)
	(up-build place-control 0 c: siege-workshop)
	(set-goal increase-town-size-goal 0)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 1)
	(set-goal increase-town-size-goal 0)
)
#load-if-not-defined UP-POCKET-POSITION
#load-if-not-defined GOTHIC-CIV
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-archer-threat > 0)
	(strategic-number sn-military-level < 0)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#else
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(goal unit-goal scorpion)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-defined CELTIC-CIV
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-two)
	(goal save-wood-goal 0)
	(or
		(building-type-count-total town-center >= tc-level-four)
		(and
			(or
				(goal unit-goal knight)
				(building-type-count-total town-center >= tc-level-three)
			)
			(building-type-count-total siege-workshop == 0)
		)
	)
	(building-type-count-total siege-workshop < 3)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
#else
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-five)
	(or
		(building-type-count-total siege-workshop < 3)
		(research-completed ri-heavy-scorpion)
	)
	(building-type-count-total siege-workshop < 5)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if
#load-if-defined SLAVIC-CIV
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(goal save-wood-goal 0)
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-two)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(building-type-count-total siege-workshop == 0)
	)
	(or
		(building-type-count-total town-center >= tc-level-four)
		(building-type-count-total siege-workshop == 1)
	)
	(building-type-count-total siege-workshop < 3)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age >= ci-transit)
	(unit-type-count scorpion-line > 9)
	(up-research-status c: ri-heavy-scorpion < research-pending)
	(goal unit-goal scorpion)
=>
	(set-strategic-number sn-resource-control 2)
	(set-goal save-wood-goal 1)
)
#else
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-five)
	(building-type-count-total siege-workshop < 3)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if
#load-if-defined DEATH-MATCH
(defrule
	(game-time > 120)
	(up-compare-goal increase-town-size-goal != siege-workshop)
	(building-type-count-total siege-workshop == 0)
	(wood-amount >= 200)
	(current-age == castle-age)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(goal increase-town-size-goal siege-workshop)
	(up-pending-objects c: siege-workshop > 0)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal siege-workshop)
	(can-build siege-workshop)
=>
	(build siege-workshop)
	(set-goal increase-town-size-goal 2)
)
#end-if ; NOT WONDER RACE
(defrule
	(game-time > 20)
	(or
		(map-type scandanavia)
		(death-match-game)
	)
	(can-research ri-loom)
=>
	(research ri-loom)
)
(defrule
	(or
		(or
			(players-military-population any-enemy > 3); loom fast when enemy looks dangerous
			(current-age >= castle-age); loom anyways at some point
		)
		(or
			(or
				(goal need-loom-goal 1); loom needed before hunting
				(housing-headroom == 0)
			)
			(and
				(up-pending-objects c: villager == 0)
				(food-amount < 50)
			)
		)
	)
	(can-research ri-loom)
=>
	(research ri-loom)
)
(defrule
	(building-type-count-total town-center > 0)
	(or 
		(housing-headroom < housing-headroom1); too late actually, but if we have no food we can't train vils anyways.
		(and
			(population > 10)
			(housing-headroom < 4)
		)
	)
	(population-headroom > 0)
=>
	(set-goal housing-goal 1)
)
#load-if-not-defined WONDER-RACE
(defrule
	(housing-headroom < 10)
	(or
		(goal strategy-goal flush)
		(building-type-count-total blacksmith > 0)
	)
	(nand
		(goal unit-goal my-unique-unit-line)
		(strategic-number sn-current-age == fc-transit); build additonal houses in castle age to get builder for the castle
	)
	(strategic-number sn-current-age >= feudal)
	(population < eighty-five-percent-pop)
	(housing-headroom < housing-headroom2)
	(population-headroom > 0)
=>
	(set-goal housing-goal 1)
)
(defrule
	(or
		(population > 60)
		(and
			(strategic-number sn-current-age >= castle)
			(or
				(goal unit-goal eagle-warrior)
				(goal unit-goal archer)
			)
		)
	)	
	(strategic-number sn-current-age >= feudal)
	(or
		(housing-headroom < housing-headroom2)
		(population > seventy-five-percent-pop)
	)
	(population-headroom > 0)
	(nand
		(goal strategy-goal boom)
		(building-type-count-total town-center < 2)
	)
=>
	(set-goal housing-goal 1)
)
#end-if

(defrule
	(strategic-number sn-current-age == dark)
	(building-type-count town-center == 0)
	(or
		(or
			(civ-selected hun); on LN, collect more wood for houses or be huns
			(civ-selected chinese)
		)
		(or
			(building-type-count-total house > 0)
			(wood-amount > 300)
		)
	)
=>
	(up-assign-builders c: 621 c: 6)
	(set-goal housing-goal 0)
)
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-current-age == dark)
	(or
		(building-type-count-total house > 1)
		(and
			(building-type-count-total house > 0)
			(up-pending-placement c: house)
		)
	)
=>
	(set-goal housing-goal 0)
)
#end-if
#load-if-not-defined HUN-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined SPANISH-CIV ; they have speed bonus on buildings
(defrule
	(building-type-count-total house == 0)
	(goal housing-goal 1)
	(or
		(or
			(civ-selected aztec)
			(civ-selected mayan)
		)
		(not (map-type scandanavia)); go for early loom
	)
	(nor
		(research-completed ri-stonecutting)
		(and
			(death-match-game)
			(starting-age == dark-age)
		)
	)
=>
	(up-assign-builders c: house c: 2)
	(disable-self)
)
#end-if
(defrule
	(building-type-count-total house == 0)
	(goal housing-goal 1)
	(can-build house)
=>
	(up-set-placement-data my-player-number 904 c: 1); 904 = civilian
	(up-build place-control 0 c: house)
	(set-goal housing-goal 0)
)
(defrule
	(building-type-count house > 0)
=>
	(up-assign-builders c: house c: 1)
	(disable-self)
)
#end-if
#end-if
(defrule
	(goal housing-goal 1)
	(or
		(up-pending-objects c: house < 1)
		(and
			(and
				(population > 90)
				(housing-headroom < 5)
			)
			(or
				(up-pending-objects c: house < 2)
				(population > pop-house)
			)
		)
	)
	(up-pending-objects c: house < 3)
	(can-build house)
=>
	(build house)
	(set-goal housing-goal 0)
	(set-goal increase-town-size-goal house)
)
#load-if-defined DEATH-MATCH
(defrule
	(goal housing-goal 1)
	(or
		(building-type-count-total barracks > 0)
		(building-type-count-total stable > 0)
	)
	(or
		(up-pending-objects c: house < 2)
		(current-age >= feudal-age)
	)	
	(or
		(up-pending-objects c: house < 3)
		(starting-age == post-imperial-age)
	)
	(up-pending-objects c: house < 5)
	(can-build house)
=>
	(build house)
	(set-goal housing-goal 0)
	(set-goal increase-town-size-goal house)
)
#end-if
#load-if-defined UP-MICHI-STYLE
(defrule
	(goal housing-goal 1)
	(building-type-count-total town-center > 4)
	(civilian-population < max-civ)
	(up-pending-objects c: house < 5)
	(can-build house)
=>
	(build house)
	(set-goal housing-goal 0)
	(set-goal increase-town-size-goal house)
)
#end-if
(defrule
	(goal housing-goal 1)
	(population > 150)
	(population-cap >= 225)
	(up-pending-objects c: house < 5)
	(can-build house)
=>
	(build house)
	(set-goal housing-goal 0)
	(set-goal increase-town-size-goal house)
)
#load-if-not-defined WONDER-RACE
(defrule
	(current-age == dark-age)
	(building-type-count town-center > 1); double arabia
	(unit-type-count villager < 40)
	(food-amount < 430)
	(can-train villager)
=>
	(train villager)
	(set-strategic-number sn-total-number-explorers 2)
	(set-strategic-number sn-number-explore-groups 2)
)
#end-if
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count-total villager > 24)
	(or
		(unit-type-count-total villager > 25)
		(or
			(goal unit-goal archer)
			(goal unit-goal skirmisher)
		)
	)
	(goal strategy-goal flush)
	(food-amount > 460)
=>
	(set-goal train-civ-goal -1)
)
#load-if-defined DEATH-MATCH
(defrule
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 12)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-maximum-wood-drop-distance 15)
	(chat-to-allies "41up")
	(research feudal-age)
)
#else
(defrule
	(unit-type-count-total villager >= villager-feudal)
	(unit-type-count fishing-ship > 3)
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(chat-to-allies "41up")
	(research feudal-age)
)
(defrule
	(civilian-population >= villager-flush)
	(or
		(or
			(unit-type-count-total villager > 25)
			(up-compare-goal unit-goal != militiaman-line)
		)
		(difficulty == hardest)
	)
	(goal strategy-goal flush)
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(chat-to-allies "41up")
	(research feudal-age)
)
(defrule
	(unit-type-count villager >= dark-age-villager)
	(or
		(food-amount >= 650)
		(or
			(unit-type-count-total villager >= 30)
			(goal control-goal shot)
		)
	)
	(up-compare-goal strategy-goal != fast-imp)
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(chat-to-allies "41up")
	(research feudal-age)
)
(defrule
	(or
		(unit-type-count villager >= 33)
		(goal unit-goal wonder)
	)
	(unit-type-count villager >= villager-wonder-dark)
	(goal strategy-goal fast-imp)
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(chat-to-allies "41up")
	(research feudal-age)
)
(defrule
	(or
		(or
			(game-type == 8)
			(difficulty != hard)
		)
		(or
			(population-cap == 25)
			(starting-resources != low-resources)
		)
	)
	(unit-type-count-total villager >= villager-feudal)
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-maximum-wood-drop-distance 15)
	(chat-to-allies "41up")
	(research feudal-age)
)
#end-if
(defrule
	(current-age == feudal-age)
	(unit-type-count villager > 16); pretend dark age if feudal age start
=>
	(enable-timer lumber-timer 60)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-current-age feudal)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-minimum-number-hunters 0)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
=>
	(up-assign-builders c: bombard-tower c: 3)
	(up-assign-builders c: 621 c: 4)
	(up-assign-builders c: castle c: 4)
	(up-assign-builders c: archery-range c: 1)
	(up-assign-builders c: stable c: 1)
	(up-assign-builders c: market c: 1)
	(up-assign-builders c: mining-camp c: 1)
)
#load-if-not-defined WONDER-RACE
(defrule
	(strategic-number sn-current-age == feudal)
	(or
		(gold-amount < 200)
		(or
			(goal unit-goal eagle-warrior)
			(goal unit-goal monk)
		)
	)
	(food-amount >= 700)
	(nor
		(goal strategy-goal boom)
		(goal control-goal shot)
	)
	(can-sell-commodity stone)
=>
	(sell-commodity stone)
)
#load-if-defined SARACEN-CIV
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(game-time < 1800); don't do this late game
	(nor 
		(goal strategy-goal sling)
		(and
			(goal unit-goal my-unique-unit-line)
			(building-type-count castle == 0)
		)
	)
	(commodity-selling-price stone > 95)
	(or
		(wood-amount < 300); prevent sell/buy for TC loop
		(stone-amount >= 200)
	)
	(can-sell-commodity stone)
=>
	(sell-commodity stone)
)
#end-if
#end-if
(defrule
	(current-age >= imperial-age)
	(game-time > 1800)
	(gold-amount > 900)
	(stone-amount < 650)
	(goal under-attack-goal 0)
	(building-type-count-total castle < 4)
	(or
		(research-completed my-unique-unit-upgrade)
		(building-type-count-total castle < 2)
	)
	(or
		(gold-amount > 1600)
		(building-type-count-total castle == 0)
	)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
	(chat-local-to-self "6 buy stone for a castle")
)
(defrule
	(nor 
		(or
			(goal strategy-goal sling)
			(goal strategy-goal boom)
		)
		(goal unit-goal my-unique-unit-line)
	)
	(strategic-number sn-current-age == feudal)
	(stone-amount >= 200)
	(food-amount < 670)
	(gold-amount > 180)
	(building-type-count market == 1)
=>
	(sell-commodity stone)
	(buy-commodity food)
	(chat-to-player my-player-number "sell stone and buy food for age up")
)
(defrule
	(strategic-number sn-resource-control != ri-heresy)
	(game-time < 1800)
	(goal monk-threat-goal 1)
	(or
		(and
			(research-available ri-light-cavalry)
			(gold-amount >= 200)
		)
		(unit-type-count scout-cavalry-line < 6)
	)
	(goal enemy-goal rush)
	(food-amount < 80)
	(building-type-count stable > 0)
	(can-buy-commodity food)
=>
	(buy-commodity food)
)
(defrule
	(or
		(dropsite-min-distance wood > 20)
		(cc-players-unit-type-count 0 tree < 20)
	)
	(wood-amount < 200)
	(or
		(gold-amount > 200)
		(wood-amount < 60)
	)
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
	(chat-to-player my-player-number "buy wood")
)
(defrule
	(game-time < 1500)
	(wood-amount < 120)
	(gold-amount > 350)
	(or
		(unit-type-count-total 219 >= 1)
		(unit-type-count-total 228 >= 1); dead lumberjacks
	)
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
	(chat-to-player my-player-number "buy wood")
)

#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined INCAN-CIV
(defrule
	(strategic-number sn-resource-control < 2)
	(goal monk-threat-goal 1)
	(building-type-count stable > 0)
	(building-type-count market > 0)
	(or
		(unit-type-count scout-cavalry-line < 6)
		(research-available ri-light-cavalry)
	)
=>
	(set-strategic-number sn-resource-control 2)
)
#end-if
#end-if
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(or
		(game-time < 1800)
		(research-available ri-horse-collar)
	)
	(or
		(food-amount < 120)
		(and
			(up-compare-goal unit-goal != monk)
			(and
				(food-amount < 300)
				(gold-amount > 275)
			)
		)
	)
	(gold-amount > 200)
	(commodity-buying-price food < 140)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-to-player my-player-number "3 Special Saracen Market Rule")
)
(defrule
	(game-time < 1500)
	(building-type-count-total stable < 2)
	(building-type-count-total archery-range < 2)
	(wood-amount < 120)
	(gold-amount > 200)	
	(or
		(unit-type-count-total 219 >= 1)
		(unit-type-count-total 228 >= 1); dead lumberjacks
	)
	(commodity-buying-price wood < 120)
	(can-buy-commodity wood)
=>
	(buy-commodity wood)
	(chat-to-player my-player-number "4 Special Saracen Market Rule")
)
#end-if
(defrule
	(goal train-civ-goal 1)
	(building-type-count-total town-center >= tc-level-two)
	(gold-amount > 250)
	(food-amount < 50)
	(civilian-population < max-civ)
	(civilian-population < 85)
	(commodity-buying-price food < 150)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-to-player my-player-number "3 buy food for villagers")
)
(defrule
	(gold-amount > 500)
	(food-amount < 200)
	(unit-type-count trade-cart > 15)
	(commodity-buying-price food < 70)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-to-player my-player-number "3 buy cheap food with trade cart gold")
)
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(can-sell-commodity stone)
	(stone-amount > 750)
	(food-amount > 2000)
	(wood-amount > 2000)
	(gold-amount < 1000)
	(commodity-selling-price stone > 40)
	(building-type-count-total castle > 1)
=>
	(sell-commodity stone)
)
#end-if
#end-if ; NOT WONDER-RACE
#load-if-defined DEATH-MATCH
#load-if-not-defined BRITON-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
(defrule
	(can-sell-commodity wood)
	(commodity-selling-price wood > 40)
=>
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)(disable-self)
)
(defrule
	(can-sell-commodity wood)
	(commodity-selling-price wood > 30)
=>
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)(disable-self)
)
#end-if
#end-if
(defrule
	(can-sell-commodity stone)
	(commodity-selling-price stone > 70)
=>
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)(disable-self))
(defrule
	(can-sell-commodity stone)
	(commodity-selling-price stone > 70)
=>
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)(disable-self))
#else
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(can-sell-commodity stone)
	(commodity-selling-price stone > 70)
=>
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)(disable-self))
#end-if
#end-if
#else
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(can-sell-commodity stone)
	(commodity-selling-price stone > 70)
=>
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)(disable-self)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

(defrule
	(research-available castle-age)
	(strategic-number sn-current-age >= fc-transit)
=>
	(set-strategic-number sn-current-age feudal)
	(chat-to-player my-player-number "castle-age research failed!"); castle research failed, set our age-tracking back
)
(defrule
	(can-research castle-age)
=>
	(set-strategic-number sn-current-age fc-transit)
	(set-strategic-number sn-maximum-town-size 10)
	(research castle-age)
	(chat-to-allies "41up")
)
(defrule
	(current-age == castle-age)
	(unit-type-count villager > 16)
=>
	(set-strategic-number sn-camp-max-distance castle-age-camp-distance)
	(set-strategic-number sn-maximum-fish-boat-drop-distance -1)
	(set-strategic-number sn-maximum-town-size 12)
	(set-strategic-number sn-maximum-hunt-drop-distance 18)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-wood-dropsite-distance 15)
	(set-strategic-number sn-current-age castle)
	(enable-timer scouting-timer 120)
	(disable-self)
)
(defrule
	(or	
		(strategic-number sn-gold-dropsite-distance >= 40); reset distances after forced camp
		(strategic-number sn-stone-dropsite-distance >= 40)
	)
=>
	(set-strategic-number sn-gold-dropsite-distance 5)
	(set-strategic-number sn-stone-dropsite-distance 5)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
)
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined DEATH-MATCH
(defrule
	(or
		(and
			(goal strategy-goal flush)
			(wood-amount > 420)
		)
		(and
			(stone-amount == 0); if there are many players selling stone for castle age advance, not everyone gets enough gold
			(and
				(gold-amount < 200)
				(food-amount > 750)
			)
		)
	)
	(research-available castle-age)
	(strategic-number sn-current-age == feudal)
	(commodity-selling-price wood > 40)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number "sell excess wood")
)
#end-if
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(or
		(research-available imperial-age)
		(current-age >= imperial-age)
	)
	(wood-amount > 430)
	(commodity-selling-price wood > 40)
	(or
		(building-type-count town-center >= tc-level-four)
		(and
			(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
			(stone-amount < 50)
		)
	)
	(cc-players-unit-type-count 0 tree > 100)
	(gold-amount < 800)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number "sell excess wood")
)
#end-if
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(current-age >= imperial-age)
	(food-amount > 1650)
	(gold-amount < 1200)
	(or
		(commodity-selling-price food > 40)
		(population > max-civ-pop)
	)
	(can-sell-commodity food)
=>
	(sell-commodity food)
	(chat-to-player my-player-number "sell excess food")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(food-amount > 1400)
	(wood-amount > 400)
	(gold-amount < 1200)
	(goal unit-goal my-unique-unit-line)
	(research-available my-unique-unit-upgrade)
	(or
		(commodity-selling-price food > 40)
		(population > max-civ-pop)
	)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number "sell excess wood")
)
#end-if
(defrule
	(current-age >= imperial-age)
	(or
		(civilian-population >= 90)
		(game-time > 3600)
	)
	(food-amount > 600)
	(or
		(and
			(commodity-selling-price food > 40)
			(gold-amount < 150)
		)
		(and
			(food-amount > 1650)
			(gold-amount < 800)
		)
	)
	(can-sell-commodity food)
=>
	(sell-commodity food)
	(chat-to-player my-player-number "sell excess food")
)
(defrule
	(or
		(strategic-number sn-minimum-water-body-size-for-dock < water-islands); don't sell too much on water maps, we can't gatherer on other islands
		(commodity-selling-price wood > 40)
	)
	(cc-players-unit-type-count 0 tree > 100)
	(food-amount < 2000); sell food first
	(wood-amount > 1200)
	(dropsite-min-distance wood < 7)
	(gold-amount < 800)
	(or
		(starting-age < post-imperial-age)
		(or
			(commodity-selling-price wood > 40)
			(food-amount < 800)
		)
	)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number "sell excess wood")
)
(defrule
	(strategic-number sn-resource-control == ri-heresy)
	(wood-amount > 220)
	(gold-amount < 1100)
	(commodity-selling-price wood > 20)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number "emergency sell wood - need ri-heresy")
)
(defrule
	(strategic-number sn-resource-control == ri-heresy)
	(food-amount > 300)
	(gold-amount < 1100)
	(commodity-selling-price food > 20)
	(not (research-completed ri-light-cavalry))
	(can-sell-commodity food)
=>
	(sell-commodity food)
	(chat-to-player my-player-number "emergency sell food - need ri-heresy")
)
(defrule
	(research-available imperial-age)
	(food-amount > 1100)
	(gold-amount < 800)
	(can-sell-commodity food)
=>
	(sell-commodity food)
	(chat-to-player my-player-number "5 Sell Food - need gold for imperial-age")
)
(defrule
	(research-available imperial-age)
	(wood-amount > 400)
	(food-amount > 800)
	(gold-amount < 700)
	(dropsite-min-distance wood < 7)
	(nand
		(gold-amount < 500)
		(population < max-civ-pop)
	)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(chat-to-player my-player-number "5 Sell Wood - need gold for imperial-age")
)
(defrule
	(research-available imperial-age)
	(civilian-population >= max-civ)
	(players-unit-type-count every-ally villager >= 95)
	(food-amount < 500)
	(gold-amount >= 800)
=>
	(set-goal tribute-goal 3)
)
(defrule
	(strategic-number sn-resource-control != ri-heresy)
	(or
		(and
			(and
				(food-amount < 1000)
				(research-available imperial-age)
			)
			(gold-amount > 950)
		)
		(and
			(and
				(food-amount < 800)
				(research-available castle-age)
			)
			(gold-amount > 350)
		)
	)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-to-player my-player-number "3 buy food for age up")
)
(defrule
	(strategic-number sn-resource-control != ri-heresy)
	(goal under-attack-goal 1)
	(civilian-population < fourty-percent-pop)
	(food-amount < 100)
	(gold-amount > 350)
	(commodity-buying-price food < 170)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(set-goal tribute-goal 3)
)
(defrule
	(wood-amount >= 275)
	(stone-amount < 100)
	(building-type-count-total town-center == 0)
	(can-buy-commodity stone)
	(unit-type-count villager > 0)
=>
	(buy-commodity stone)
)
(defrule
	(wood-amount >= 275)
	(stone-amount < 100)
	(building-type-count-total town-center == 0)
	(unit-type-count villager > 0)
=>
	(set-goal tribute-goal 6)
)
(defrule
	(wood-amount < 275)
	(stone-amount >= 100)
	(building-type-count-total town-center == 0)
	(unit-type-count villager > 0)
=>
	(set-goal tribute-goal 4)
)
(defrule
	(strategic-number sn-resource-control < 2)
	(wood-amount >= 330)
	(stone-amount < 100)
	(civilian-population < 80)
	(or
		(current-age-time > 300)
		(gold-amount > 400)
	)
	(current-age >= castle-age)
	(building-type-count-total town-center < 3)
	(up-compare-goal strategy-goal != fast-imp)
	(up-pending-objects c: town-center == 0)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
	(chat-to-player my-player-number "6")
)
(defrule
	(stone-amount < 650)
	(civilian-population < 80)
	(current-age >= imperial-age)
	(building-type-count-total castle == 0)
	(gold-amount > 400)
	(unit-type-count trade-cart > 4)
	(or
		(dropsite-min-distance stone > 20)
		(dropsite-min-distance stone < 0)
	)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
	(chat-to-player my-player-number "6")
)
(defrule
	(research-available imperial-age)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-strategic-number sn-current-age castle)
	(chat-to-player my-player-number "imperial-age research failed!"); imperial research failed, set our age-tracking back
)
(defrule
	(research-available imperial-age)
	(civilian-population > 95)
	(game-time >= 2400)
	(or
		(population > seventy-five-percent-pop)
		(population-cap >= 250)
	)
	(population > sixty-percent-pop)
=>
	(set-escrow-percentage food 10)(set-escrow-percentage gold 20)
)
(defrule
	(can-research-with-escrow imperial-age)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(set-strategic-number sn-current-age ci-transit)
	(chat-to-allies "41up")
	(research imperial-age)
)
(defrule
	(or
		(population < sixty-percent-pop)
		(military-population < 20)
	)
	(goal under-attack-goal 1)
	(strategic-number sn-military-level < 0)
=>
	(release-escrow food)(release-escrow gold)
)
(defrule
	(or
		(unit-type-count villager > 14)
		(or
			(death-match-game)
			(and
				(or
					(starting-resources == high-resources)
					(difficulty == hardest)
				)
				(game-time > 90)
			)
		)
	)
	(current-age == imperial-age)
=>
	(set-strategic-number sn-current-age imperial)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)(disable-self)
)
#load-if-not-defined WONDER-RACE
(defrule
	(building-type-count dock > 0)
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(research-available ri-war-galley)
	(goal enemy-boats-goal 1)
	(or
		(and
			(unit-type-count fire-ship-line > 14)
			(research-completed ri-bow-saw)
		)
		(or
			(civ-selected viking)
			(unit-type-count galley-line > 6)
		)
	)
	(food-amount < 230)
=>
	(set-goal train-civ-goal navy)
	(set-strategic-number sn-resource-control navy)
	(chat-to-player my-player-number "save-resources for navy upgrades")
)
(defrule
	(gold-amount > 300)
	(food-amount < 200)
	(strategic-number sn-resource-control == navy)
	(or
		(research-available ri-war-galley)
		(research-available ri-careening)
	)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-to-player my-player-number "3 buy food for navy-upgrades")
)
(defrule
	(goal train-civ-goal 1)
	(strategic-number sn-cavalry-threat >= 1)
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-military-level >= 0)
	(military-population > 10)
	(building-type-count barracks > 0)
	(not (players-civ every-enemy aztec))
	(nand
		(goal unit-goal knight)
		(unit-type-count villager < 60)
	)
	(research-available ri-pikeman)
=>
	(set-strategic-number sn-resource-control ri-pikeman)
	(set-goal train-civ-goal ri-pikeman)
	(chat-to-player my-player-number "save-resources = ri-pikeman")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(research-available ri-chain-mail)
=>
	(set-goal train-civ-goal ri-chain-mail); stop villager training only EWs
	(chat-to-player my-player-number "save-resources = ri-chain-mail")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal ri-chain-mail)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(research-completed ri-pikeman)
	(research-available ri-chain-mail)	
=>
	(set-strategic-number sn-resource-control ri-chain-mail);stop all units; vils remain stopped
	(chat-to-player my-player-number "save-resources = ri-chain-mail")
)
(defrule
	(or
		(strategic-number sn-resource-control == ri-long-swordsman)
		(or
			(goal train-civ-goal ri-chain-mail)
			(goal train-civ-goal ri-pikeman)
		)
	)
	(gold-amount > 300)
	(food-amount < 150)
	(can-buy-commodity food)
=>
	(buy-commodity food)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count skirmisher-line > 7)
	(research-available ri-elite-skirmisher)
	(nor
		(and
			(wood-amount < 150)
			(and
				(food-amount > 250); get eskirms over 2nd TC or monastery
				(gold-amount > 250); but don't slow down all other researches
			)
		)
		(and
			(wood-amount > 400); better spend the wood on buildings as gold is low.
			(gold-amount < 75)
		)
	)
	(goal strategy-goal flush)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
	(chat-to-player my-player-number "save-resources = ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(research-available ri-elite-skirmisher)	
	(or
		(building-type-count-total town-center >= tc-level-three)
		(strategic-number sn-archer-threat > 0)
	)
	(current-age-time > 120); don't immediately block everything
	(unit-type-count skirmisher-line > 7)
	(building-type-count archery-range > 0)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
	(chat-to-player my-player-number "save-resources = ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-archer-threat >= 1)
	(research-available ri-elite-skirmisher)
	(or
		(nand
			(town-under-attack)
			(strategic-number sn-military-level < 0)
		)
		(building-type-count-total town-center >= tc-level-four)
	)
	(building-type-count-total town-center >= tc-level-three)
	(military-population > 14)
	(building-type-count archery-range > 0)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
	(chat-to-player my-player-number "save-resources = ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-archer-threat >= 1)
	(research-available ri-elite-skirmisher)
	(or
		(goal unit-goal archer)
		(goal unit-goal cavalry-archer)
	)
	(or
		(building-type-count-total town-center >= tc-level-two)
		(building-type-count-total siege-workshop > 0)
	)
	(military-population > 19)
	(building-type-count archery-range > 0)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
	(chat-to-player my-player-number "save-resources = ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-archer-threat >= 1)
	(research-available ri-elite-skirmisher)
	(or
		(goal unit-goal eagle-warrior)
		(and
			(goal unit-goal knight)
			(goal control-goal aggressive-rush)
		)
	)
	(building-type-count archery-range > 0)
	(military-population > 14)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
	(chat-to-player my-player-number "save-resources = ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal ranged-unit-type-goal archer)
	(or
		(goal unit-goal archer)
		(and
			(goal unit-goal knight)
			(goal anti-cavalry-threat-goal 1)
		)
	)
	(research-available ri-crossbow)
	(building-type-count archery-range >= 1)
=>
	(set-goal train-civ-goal ri-crossbow)
	(set-strategic-number sn-resource-control ri-crossbow)
	(chat-to-player my-player-number "save-resources = ri-crossbow")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal ranged-unit-type-goal archer)
	(or
		(and
			(wood-amount > 150)
			(food-amount < 70)
		)
		(goal enemy-goal eagle-warrior)
	)
	(gold-amount > 250)
	(research-available ri-crossbow)
	(building-type-count archery-range >= 1)
=>
	(set-goal train-civ-goal ri-crossbow)
	(set-strategic-number sn-resource-control ri-crossbow)
	(chat-to-player my-player-number "save-resources = ri-crossbow")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(current-age == castle-age)
	(goal train-civ-goal 1)
	(or
		(and
			(goal unit-goal archer)
			(building-type-count archery-range >= 1)
		)
		(and
			(unit-type-count ranged-units > 8)
			(goal unit-goal my-unique-unit-line)
		)
	)
	(research-available ri-fletching)
=>
	(set-goal train-civ-goal ri-fletching)
)
(defrule
	(strategic-number sn-military-level >= 0)
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(unit-type-count ranged-units >= mid-min-number-upgrade)
	(goal strategy-goal flush)
	(not (research-available ri-long-swordsman))
	(research-available ri-bodkin-arrow)
=>
	(set-goal train-civ-goal ri-bodkin-arrow)
	(set-strategic-number sn-resource-control ri-bodkin-arrow)
	(chat-to-player my-player-number "save-resources = ri-bodkin-arrow")
)
#load-if-not-defined BRITON-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal unit-goal archer)
	(research-available ri-bodkin-arrow)
	(unit-type-count ranged-units >= mid-min-number-upgrade)
	(nand
		(strategic-number sn-cavalry-threat >= 1)
		(unit-type-count spearman-line < 10)
	)
	(nor 
		(research-available ri-crossbow)
		(or
			(goal strategy-goal boom)
			(goal strategy-goal fast-imp)
		)
	)
=>
	(set-goal train-civ-goal ri-bodkin-arrow)
	(set-strategic-number sn-resource-control ri-bodkin-arrow)
	(chat-to-player my-player-number "save-resources = ri-bodkin-arrow")
)
#else
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal unit-goal archer)
	(research-available ri-bodkin-arrow)
	(unit-type-count ranged-units >= mid-min-number-upgrade)
	(nand
		(strategic-number sn-cavalry-threat >= 1)
		(unit-type-count spearman-line < 10)
	)
	(research-completed ri-crossbow)
	(or
		(building-type-count-total town-center == 1)
		(unit-type-count villager > 55)
	)
=>
	(set-goal train-civ-goal ri-bodkin-arrow)
	(set-strategic-number sn-resource-control ri-bodkin-arrow)
	(chat-to-player my-player-number "save-resources = ri-bodkin-arrow")
)
#end-if
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(or
		(unit-type-count-total war-galley > 0)
		(and
			(building-type-count-total stable < 2)
			(unit-type-count cavalry-archer-units >= high-min-number-upgrade)
		)
	)
	(research-available ri-bodkin-arrow)
=>
	(set-goal train-civ-goal ri-bodkin-arrow)
	(set-strategic-number sn-resource-control ri-bodkin-arrow)
	(chat-to-player my-player-number "save-resources = ri-bodkin-arrow")
)
#load-if-defined BRITON-CIV
(defrule
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow wood)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
	(unit-type-count my-unique-unit-line > 9)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total my-unique-unit-line > 10)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined GOTHIC-CIV
(defrule
	(can-research-with-escrow ri-perfusion)
=>
	(release-escrow wood)(release-escrow gold)
	(research ri-perfusion)
)
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(not (research-available ri-elite-eagle-warrior))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-current-age >= ci-transit)
	(strategic-number sn-military-level >= 0)
	(research-available ri-eagle-warrior)
	(goal unit-goal eagle-warrior)
=>
	(set-strategic-number sn-resource-control ri-elite-eagle-warrior)
	(chat-to-player my-player-number "save-resources = ri-eagle-warrior")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(or
		(and
			(and
				(strategic-number sn-current-age == ci-transit)
				(strategic-number sn-military-level >= 0)
			)
			(nand
				(food-amount > 800)
				(gold-amount > 500)
			)
		)
		(research-available ri-elite-eagle-warrior)
	)
	(goal unit-goal eagle-warrior)
=>
	(set-strategic-number sn-resource-control ri-elite-eagle-warrior)
	(chat-to-player my-player-number "save-resources = ri-elite-eagle-warrior")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(research-available ri-arbalest)
	(or
		(and
			(food-amount > 350)
			(gold-amount < 300)
		)
		(food-amount < 350)
	)
	(goal unit-goal archer)
=>
	(set-strategic-number sn-resource-control ri-arbalest)
	(chat-to-player my-player-number "save-resources = ri-arbalest")
)
#load-if-not-defined TURKISH-CIV; they get chemistry for free
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(research-available ri-chemistry)
		(and
			(strategic-number sn-current-age == ci-transit)
			(or
				(food-amount < 300)
				(gold-amount < 200)
			)
		)
	)
	(building-type-count university > 0)
	(goal unit-goal gunpowder-units)
=>
	(set-strategic-number sn-resource-control ri-chemistry)
	(chat-to-player my-player-number "save-resources = ri-chemistry")
)
#end-if
#load-if-not-defined RIVERS-MAP
#load-if-not-defined BALTIC-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(strategic-number sn-resource-control < 2)
	(or
		(soldier-count >= 45)
		(game-time < 3600)
	)
	(soldier-count > 15)
	(nand
		(building-type-count dock == 0); we lost the naval battle so train more soldiers to defend
		(and
			(current-age >= castle-age)
			(game-time > 1800)
		)
	)
	(population-cap <= 250)
=>
	(set-strategic-number sn-resource-control 1); train navy only
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(population >= del-civ-pop)
	(or
		(civilian-population > 70)
		(game-time > 5400)
	)
	(players-unit-type-count every-enemy fire-ship-line < 12)
	(players-unit-type-count every-enemy galley-line < 12)
	(warboat-count > 40)
	(or
		(and
			(soldier-count > 19)
			(unit-type-count transport-ship < 2)
		)
		(soldier-count < 21)
	)
	(population-cap <= 250)
=>
	(set-goal train-civ-goal -1)
	(delete-unit villager)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(population >= del-civ-pop)
	(current-age == imperial-age)
	(or
		(warboat-count < 45)
		(and
			(unit-type-count transport-ship > 1)
			(or
				(dropsite-min-distance wood > 20)
				(cc-players-unit-type-count 0 tree < 20)
			)
		)
	)
	(building-type-count dock > 0)
=>
	(set-goal train-civ-goal -1)
	(delete-unit villager)
)
#end-if
#end-if
#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(research-available ri-chain-barding)
	(gold-amount >= 150)
	(goal control-goal shot)
	(strategic-number sn-military-level >= 0)
=>
	(set-goal train-civ-goal ri-chain-barding)
	(set-strategic-number sn-resource-control ri-chain-barding)
	(chat-to-player my-player-number "save-resources = ri-chain-barding")
)
#end-if
#end-if
; Place TC upgrades always before villager training or they won't fire unless you reached max villager
(defrule
	(strategic-number sn-resource-control == 3)
	(or
		(not (research-available ri-hand-cart))
		(unit-type-count-total villager < 60)
	)
	(research-completed ri-wheel-barrow)
=>
	(release-escrow wood)(set-escrow-percentage wood 0)
	(set-strategic-number sn-resource-control 0)
	(set-goal train-civ-goal 1)
)
(defrule
	(goal train-civ-goal 1)
	(unit-type-count villager >= 40)
	(can-train villager)
	(research-available ri-wheel-barrow)
	(can-buy-commodity food)
	(food-amount >= 75)
	(food-amount < 175)
	(wood-amount >= 50); enough wood for it
=>
	(buy-commodity food)
	(chat-to-player my-player-number "Attempting to research ri-wheel-barrow: Buy Food")
	(set-goal train-civ-goal 2)
	(set-strategic-number sn-resource-control 3)
)
(defrule
	(goal train-civ-goal 1)
	(unit-type-count villager >= 50)
	(research-available ri-wheel-barrow)
	(strategic-number sn-military-level >= 0)
=>
	(set-goal train-civ-goal 2)
	(set-strategic-number sn-resource-control 3)
	(chat-to-player my-player-number "save-resources = ri-wheel-barrow")	
)
(defrule
	(strategic-number sn-resource-control == 3)
	(players-building-type-count any-ally market > 0)
	(unit-type-count villager >= 60)
	(research-available ri-hand-cart)
	(food-amount > 300)
	(wood-amount < 150)
=>
	(set-goal tribute-goal 4)
)
(defrule
	(nor
		(town-under-attack)
		(and
			(building-type-count-total town-center == 1)
			(up-research-status c: imperial-age == research-pending)
		)
	)
	(goal train-civ-goal 1)
	(strategic-number sn-resource-control < 4)
	(unit-type-count villager >= 60)
	(research-available ri-hand-cart)
	(can-buy-commodity food)
	(food-amount < 300)
=>
	(set-escrow-percentage wood 100)
	(buy-commodity food)
	(chat-to-player my-player-number "Attempting to research ri-hand-cart: Buy Food")
	(set-strategic-number sn-resource-control 3)
)
(defrule
	(nor
		(town-under-attack)
		(and
			(building-type-count-total town-center == 1)
			(up-research-status c: imperial-age == research-pending)
		)
	)
	(strategic-number sn-resource-control < 4)
	(unit-type-count villager >= 60)
	(research-available ri-hand-cart)
	(can-buy-commodity wood)
	(food-amount >= 300); enough food for it
	(wood-amount >= 100)
	(wood-amount < 200)
=>
	(set-escrow-percentage wood 100)
	(buy-commodity wood)
	(chat-to-player my-player-number "Attempting to research ri-hand-cart: Buy Wood")
	(set-strategic-number sn-resource-control 3)
)
(defrule
	(strategic-number sn-resource-control == 3)
	(research-available ri-hand-cart)
	(escrow-amount wood >= 200)
=>
	(set-escrow-percentage wood 0)
)
(defrule
	(or
		(or
			(goal strategy-goal sling)
			(goal strategy-goal flush)
		)
		(population-cap < 75)
	)
	(unit-type-count villager >= 16)
	(can-research ri-wheel-barrow)
=>
	(research ri-wheel-barrow)
	(set-goal train-civ-goal 1)
	(set-strategic-number sn-resource-control 0)
)
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(unit-type-count villager >= 29)
	(strategic-number sn-resource-control < 4)
	(or
		(current-age >= castle-age)
		(and
			(current-age-time < 20)
			(food-amount > 720)
		)
	)
	(nand 
		(goal unit-goal my-unique-unit-line)
		(research-available ri-stone-mining)
	)
	(can-research ri-wheel-barrow)
=>
	(research ri-wheel-barrow)
	(set-goal train-civ-goal 1)
	(set-strategic-number sn-resource-control 0)
)
#else
(defrule
	(unit-type-count villager >= 28)
	(strategic-number sn-resource-control < 4)
	(or
		(current-age >= castle-age)
		(and
			(current-age-time < 20)
			(food-amount > 720)
		)
	)
	(can-research ri-wheel-barrow)
=>
	(research ri-wheel-barrow)
	(set-goal train-civ-goal 1)
	(set-strategic-number sn-resource-control 0)
)
#end-if
(defrule
	(unit-type-count-total villager >= 60)
	(can-research-with-escrow ri-hand-cart)
=>
	(release-escrow wood)(set-escrow-percentage wood 0)
	(research ri-hand-cart)
	(set-goal train-civ-goal 1)
	(set-strategic-number sn-resource-control 0)
)
#end-if ; not WONDER-RACE
(defrule
	(or
		(or
			(research-available ri-wheel-barrow)
			(civ-selected viking)
		)
		(and
			(gold-amount > 220)
			(food-amount < 730)
		)
	)
	(current-age >= feudal-age)
	(can-research ri-loom)
=>
	(research ri-loom)
)
#load-if-not-defined ALL-TECHS-ENABLED
(defrule
	(can-research ri-loom)
	(or
		(civ-selected mayan)
		(civ-selected chinese)
	)
=>
	(research ri-loom)
)
#end-if
#load-if-defined LOW-RESOURCES-START
#load-if-defined DIFFICULTY-HARD
#load-if-defined FORTRESS-MAP
(defrule
	(goal train-civ-goal 1)
	(or
		(and
			(current-age == feudal-age)
			(gold-amount < 190)
		)
		(and
			(unit-type-count villager < 31)
			(current-age == dark-age)
		)
	)
	(can-train villager)
=>
	(train villager)
)
#end-if
#end-if
#end-if
#load-if-not-defined WONDER-RACE
(defrule
	(goal train-civ-goal 1)
	(current-age == feudal-age)
	(or
		(goal strategy-goal rush)
		(goal strategy-goal boom)
	)
	(or
		(food-amount < 760)
		(current-age-time < 30)
	)
	(or
		(current-age-time < 55)
		(starting-age == feudal-age)
	)
	(can-train villager)
=>
	(train villager)
)
#end-if
#load-if-defined DEATH-MATCH
#load-if-not-defined HUN-CIV
(defrule
	(current-age == dark-age)
	(strategic-number sn-current-age == dark)
	(or
		(building-type-count house > 1)
		(up-research-status c: ri-loom == research-pending)
	)
	(building-type-count-total barracks > 0)
	(building-type-count-total mining-camp == 0)
	(building-type-count-total lumber-camp == 0)
	(building-type-count-total mill == 0)
	(can-build lumber-camp)
=>
	(build lumber-camp)
)
#else
(defrule
	(current-age == dark-age)
	(strategic-number sn-current-age == dark)
	(building-type-count-total mining-camp == 0)
	(building-type-count-total lumber-camp == 0)
	(building-type-count-total mill == 0)
	(can-build mill)
=>	
	(up-set-placement-data my-player-number 904 c: 2); 904 = civilian
	(up-build place-control 0 c: mill)
)
#end-if
(defrule
	(current-age == dark-age)
	(strategic-number sn-current-age == dark)
	(building-type-count-total barracks > 4)
	(building-type-count-total mill == 0)
	(can-build mill)
=>
	(build mill)
)
#end-if
; try to push to castle age
(defrule
	(goal strategy-goal flush)
	(or
		(or
			(goal enemy-goal flush)
			(goal enemy-goal eagle-warrior)
		)
		(current-age-time >= 720)
	)
	(research-available castle-age)
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-military-level >= 0)
	(goal under-attack-goal 0)
	(game-time >= 1300)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = castle-age")
)
(defrule
	(goal strategy-goal flush)
	(research-available castle-age)
	(strategic-number sn-resource-control == 2)
	(military-population < 15)
	(goal under-attack-goal 1)
=>
	(set-strategic-number sn-resource-control 0)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age == feudal)
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(wood-amount < 200)
	(food-amount > 700)
	(building-type-count-total blacksmith == 0)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = castle-age")
)
(defrule
	(players-military-population every-enemy < 5)
	(goal strategy-goal flush)
	(goal forward-threat-goal 1)
	(strategic-number sn-current-age == feudal)
	(strategic-number sn-resource-control == 0)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = castle-age")
)
; try to push to imperial age
(defrule
	(current-age-time > 600)
	(strategic-number sn-current-age == castle)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(food-amount > 500)
	(gold-amount > 400)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = imperial-age")
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal rush)
	(building-type-count-total town-center >= tc-level-three)
	(goal unit-goal knight)
	(players-building-type-count focus-player castle > 0)
	(or
		(players-building-type-count focus-player castle > 1)
		(players-building-type-count focus-player stone-wall-line > 15)
	)
=>
	(set-goal strategy-goal fast-imp)
	(disable-self)
)
(defrule
	(research-available imperial-age)
	(strategic-number sn-resource-control == 0)
	(building-type-count town-center >= tc-level-two)
	(population > 140)
	(strategic-number sn-military-level >= 0)
	(nor 
		(town-under-attack)
		(and
			(players-current-age any-enemy == imperial-age)
			(strategic-number sn-military-level >= 2)
		)
	)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = imperial-age")
)
(defrule
	(strategic-number sn-current-age == castle)
	(strategic-number sn-resource-control == 0)
	(population >= 140)
	(or
		(strategic-number sn-military-level >= -1)
		(unit-type-count cavalry-units > 20)
	)
	(goal under-attack-goal 0)
	(or
		(goal strategy-goal fast-imp)
		(and
			(goal strategy-goal boom)
			(goal unit-goal knight)
		)
	)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = imperial-age")
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age == castle)
	(or
		(building-type-count monastery > 0)
		(building-type-count siege-workshop > 0)
	)
=>
	(set-strategic-number sn-resource-control 2); block resources and don't train monks or scorps before imperial age up
)
#end-if
(defrule
	(strategic-number sn-resource-control == 0)
	(or
		(and
			(research-available ri-cavalier)
			(or
				(goal unit-goal knight-line)
				(unit-type-count knight-line > 19)
			)
		)
		(and	
			(research-available ri-hussar)
			(nor 
				(goal unit-goal militiaman-line)
				(civ-selected magyar)
			)
		)
	)
	(not (research-completed ri-champion))
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(or
		(and	
			(or
				(research-available ri-two-handed-swordsman)
				(research-available ri-champion)
			)
			(or
				(goal unit-goal militiaman-line)
				(goal control-goal militiaman-line)
			)
		)
		(and
			(goal ranged-unit-type-goal archer)
			(research-available ri-arbalest)
		)
	)
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age >= ci-transit)
	(or
		(or
			(research-available ri-blast-furnace)
			(research-available ri-plate-mail)
		)
		(research-available ri-chain-mail)
	)
	(unit-type-count infantry-units > 12)
	(or
		(food-amount < 350)
		(gold-amount < 225)
	)
=>
	(set-strategic-number sn-resource-control 2)
)
#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age >= ci-transit)
	(or
		(or
			(research-available ri-blast-furnace)
			(research-available ri-plate-barding)
		)
		(research-available ri-chain-barding)
	)
	(unit-type-count cavalry-units > 12)
	(or
		(food-amount < 350)
		(gold-amount < 225)
	)
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(current-age == castle-age)
	(civilian-population > 90)
	(goal unit-goal knight)
	(or
		(and
			(strategic-number sn-military-level >= 0)
			(unit-type-count cavalry-units > 19)
		)
		(population >= eighty-five-percent-pop)
	)
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(goal unit-goal knight)
	(research-available ri-paladin)
	(unit-type-count knight-line > 22)
	(or
		(population > eighty-five-percent-pop)
		(strategic-number sn-military-level >= 0)
	)
=>
	(set-strategic-number sn-resource-control 2)
)
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-resource-control == 0)
	(unit-type-count camel-line > 7)
	(or
		(research-available ri-heavy-camel)
		(research-available ri-imperial-camel)
	)
	(population > eighty-five-percent-pop)
=>
	(set-strategic-number sn-resource-control 2)
)
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control == 0)
	(or
		(research-available ri-bracer)
		(research-available ri-ring-archer-armor)
	)
	(or
		(food-amount < 300)
		(gold-amount < 250)
	)
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(goal train-civ-goal ri-crossbow)
	(strategic-number sn-resource-control == ri-crossbow)
	(up-research-status c: ri-elite-skirmisher == research-pending)
	(building-type-count archery-range == 1)
=>
	(set-goal train-civ-goal 1)
	(set-strategic-number sn-resource-control 0)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(population > seventy-five-percent-pop)
	(unit-type-count scorpion-line > 9)
	(or
		(research-available ri-heavy-scorpion)
		(and
			(civ-selected celtic)
			(and
				(building-type-count castle > 0)
				(research-available my-unique-research)
			)
		)
	)
=>
	(set-strategic-number sn-resource-control 2)
	(set-goal save-wood-goal 1)
)
(defrule
	(goal uu-up-goal 1)
	(population > eighty-five-percent-pop)
	(research-available my-unique-unit-upgrade)
	(building-type-count castle > 0)
	(or
		(or
			(unit-type-count female-gold-miner > 0); don't start escrowing when gold income is low
			(unit-type-count male-gold-miner > 0)
		)
		(unit-type-count trade-cart > 5)
	)
=>
	(set-escrow-percentage food 30)(set-escrow-percentage gold 30)
	(set-goal escrow-purpose-goal my-unique-unit-line)
)
#load-if-not-defined AZTEC-CIV ; Jaguars aren't useful in trash wars
#load-if-not-defined BRITON-CIV ; Same as most ranged uu
#load-if-not-defined CHINESE-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(goal escrow-purpose-goal my-unique-unit-line)
	(unit-type-count female-gold-miner == 0)
	(unit-type-count male-gold-miner == 0)
	(unit-type-count trade-cart == 0)
=>
	(release-escrow food)
	(set-escrow-percentage food 0); pile up relic/market gold first, as this will take long
)
(defrule
	(or
		(and
			(goal escrow-purpose-goal my-unique-unit-line)
			(or
				(escrow-amount food >= escrow-amount-food)
				(population < max-civ-pop)
			)
		)
		(and
			(research-available imperial-age)
			(escrow-amount food >= imp-food)
		)
	)
=>
	(set-escrow-percentage food 0)
)
(defrule
	(or
		(and
			(goal escrow-purpose-goal my-unique-unit-line)
			(escrow-amount gold >= escrow-amount-gold)
		)
		(and
			(research-available imperial-age)
			(escrow-amount gold >= imp-gold)
		)
	)
=>
	(set-escrow-percentage food 30)
	(set-escrow-percentage gold 0)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(goal escrow-purpose-goal my-unique-unit-line)
	(or
		(or
			(not (research-available my-unique-unit-upgrade))
			(building-type-count castle == 0); not included in check above
		)
		(and
			(population < 160)
			(goal under-attack-goal 1)
		)
	)
=>
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(release-escrow food)(release-escrow gold)
	(set-goal escrow-purpose-goal 0)
)
#load-if-defined RESEARCH-DOESNT-WORK
#load-if-defined SPANISH-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count religious-units > 12)
	(research-completed ri-theocracy)
	(research-available ri-inquisition)
	(building-type-count castle > 0)
=>
	(set-strategic-number sn-resource-control ri-inquisition)
	(chat-to-player my-player-number "save-resources = ri-inquisition")
)
#end-if
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count religious-units > 12)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(goal hostilities-goal 1)
	)
	(building-type-count castle > 0)
	(research-available ri-orthodoxy)
=>
	(set-strategic-number sn-resource-control ri-orthodoxy)
	(chat-to-player my-player-number "save-resources = ri-orthodoxy")
)
#end-if
(defrule
	(strategic-number sn-resource-control == 0)
	(or
		(or
			(goal unit-goal monk)
			(goal ranged-unit-type-goal monk)
		)
		(players-unit-type-count any-enemy war-elephant-line > 12)
	)
	(unit-type-count-total monk > 5)
	(or
		(or
			(research-available ri-theocracy)
			(research-available ri-illumination)
		)
		(research-available ri-block-printing)
	)
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(current-age == imperial-age)
	(unit-type-count religious-units > 20)
	(strategic-number sn-resource-control == 0)
	(goal unit-goal monk)
	(gold-amount < 300)
	(unit-type-count-total trebuchet-set == 0)
	(building-type-count castle > 0)
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(current-age == imperial-age)
	(unit-type-count religious-units > 20)
	(strategic-number sn-resource-control == 2)
	(goal unit-goal monk)
	(wood-amount < 200)
	(unit-type-count-total trebuchet-set == 0)
	(building-type-count castle > 0)
=>
	(set-goal save-wood-goal 1)
)
(defrule
	(research-available imperial-age)
	(strategic-number sn-resource-control == 0)
	(goal unit-goal monk)
	(or
		(food-amount > 800)
		(unit-type-count-total monk > 30)
	)
	(unit-type-count-total monk > 20)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = imperial-age")
)
(defrule
	(food-amount >= 175)
	(or
		(goal train-civ-goal ri-crossbow)
		(and
			(food-amount >= 265)
			(goal train-civ-goal ri-pikeman)
		)
	)
=>
	(set-goal train-civ-goal 1)
)
(defrule
	(or
		(building-type-count-total stone-wall > 20)
		(and
			(goal strategy-goal boom)
			(strategic-number sn-military-level >= 0)
		)
	)
	(or
		(goal train-civ-goal ri-crossbow)
		(goal train-civ-goal ri-bodkin-arrow)
	)
=>
	(set-goal train-civ-goal 1)
)
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-resource-control < 2)
	(civilian-population < fourty-percent-pop)
	(population >= eighty-five-percent-pop)
	(game-time < 1200)
=>
	(set-strategic-number sn-resource-control 2)
)
#load-if-defined DARK-AGE-START
(defrule
	(strategic-number sn-resource-control > 2)
	(food-amount > 2000)
	(gold-amount > 2000)
	(wood-amount > 2000)
=>
	(set-strategic-number sn-resource-control 0); resource control not needed in DM
	(set-goal save-wood-goal 0)
)
#end-if
#end-if
#load-if-not-defined WONDER-RACE
(defrule
	(research-completed ri-coinage)
	(food-amount > 170)
	(or
		(and
			(goal strategy-goal sling)
			(up-allied-goal any-ally control-goal == shot)
		)
		(taunt-detected any-human-ally 38)
	)
=>
	(tribute-to-player this-any-ally food 100)
)
(defrule
	(building-type-count town-center > 0)
	(research-completed ri-coinage)
	(wood-amount > 200)
	(or
		(and
			(goal strategy-goal sling)
			(up-allied-goal any-ally control-goal == shot)
		)
		(taunt-detected any-human-ally 38)
	)
=>
	(tribute-to-player this-any-ally wood 100)
)
(defrule
	(research-completed ri-coinage)
	(gold-amount > 150)
	(or
		(and
			(goal strategy-goal sling)
			(up-allied-goal any-ally control-goal == shot)
		)
		(taunt-detected any-human-ally 38)
	)
=>
	(tribute-to-player this-any-ally gold 100)
)
(defrule
	(research-completed ri-coinage)
	(stone-amount > 220)
	(or
		(and
			(goal strategy-goal sling)
			(up-allied-goal any-ally control-goal == shot)
		)
		(taunt-detected any-human-ally 38)
	)
=>
	(tribute-to-player this-any-ally stone 100)
)
(defrule
	(or
		(strategic-number sn-resource-control == 2)
		(and
			(goal under-attack-goal 1)
			(population < 190)
		)
	)
	(food-amount < 1000)
	(or
		(food-amount < 400)
		(research-available imperial-age)
	)
	(up-allied-resource-amount any-computer-ally food > 1600)
	(up-allied-resource-percent any-computer-ally amount-tribute-inefficiency < 30)
	(up-compare-goal strategy-goal != sling)
=>
	(chat-to-player this-any-computer-ally "3")
)
(defrule
	(or
		(goal under-attack-goal 1)
		(and
			(strategic-number sn-resource-control == 2); wood for siege
			(gold-amount >= 200)
		)
	)
	(wood-amount < 200)
	(food-amount > 300)
	(up-allied-resource-amount any-computer-ally wood > 1100)
	(up-allied-resource-percent any-computer-ally amount-tribute-inefficiency < 30)
	(up-compare-goal strategy-goal != sling)
=>
	(chat-to-player this-any-computer-ally "4")
)
(defrule
	(or
		(goal under-attack-goal 1)
		(food-amount > 800)
	)
	(population > sixty-percent-pop)
	(gold-amount < 200)
	(food-amount > 400)
	(up-allied-resource-amount any-computer-ally gold > 2000)
	(up-allied-resource-percent any-computer-ally amount-tribute-inefficiency < 30)
	(up-compare-goal strategy-goal != sling)
=>
	(chat-to-player this-any-computer-ally "5")
)
(defrule
	(strategic-number sn-resource-control == 2)
	(or
		(gold-amount < 300)
		(goal escrow-purpose-goal ri-halberdier)
	)
	(or
		(gold-amount < 600)
		(research-available imperial-age)
	)
	(food-amount > 300)
	(gold-amount < 800)
	(up-allied-resource-amount any-computer-ally gold > 2000)
	(up-allied-resource-percent any-computer-ally amount-tribute-inefficiency < 30)
	(up-compare-goal strategy-goal != sling)
=>
	(chat-to-player this-any-computer-ally "5")
)
(defrule
	(or
		(strategic-number sn-resource-control == 2)
		(and
			(goal under-attack-goal 1)
			(population < 190)
		)
	)
	(food-amount < 1000)
	(or
		(food-amount < 400)
		(research-available imperial-age)
	)
	(up-allied-resource-amount any-computer-ally food > 1600)
	(up-allied-resource-percent any-computer-ally amount-tribute-inefficiency < 30)
	(up-compare-goal strategy-goal != sling)
=>
	(chat-to-player this-any-computer-ally "3")
)
(defrule
	(goal under-attack-goal 1)
	(population < 190)
	(wood-amount < 200)
	(food-amount > 300)
	(up-allied-resource-amount any-computer-ally wood > 1100)
	(up-allied-resource-percent any-computer-ally amount-tribute-inefficiency < 30)
	(up-compare-goal strategy-goal != sling)
=>
	(chat-to-player this-any-computer-ally "4")
)
(defrule
	(goal under-attack-goal 1)
	(population < 190)
	(population > 120)
	(gold-amount < 200)
	(food-amount > 400)
	(up-allied-resource-amount any-computer-ally gold > 2000)
	(up-allied-resource-percent any-computer-ally amount-tribute-inefficiency < 30)
	(up-compare-goal strategy-goal != sling)
=>
	(chat-to-player this-any-computer-ally "5")
)
(defrule
	(strategic-number sn-resource-control == 2)
	(or
		(gold-amount < 300)
		(goal escrow-purpose-goal ri-halberdier)
	)
	(or
		(gold-amount < 600)
		(research-available imperial-age)
	)
	(food-amount > 300)
	(gold-amount < 800)
	(up-allied-resource-amount any-computer-ally gold > 900)
	(up-allied-resource-percent any-computer-ally amount-tribute-inefficiency < 30)
	(up-compare-goal strategy-goal != sling)
=>
	(chat-to-player this-any-computer-ally "5")
)
#load-if-defined DEATH-MATCH
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(food-amount > 2000)
	(wood-amount > 2000)
	(gold-amount < 200)
	(up-allied-resource-amount any-computer-ally gold > 1000)
	(players-building-type-count any-computer-ally market > 0)
=>
	(chat-to-player this-any-computer-ally "5")	
)
#end-if
#end-if
(defrule
	(or
		(or
			(players-tribute-memory any-computer-ally food == 100)
			(players-tribute-memory any-computer-ally food == 200)
		)
		(players-tribute-memory any-computer-ally gold == 100)
	)
	(players-population any-computer-ally >= del-civ-pop)
=>
	(clear-tribute-memory every-computer food)
	(clear-tribute-memory every-computer gold)
	(enable-timer tribute-timer 1); some scripts send only 100 of one res, even if they have tons of it, so keep annoying them.
)
(defrule
	(game-time > 1200)
	(building-type-count town-center > 0)
	(or
		(unit-type-count villager < 5)
		(and
			(players-civilian-population any-ally > fourty-percent-pop)
			(or
				(unit-type-count villager < twenty-five-percent-pop)
				(players-population any-ally > eighty-five-percent-pop)
			)				
		)
	)
	(unit-type-count villager < fourty-percent-pop)
	(food-amount < 100)
	(not (town-under-attack))
=>
	(set-goal tribute-goal 3)
)
(defrule
	(building-type-count town-center >= tc-level-two)
	(players-building-type-count any-ally market > 0)
	(game-time > 1800)
	(or
		(unit-type-count villager < 90)
		(strategic-number sn-resource-control == 2)
	)
	(food-amount < 100)
	(gold-amount > 200)
=>
	(set-goal tribute-goal 3)
)
(defrule
	(building-type-count town-center >= tc-level-two)
	(players-building-type-count any-ally market > 0)
	(strategic-number sn-resource-control == 2)
	(food-amount > 500)
	(gold-amount < 200)
=>
	(set-goal tribute-goal 5)
)
(defrule
	(players-building-type-count any-ally market > 0)
	(strategic-number sn-resource-control < 4)
	(food-amount > 500)
	(gold-amount > 400)
	(wood-amount < 150)
=>
	(set-goal tribute-goal 4)
)
(defrule
	(taunt-detected any-ally 3)
	(food-amount > 1000)
	(research-completed ri-banking)
	(building-type-count market > 0)
	(current-age == imperial-age)
=>
	(acknowledge-taunt this-any-ally 3)
	(tribute-to-player this-any-ally food 400)
	(chat-to-player-using-id this-any-ally 22077)
	(chat-local-to-self "tribute food")
)
(defrule
	(taunt-detected any-ally 3)
	(food-amount > 300)
	(or
		(research-completed ri-banking)
		(food-amount > 1200)
	)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 3)
	(tribute-to-player this-any-ally food 100)
	(chat-to-player-using-id this-any-ally 22077)
	(chat-local-to-self "tribute food")
)
(defrule
	(taunt-detected any-ally 4)
	(wood-amount > 900)
	(goal save-wood-goal 0)
	(research-completed ri-banking)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 4)
	(tribute-to-player this-any-ally wood 400)
	(chat-to-player-using-id this-any-ally 22076)
	(chat-local-to-self "tribute wood")
)
(defrule
	(taunt-detected any-ally 4)
	(wood-amount > 300)
	(goal save-wood-goal 0)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 4)
	(tribute-to-player this-any-ally wood 100)
	(chat-to-player-using-id this-any-ally 22076)
	(chat-local-to-self "tribute wood")
)
(defrule
	(taunt-detected any-ally 5)
	(gold-amount > 1500)
	(research-completed ri-banking)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 5)
	(tribute-to-player this-any-ally gold 400)
	(chat-to-player-using-id this-any-ally 22078)
	(chat-local-to-self "tribute gold")
)
(defrule
	(taunt-detected any-ally 5)
	(gold-amount > 300)
	(research-completed ri-banking)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 5)
	(tribute-to-player this-any-ally gold 100)
	(chat-to-player-using-id this-any-ally 22078)
	(chat-local-to-self "tribute gold")
)
(defrule
	(taunt-detected any-ally 6)
	(building-type-count-total market > 0)
	(or
		(stone-amount > 750)
		(and
			(players-building-type-count any-ally town-center == 0)
			(stone-amount >= 130)
		)
	)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 6)
	(tribute-to-player this-any-ally stone 100)
	(chat-to-player-using-id this-any-ally 22079)
	(chat-local-to-self "tribute stone")
)
(defrule
	(or
		(or
			(taunt-detected any-ally 3)
			(taunt-detected any-ally 4)
		)
		(or
			(taunt-detected any-ally 5)
			(taunt-detected any-ally 6)
		)
	)
	(building-type-count market == 0)
=>
	(chat-to-player-using-id this-any-ally 22164)
	(acknowledge-taunt this-any-ally 3)
	(acknowledge-taunt this-any-ally 4)
	(acknowledge-taunt this-any-ally 5)
	(acknowledge-taunt this-any-ally 6)
)
(defrule
	(or
		(or
			(taunt-detected any-ally 3)
			(taunt-detected any-ally 4)
		)
		(or
			(taunt-detected any-ally 5)
			(taunt-detected any-ally 6)
		)
	)
=>
	(acknowledge-taunt this-any-ally 3)
	(acknowledge-taunt this-any-ally 4)
	(acknowledge-taunt this-any-ally 5)
	(acknowledge-taunt this-any-ally 6)
)
(defrule
	(up-compare-goal strategy-goal != sling)
	(taunt-detected any-ally 130); cooperate with barbie's share resources
	(wood-amount < 400)
	(gold-amount > 800)
	(food-amount > 1000)
=>
	(chat-to-allies-using-id 22123)
	(acknowledge-taunt this-any-ally 130)
)
(defrule
	(up-compare-goal strategy-goal != sling)
	(nand	
		(up-enemy-units-in-town > 14)
		(population < 45)
	)
	(taunt-detected any-ally 130)
	(or
		(food-amount < 1000)
		(or	
			(wood-amount < 800)
			(gold-amount < 700)
		)
	)
	(building-type-count-total town-center > 0)
=>
	(chat-to-player this-any-ally "1")
	(chat-to-allies "Yes, I do.")
	(acknowledge-taunt this-any-ally 130)
	(acknowledge-taunt my-player-number 1)
)
(defrule
	(taunt-detected any-ally 130); if we need them, the other rules above would've triggered
=>
	(chat-to-player this-any-ally "2")
	(chat-to-allies "No, thanks.")
	(acknowledge-taunt this-any-ally 130)
	(acknowledge-taunt my-player-number 2)
)
(defrule
	(timer-triggered tribute-timer)
	(goal tribute-goal 3)
	(players-building-type-count every-ally market > 0)
	(or
		(up-allied-resource-percent any-ally amount-tribute-inefficiency < 10)
		(and
			(up-allied-resource-amount any-ally food > 1200)
			(up-allied-resource-percent any-ally amount-tribute-inefficiency < 30)
		)
	)
	(up-allied-resource-amount any-ally food > 400)
=>
	(enable-timer tribute-timer 30)
	(chat-to-allies-using-id 22122)
	(disable-self)
)
(defrule
	(timer-triggered tribute-timer)
	(goal tribute-goal 4)
	(players-building-type-count every-ally market > 0)
	(or
		(or
			(building-type-count-total town-center == 0)
			(up-allied-resource-percent any-ally amount-tribute-inefficiency < 10)
		)
		(and
			(up-allied-resource-amount any-ally wood > 600)
			(up-allied-resource-percent any-ally amount-tribute-inefficiency < 30)
		)
	)
	(up-allied-resource-amount any-ally wood > 400)
=>
	(enable-timer tribute-timer 30)
	(chat-to-allies-using-id 22123)
	(disable-self)
)
(defrule
	(timer-triggered tribute-timer)
	(goal tribute-goal 5)
	(players-building-type-count every-ally market > 0)
	(or
		(up-allied-resource-percent any-ally amount-tribute-inefficiency < 10)
		(and
			(up-allied-resource-amount any-ally gold > 1300)
			(up-allied-resource-percent any-ally amount-tribute-inefficiency < 30)
		)
	)
	(up-allied-resource-amount any-ally gold > 400)
=>
	(enable-timer tribute-timer 30)
	(chat-to-allies-using-id 22124)
	(disable-self)
)
(defrule
	(timer-triggered tribute-timer)
	(goal tribute-goal 6)
	(players-building-type-count every-ally market > 0)
	(or
		(up-allied-resource-percent any-ally amount-tribute-inefficiency < 10)
		(building-type-count town-center == 0)
	)
	(up-allied-resource-amount any-ally stone > 100)
=>
	(enable-timer tribute-timer 30)
	(chat-to-allies-using-id 22125)
	(disable-self)
)
#end-if ; NOT WONDER-RACE

;********************BASICS ********************

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(resource-found wood)
	(unit-type-count-total villager > 9)
	(building-type-count-total lumber-camp < 1)
	(or
		(up-gaia-type-count c: 48 > 1); both boars found
		(up-compare-goal hunting-goal >= 1)
	)
	(up-gaia-type-count c: 48 > 0)
	(can-build lumber-camp)
=>
	(build lumber-camp)
	(set-goal dark-build-order-goal 1)
	(set-strategic-number sn-allow-adjacent-dropsites 1); delay mill after dock
)
(defrule
	(strategic-number sn-current-age == dark)
	(building-type-count town-center > 0)
	(building-type-count-total mill == 0)
	(resource-found food)
	(or
		(or 
			(unit-type-count male-forager > 0)
			(unit-type-count female-forager > 0)
		)
		(and
			(death-match-game)
			(current-age == dark-age)
		)
	)
	(can-build mill)
=>
	(build mill)
)
(defrule
	(current-age == dark-age)
	(building-type-count town-center > 0)
	(building-type-count-total mill == 0); emergency mill for no berries
	(game-time > 180)
	(or
		(unit-type-count-total villager >= 20); some other foood sources available
		(and
			(strategic-number sn-mill-max-distance > 30)
			(building-type-count lumber-camp > 0)
		)
	)
	(up-compare-goal dark-build-order-goal != 1)
	(or
		(wood-amount > 200)
		(building-type-count lumber-camp > 0)
	)
	(can-build mill)
=>
	(build mill)
)
#load-if-not-defined SCANDANAVIA-MAP
(defrule
	(building-type-count town-center > 0)
	(strategic-number sn-current-age == dark)
	(dropsite-min-distance deer-hunting > 8)
	(dropsite-min-distance deer-hunting < 38)
	(can-build mill)
	(building-type-count-total mill < 1)
=>
	(set-strategic-number sn-preferred-mill-placement 1); mill deer
	(build mill)
)
#end-if
#load-if-not-defined DEATH-MATCH
(defrule
	(building-type-count town-center >= 1); this idea from ER rarely fails
	(game-time >= 15); increase lumber camp distance when we still found no wood after 15s
	(or ; so the scout has some time to find a forest
		(not (resource-found wood))
		(building-type-count-total stone-wall > 15); also increase in walled maps, as we may find the forest with the wall
	)
	(strategic-number sn-mill-max-distance < 30)
=>
	(set-strategic-number sn-camp-max-distance 18)
	(disable-self)
)
(defrule
	(building-type-count town-center >= 1)
	(game-time >= 18); and even further when still no wood after 18s
	(not (resource-found wood))
	(strategic-number sn-mill-max-distance < 30)
=>
	(set-strategic-number sn-camp-max-distance 21)
	(disable-self)
)
(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total stone-wall < 15)
	(or
		(dropsite-min-distance gold > 12)
		(building-type-count-total mining-camp > 0)
	)
=>
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-camp-max-distance 30)
	(set-strategic-number sn-wood-dropsite-distance 7); move wood gatherers from far stragglers to the camp
	(disable-self)
)
(defrule
	(building-type-count-total lumber-camp > 1)
	(building-type-count-total mining-camp == 0)
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 12); close gold like in gold rush maps
=>
	(set-strategic-number sn-camp-max-distance 12); so only a small camp max distance is required, else the gold will be skipped.
	(set-strategic-number sn-wood-dropsite-distance 4)
	(disable-self)
)
(defrule
	(current-age == dark-age); don't trigger this later when initial gold is gone.
	(building-type-count town-center >= 1); mainly a fix for nomad map where gold may be farther away
	(building-type-count-total lumber-camp > 0); as the computer doesn't care about resources when placing the initial TC.
	(unit-type-count villager >= 24)
	(dropsite-min-distance gold > 24)
	(dropsite-min-distance gold < 64)
=>
	(set-strategic-number sn-camp-max-distance 60)
	(disable-self)
)
(defrule
	(game-time > lumber-delay)
	(resource-found wood)
	(or
		(building-type-count-total mill > 0)
		(and
			(wood-amount > 200)
			(strategic-number sn-mill-max-distance > 30)
		)
	)
	(building-type-count-total lumber-camp == 0)
	(can-build lumber-camp)
=>
	(build lumber-camp)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
)
#end-if ; no DM
(defrule
	(resource-found wood)
	(unit-type-count villager >= 20)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(dropsite-min-distance wood < 4)
	(strategic-number sn-current-age == dark)
=>
	(up-jump-rule 1)
)
(defrule ;build additional lumber camps
	(resource-found wood)
	(unit-type-count villager >= 20)
	(or
		(building-type-count-total lumber-camp < 2)
		(unit-type-count villager >= 45)
	)
	(or
		(building-type-count-total lumber-camp < 3)
		(unit-type-count villager >= 60)
	)
	(building-type-count-total lumber-camp < 5)
	(can-build lumber-camp)
=>
	(build lumber-camp)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(set-strategic-number sn-maximum-wood-drop-distance 30)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
)
; Lumber Camp Replacement when either fast when 1st lumber-camp placed really bad or in feudal-age when flushing or after castle-age is available
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(or
		(goal increase-town-size-goal 0)
		(current-age <= feudal-age)
	)
	(building-type-count town-center > 0)
	(or
		(and
			(building-type-count lumber-camp > 0)
			(dropsite-min-distance wood > 3)
		)
		(and
			(unit-type-count-total villager >= villager-feudal)
			(building-type-count-total lumber-camp == 0); debug for no placement
		)
	)
	(strategic-number sn-camp-max-distance < 35)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-camp-max-distance 35)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(chat-to-player my-player-number "bad lumber camp placement!: camp-max-distance 35")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or 
		(not (goal strategy-goal flush))
		(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	)
	(resource-found gold)
	(strategic-number sn-current-age >= df-transit)
	(can-build mining-camp)
	(building-type-count-total mining-camp == 0)
=>
	(build mining-camp)
)
#end-if ; NOT PIDM
(defrule
	(resource-found gold)
	(goal strategy-goal flush)
	(or
		(and
			(or
				(building-type-count-total stable > 0)
				(building-type-count-total archery-range > 1)
			)
			(wood-amount > 135)
		)
		(and
			(goal unit-goal militiaman-line)
			(building-type-count-total barracks > 0)
		)	
	)
	(can-build mining-camp)
	(building-type-count-total mining-camp == 0)
=>
	(build mining-camp)
)
(defrule
	(resource-found gold)
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total market > 0)
	(can-build mining-camp)
	(building-type-count-total mining-camp == 0)
=>
	(build mining-camp)
)
(defrule
	(resource-found gold)
	(or
		(or
			(unit-type-count-total 229 >= 1); dead miners detected
			(unit-type-count-total 221 >= 1)
		)
		(strategic-number sn-gold-gatherer-percentage > 30)
	)
	(unit-type-count-total villager > 37)
	(can-build mining-camp)
	(building-type-count-total mining-camp < 3)
=>
	(build mining-camp)
	(set-strategic-number sn-maximum-stone-drop-distance 40)
	(set-strategic-number sn-stone-dropsite-distance 40)
	(set-strategic-number sn-maximum-gold-drop-distance 3)
	(set-strategic-number sn-gold-dropsite-distance 3)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(resource-found wood)
	(unit-type-count 979 > 0); lumberjack
	(building-type-count-total lumber-camp < 1)
	(or
		(unit-type-count villager > 14)
		(strategic-number sn-current-age > dark)
	)
	(wood-amount > 200)
	(can-build lumber-camp)
=>
	(build lumber-camp)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
)
(defrule
	(or
		(unit-type-count fishing-ship > 1)
		(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	)
	(goal dark-build-order-goal 1)
=>
	(set-goal dark-build-order-goal 0)
	(disable-self)
)
(defrule
	(game-time < 900)
	(unit-type-count villager-gold > 1)
	(building-type-count-total mining-camp == 0)
=>
	(up-assign-builders c: mining-camp c: 2)
)
(defrule
	(resource-found gold)
	(dropsite-min-distance gold > 5);rebuild  bad camps
	(dropsite-min-distance gold < 255)
	(building-type-count mining-camp > 0)
	(commodity-selling-price stone < 105); no saracens or already some stone sold
	(can-build mining-camp)
	(or
		(building-type-count mining-camp < 5)
		(strategic-number sn-camp-max-distance > 45)
	)
	(building-type-count-total mining-camp < 15)
	(up-pending-objects c: mining-camp < 1)
=>
	(build mining-camp)
	(set-strategic-number sn-defer-dropsite-update 1)
	(set-strategic-number sn-dropsite-separation-distance 6)
)
(defrule
	(resource-found stone)
	(dropsite-min-distance stone > 5)
	(dropsite-min-distance stone < 255)
	(building-type-count mining-camp > 1)
	(or
		(building-type-count mining-camp < 4)
		(strategic-number sn-camp-max-distance > 45)
	)
	(can-build mining-camp)
	(strategic-number sn-stone-gatherer-percentage > 0)
	(building-type-count-total mining-camp < 15)
	(up-pending-objects c: mining-camp < 1)
=>
	(build mining-camp)
	(set-strategic-number sn-defer-dropsite-update 1)
	(set-strategic-number sn-dropsite-separation-distance 6)
)
(defrule
	(up-compare-goal increase-town-size-goal != town-center)
	(wood-amount > 200)
	(dropsite-min-distance gold > 1); build subsequent mining camps to avoid crowd
	(dropsite-min-distance gold < 255); check for gold still on the map
	(civilian-population > 60)
	(game-time < 2400)
	(can-build mining-camp)
	(building-type-count-total mining-camp < 5)
	(up-pending-objects c: mining-camp < 1)
	(unit-type-count villager >= villager-mining-camp)
=>
	(set-strategic-number sn-camp-max-distance 45)
	(set-strategic-number sn-dropsite-separation-distance 6)
	(build mining-camp)
)
#load-if-defined WONDER-RACE
(defrule
	(or
		(building-type-count-total blacksmith > 0)
		(strategic-number sn-current-age >= castle)
	)
	(or
		(dropsite-min-distance gold > 2)
		(dropsite-min-distance stone > 2)
	)
	(building-type-count-total mining-camp < 2)
	(can-build mining-camp)
=>
	(build mining-camp)
)
#else
(defrule
	(strategic-number sn-resource-control != battering-ram)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(or
		(or
			(research-completed ri-bow-saw)
			(building-type-count-total town-center >= tc-level-three)
		)
		(or
			(strategic-number sn-stone-gatherer-percentage > 0)
			(wood-amount > 210)
		)
	)
	(stone-amount < 100)
	(current-age-time > 180)
	(building-type-count-total mining-camp < 4)
	(dropsite-min-distance stone > 4)
	(can-build mining-camp)
=>
	(build mining-camp)
)
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith > 0)
	(commodity-selling-price stone > 100)
	(building-type-count-total mining-camp < 4)
	(or
		(and
			(building-type-count-total mining-camp < 2)
			(dropsite-min-distance stone > 5)
		)
		(and
			(current-age == castle-age)
			(building-type-count stable > 1)
		)
	)
	(can-build mining-camp)
=>
	(build mining-camp)
)
#end-if
#load-if-defined UP-MICHI-STYLE
(defrule
	(building-type-count-total blacksmith > 0)
	(building-type-count-total mining-camp == 1)
	(dropsite-min-distance stone > 3)
	(can-build mining-camp)
=>
	(build mining-camp)
)
#end-if
(defrule
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total mining-camp == 1)
	(dropsite-min-distance stone > 3)
	(can-build mining-camp)
=>
	(build mining-camp)
)
#load-if-not-defined DEATH-MATCH
(defrule
	(or
		(game-time > 2100)
		(dropsite-min-distance wood > 15)
	)
	(strategic-number sn-camp-max-distance < 60)
=>
	(set-strategic-number sn-camp-max-distance 60)
	(set-strategic-number sn-percent-building-cancellation 75)
	(set-strategic-number sn-defer-dropsite-update 1)
)
(defrule
	(game-time > 2700)
	(goal ffa-game-goal -1)
	(goal increase-town-size-goal 0)
	(strategic-number sn-camp-max-distance < 90)
=>
	(set-strategic-number sn-camp-max-distance 90)
	(set-strategic-number sn-defer-dropsite-update 1)
)
#end-if
(defrule
	(cc-players-unit-type-count 0 tree < heavy-wood)	
	(or
		(game-time > 3600); 60min
		(death-match-game)
	)
	(or
		(goal ffa-game-goal -1)
		(game-time > 5400); 90 min
	)
	(game-time > 900)
	(goal increase-town-size-goal 0)
	(strategic-number sn-camp-max-distance < 144)
=>
	(set-strategic-number sn-camp-max-distance 144)
)
(defrule
	(dropsite-min-distance wood < 255)
	(dropsite-min-distance wood > 4)
	(timer-triggered lumber-timer)
	(can-build lumber-camp)
	(up-pending-objects c: lumber-camp < 1)
	(cc-players-unit-type-count 0 tree > 25)
=>
	(build lumber-camp)
	(enable-timer lumber-timer 120)
	(set-strategic-number sn-dropsite-separation-distance 4)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
)
(defrule
	(or
		(unit-type-count villager >= 75)
		(or
			(unit-type-count-total 219 >= 1)
			(unit-type-count-total 228 >= 1)
		)
	)
	(can-build lumber-camp)
	(dropsite-min-distance wood > 1)
	(dropsite-min-distance wood < 255)
	(timer-triggered lumber-timer)
	(up-pending-objects c: lumber-camp < 1)
	(cc-players-unit-type-count 0 tree > 25)
=>
	(build lumber-camp)
	(enable-timer lumber-timer 120)
	(set-strategic-number sn-dropsite-separation-distance 12)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-defer-dropsite-update 1)
)
(defrule
	(building-type-count-total town-center == 1)
	(or
		(goal strategy-goal flush)
		(building-type-count farm > 18)
	)
	(building-type-count farm > 15)
	(building-type-count-total mill < 2)
	(can-build mill)
=>
	(set-strategic-number sn-mill-max-distance 20)
	(set-strategic-number sn-dropsite-separation-distance 10)
	(build mill)
)
(defrule
	(building-type-count farm > 24)
	(or
		(building-type-count farm > 27)
		(building-type-count-total town-center == 1)
	)
	(building-type-count-total mill < 3)
	(can-build mill)
=>
	(set-strategic-number sn-mill-max-distance 23)
	(set-strategic-number sn-dropsite-separation-distance 10)
	(build mill)
)
(defrule
	(building-type-count farm > 33)
	(or
		(building-type-count-total mill < 4)
		(building-type-count farm > 45)
	)
	(building-type-count-total mill < 5)
	(can-build mill)
=>
	(set-strategic-number sn-mill-max-distance 27)
	(set-strategic-number sn-dropsite-separation-distance 10)
	(build mill)
)
(defrule
	(resource-found wood)
	(or
		(unit-type-count-total 219 >= 1)
		(unit-type-count-total 228 >= 1)
	)
	(or
		(building-type-count-total blacksmith > 0)
		(strategic-number sn-current-age >= fc-transit)
	)
	(game-time < 1800)
	(can-build lumber-camp)
	(building-type-count-total lumber-camp < 5)
	(strategic-number sn-camp-max-distance <= 35)
	(up-pending-objects c: lumber-camp < 1)
=>
	(build lumber-camp)
	(set-strategic-number sn-camp-max-distance 35)
	(set-strategic-number sn-dropsite-separation-distance 10)
	(chat-to-player my-player-number "Dead Lumberjacks found, relocate camp!")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(or
		(strategic-number sn-current-age == dark)
		(civ-selected japanese)
	)
	(unit-type-count villager-hunter >= 1)
	(strategic-number sn-enable-boar-hunting == 1)
	(dropsite-min-distance deer-hunting > 12)
	(dropsite-min-distance deer-hunting < 38)
	(can-build mill)
	(building-type-count-total mill >= 1)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-strategic-number sn-mill-max-distance 30)
	(set-strategic-number sn-preferred-mill-placement 1); mill deer
	(build mill)
	(disable-self)
)
(defrule
	(or
		(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
		(map-type yucatan)
	)
	(wood-amount >= 275)
	(building-type-count-total farm < 4); build hunting mill on yucatan/michi
	(strategic-number sn-current-age == df-transit)
	(unit-type-count villager-hunter >= 1)
	(strategic-number sn-enable-boar-hunting == 1)
	(dropsite-min-distance deer-hunting > 12)
	(dropsite-min-distance deer-hunting < 38)
	(can-build mill)
	(building-type-count-total mill >= 2)
=>
	(set-strategic-number sn-mill-max-distance 30)
	(set-strategic-number sn-preferred-mill-placement 1); mill deer
	(build mill)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(or
		(wood-amount > 220)
		(civ-selected japanese)
	)
	(unit-type-count villager-hunter >= 1)
	(strategic-number sn-enable-boar-hunting == 1)
	(dropsite-min-distance deer-hunting > 12)
	(dropsite-min-distance deer-hunting < 38)
	(can-build mill)
	(building-type-count-total mill > 0)
	(building-type-count-total mill < 3)
	(building-type-count-total lumber-camp >= 1)
=>
	(set-strategic-number sn-mill-max-distance 30)
	(set-strategic-number sn-preferred-mill-placement 1); mill deer
	(build mill)
)
#load-if-defined YUCATAN-MAP
(defrule
	(building-type-count town-center > 0)
	(building-type-count-total blacksmith > 0)
	(dropsite-min-distance deer-hunting > 8)
	(dropsite-min-distance deer-hunting < 38)
	(can-build mill)
	(building-type-count-total mill == 3)
=>
	(set-strategic-number sn-preferred-mill-placement 1); mill deer
	(set-strategic-number sn-dropsite-separation-distance 10)
	(set-strategic-number sn-mill-max-distance 29)
	(build mill)
)
#end-if
#load-if-not-defined DEATH-MATCH
#load-if-not-defined DIFFICULTY-HARDEST
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager > 13)
	(or
		(unit-type-count villager < 20)
		(building-type-count-total lumber-camp > 1)
	)
	(or
		(unit-type-count villager < 30)
		(wood-amount > 130)
	)
	(building-type-count-total lumber-camp > 0)
=>
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(wood-amount >= 385);175stable+150bs+60farm
	(idle-farm-count < 1)
	(building-type-count-total lumber-camp > 0)
=>
	(set-goal farm-goal 1)
)
#end-if ; NOT HARDEST
#end-if ; NOT DM
#load-if-not-defined WONDER-RACE
(defrule
	(goal strategy-goal sling)
	(strategic-number sn-current-age >= feudal)
	(not (research-available ri-horse-collar))
	(idle-farm-count < 2)
=>
	(set-goal farm-goal 1)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age == feudal)
	(or
		(or
			(and
				(building-type-count-total archery-range > 1)
				(building-type-count-total blacksmith > 0)
			)
			(goal unit-goal militiaman-line)
		)
		(building-type-count-total stable > 0)
	)
	(building-type-count-total archery-range > 0)
	(idle-farm-count < 2)
=>
	(set-goal farm-goal 1)
)
(defrule
	(or
		(goal strategy-goal flush)
		(food-amount < 400)
	)
	(strategic-number sn-current-age == feudal)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(idle-farm-count < 1)
	(wood-amount > 150)
=>
	(set-goal strategy-goal flush)
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(not (research-available ri-horse-collar))
	(or
		(or
			(building-type-count-total archery-range > 2)
			(building-type-count-total stable > 1)
		)
		(and
			(goal unit-goal eagle-warrior)
			(building-type-count-total barracks > 0)
		)
	)
	(idle-farm-count < 2)
=>
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(research-completed ri-horse-collar)
	(building-type-count-total farm < farm-count)
	(nor
		(or
			(goal unit-goal my-unique-unit-line); delay farms until castle age to have more workers for the castle with uu startegy
			(goal control-goal shot); get food from ally
		)
		(or
			(goal unit-goal knight); use rule above
			(goal unit-goal default-ranged)
		)
	)
	(idle-farm-count < 2)
=>
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(or
		(and
			(goal strategy-goal rush)
			(building-type-count-total blacksmith > 0)
		)
		(game-time > 1200)
	)
	(not (goal unit-goal my-unique-unit-line))
	(idle-farm-count < 2)
=>
	(set-goal farm-goal 1)
)
#load-if-not-defined SARACEN-CIV ;buy food with them instead of farming
(defrule
	(strategic-number sn-current-age == fc-transit)
	(building-type-count-total blacksmith > 0)
	(or
		(or 
			(goal unit-goal mix)
			(goal unit-goal skirmisher)
		)
		(and
			(goal strategy-goal boom)
			(research-completed ri-horse-collar)
		)
	)
	(building-type-count-total farm < 14)
=>
	(set-goal farm-goal 1)
)
(defrule
	(building-type-count town-center >= 1)
	(strategic-number sn-current-age >= castle)
	(or
		(idle-farm-count < 2)
		(or
			(building-type-count-total town-center >= tc-level-three)
			(and
				(building-type-count-total town-center >= tc-level-two)
				(or
					(wood-amount > 335); 275 for 3rd TC + 60
					(goal strategy-goal boom); build as many farms as possible after 2nd TC
				)
			)
		)
	)
=>
	(set-goal farm-goal 1)
)
#else
(defrule
	(building-type-count town-center >= 1)
	(strategic-number sn-current-age >= castle)
	(or
		(idle-farm-count < 2)
		(building-type-count-total town-center >= tc-level-three)
	)
	(or
		(or
			(commodity-buying-price food > 130)
			(commodity-selling-price stone < 100)
		)
		(or
			(or
				(goal strategy-goal boom)
				(building-type-count farm < 8)
			)
			(game-time > 1800)
		)
	)
=>
	(set-goal farm-goal 1)
)
#end-if ;SARACEN-CIV
#end-if ;no WONDER-RACE
(defrule
	(or
		(unit-type-count female-forager > 0)
		(unit-type-count male-forager > 0)
	)
	(building-type-count mill == 1)
	(sheep-and-forage-too-far); save for 2nd mill on maps with more berries, eg. yucatan
	(wood-amount < 100)
=>
	(set-goal farm-goal 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(goal unit-goal scout-cavalry)
	(building-type-count-total mining-camp == 0)
	(players-unit-type-count any-enemy spearman-line > 1)
	(building-type-count-total farm > 9)
=>
	(set-goal farm-goal 0); get gold camp for archers
)
(defrule
	(goal farm-goal 1)
	(current-age == dark-age)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(or
		(wood-amount < 210); place farms only if still enough wood left for dock
		(and
			(building-type-count-total dock > 0)
			(wood-amount < 135)
		)
	)
=>
	(set-goal farm-goal 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(or
		(and
			(strategic-number sn-current-age == df-transit)
			(or
				(unit-type-count male-hunter > 0)
				(unit-type-count female-hunter > 0)
			)
		)
		(or
			(and
				(current-age == feudal-age)
				(up-compare-goal strategy-goal != flush)
			)
			(and
				(current-age >= castle-age)
				(idle-farm-count > 2)
			)
		)
	)
=>
	(set-goal farm-goal 0)
)
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(game-time < 480)
	(or
		(death-match-game)
		(game-time < 300)
	)
=>
	(set-goal farm-goal 0)
)
#end-if
#load-if-not-defined DIFFICULTY-EASIEST; no boar hunting so farming is required
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined SALT-MARSH-MAP ; has many berries but all at the same spot
#load-if-not-defined ARENA-MAP ; may have 2nd berries, but don't foce mill them
(defrule
	(building-type-count town-center > 0)
=>
	(up-get-fact cc-gaia-type-count forage-bush math-goal2)
	(up-get-fact players-in-game any math-goal)
	(up-modify-goal math-goal2 g:/ math-goal)
	(set-goal split-rule-goal 1)
	(disable-self)
)
(defrule
	(goal split-rule-goal 1)
	(up-compare-goal math-goal2 > 8)
=>
	(set-goal dark-build-order-goal 2)
	(up-chat-data-to-self "total berries per player: %d" g: math-goal2)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == dark)
	(goal dark-build-order-goal 2)
	(can-build mill)
	(building-type-count-total mill >= 1)
	(building-type-count-total lumber-camp >= 1)
	(nand
		(building-type-count-total dock == 0)
		(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	)
=>
	(set-strategic-number sn-preferred-mill-placement 0); mill 2nd berries
	(build mill)
	(disable-self)
)
(defrule
	(or
		(and
			(up-research-status c: ri-heavy-plow < research-pending)
			(goal strategy-goal boom)
		)
		(and
			(up-compare-goal strategy-goal != boom)
			(up-research-status c: ri-horse-collar < research-pending)
		)
	)
	(not (sheep-and-forage-too-far))
	(goal dark-build-order-goal 2)
	(goal farm-goal 1)
=>
	(set-goal farm-goal 0)
)
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-current-age == dark)
	(or
		(or
			(up-gaia-type-count c: forage-bush > 7); map with more than standard berry amount, e.g. yucatan
			(and
				(building-type-count-total farm > 5)
				(idle-farm-count > 0)
			)
		)
		(and
			(and
				(dropsite-min-distance deer-hunting > 15); deer found but not very close => save for hunting mill
				(dropsite-min-distance deer-hunting < 32)
			)
			(unit-type-count-total villager > 22)
		)
	)
	(wood-amount < 120); sometimes there was still no hunting
=>
	(set-goal farm-goal 0)
)
(defrule
	(or
		(and
			(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
			(and
				(current-age == dark-age)
				(wood-amount < 210); place farms only if still enough wood left for dock
			)
		)
		(wood-amount < farm-wood)
	)
	(goal farm-goal 1)
=>
	(set-goal farm-goal 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(strategic-number sn-current-age == dark)
	(wood-amount > 250); high wood because dock was delayed for long
	(goal farm-goal 1)
=>
	(set-goal farm-goal 2); allow placing many farms, probably failed dock placement
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(unit-type-count villager >= 30)
	(unit-type-count villager > dark-age-villager)
	(building-type-count-total farm < 12)
	(building-type-count-total mining-camp > 0)
	(or
		(goal strategy-goal rush)
		(goal strategy-goal boom)
	)
	(can-build farm)
=>
	(build farm); build one additional farm, then rax
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(unit-type-count villager >= 30)
	(unit-type-count villager > dark-age-villager)
	(building-type-count-total farm < 12)
	(or
		(building-type-count-total barracks > 0)
		(civ-selected saracen)
	)
	(or
		(goal strategy-goal rush)
		(goal strategy-goal boom)
	)
	(idle-farm-count == 0)
	(food-amount < 600)
=>
	(set-goal farm-goal 1)
)
(defrule
	(goal farm-goal 1)
=>
	(up-get-fact unit-type-count villager math-goal)
	(up-modify-goal math-goal s:* sn-food-gatherer-percentage)
	(up-modify-goal math-goal c:/ 100)
	(up-get-fact building-type-count farm math-goal2)
)
(defrule
	(goal farm-goal 1)
	(up-compare-goal math-goal2 g:> math-goal)
	(nand
		(and
			(unit-type-count male-gold-miner == 0)
			(unit-type-count female-gold-miner == 0)
		)
		(idle-farm-count < 3)
	)	
=>
	(set-goal farm-goal 0)
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-current-age == castle)
	(goal farm-goal 0)
	(building-type-count-total town-center >= tc-level-five)
	(building-type-count-total farm < 40); build some farms anyways we'll need them later more than some early monastery or so
	(current-age-time < 480)
	(research-completed ri-heavy-plow)
=>
	(set-goal farm-goal 2)
)
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-five)
	(food-amount > imp-f2)
	(gold-amount > imp-g2)
	(building-type-count-total siege-workshop == 0)
=>
	(set-goal farm-goal 0)
)
#end-if
(defrule
	(goal farm-goal 1)
	(or
		(and
			(building-type-count-total monastery > 0)
			(building-type-count-total town-center >= tc-level-three)
		)
		(and
			(wood-amount > 120)
			(and
				(building-type-count-total stable > 1)
				(or
					(goal control-goal aggressive-rush)
					(building-type-count town-center >= tc-level-two)
				)
			)
		)
	)
=>
	(set-goal farm-goal 2)
)
(defrule
	(or
		(strategic-number sn-current-age == dark)
		(and
			(and
				(strategic-number sn-current-age == df-transit)
				(wood-amount >= 385);175stable+150bs+60farm
			)
			(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
		)
	)
	(wood-amount >= 130)
	(or
		(and
			(unit-type-count villager > 20)
			(building-type-count-total lumber-camp > 1)
		)
		(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed); fix if no docks could be placed
	)
	(can-build farm)
	(goal farm-goal 1)
=>
	(set-goal farm-goal 2)
)
(defrule
	(wood-amount > 200)
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(current-age-time > 180); don't spend all wood into farms at the start of the age
	(can-build farm)
	(goal farm-goal 1)
=>
	(set-goal farm-goal 2)
)
(defrule
	(building-type-count town-center > 0)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-resource-control != battering-ram)
	(or
		(dropsite-min-distance wood < 6); make sure we don't run out of wood
		(wood-amount > 800)
	)
	(game-time > 180)
	(or
		(and
			(goal farm-goal 1)
			(up-pending-objects c: farm < 1)
		)
		(goal farm-goal 2)
	)
	(up-pending-objects c: farm < 8)
	(can-build farm)
=>
	(build farm)
)
#load-if-not-defined WONDER-RACE
#load-if-not-defined POPULATION-CAP-25
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(players-unit-type-count every-enemy longboat-line == 0)
	(players-unit-type-count every-enemy galley-line == 0)
	(players-unit-type-count every-enemy fire-ship-line == 0)
	(building-type-count-total dock > 0)
=>
	(up-jump-rule 4)
)
(defrule
	(goal save-wood-goal 0)
	(goal enemy-boats-goal 1)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total dock < 5)
	(or
		(stone-amount < 200)
		(building-type-count-total dock < 1)
	)
	(or
		(building-type-count-total dock < 2)
		(civilian-population > 60)
	)
	(or
		(building-type-count-total dock < 4)
		(civilian-population > 80)
	)
	(can-build dock)
=>
	(build dock)
)
(defrule
	(goal save-wood-goal 0)
	(strategic-number sn-current-age == dark)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total lumber-camp > 0); fish boom instead of farming is better with UP
	(or
		(building-type-count-total mill > 0)
		(goal dark-build-order-goal 1)
	)
	(building-type-count-total dock < 2)
	(or
		(building-type-count-total dock < 1)
		(and
			(unit-type-count-total villager > 28); high villager => low food
			(food-amount < 400); probably stupid stuff happened like fishing ship going to the exact opposite side to fish (rarely)
		)
	)
	(can-build dock)
=>
	(build dock)
)
(defrule
	(strategic-number sn-current-age < fc-transit)
	(strategic-number sn-current-age >= df-transit)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(goal save-wood-goal 0)
	(goal enemy-boats-goal 1)
	(wood-amount > 400)
	(food-amount < 550); less food to even place a blacksmith, mainly on poor maps with bugged fishing near mill.
	(can-build dock)
	(building-type-count-total dock < 2)
=>
	(build dock)
)
(defrule
	(strategic-number sn-current-age >= df-transit)
	(or
		(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
		(or
			(players-unit-type-count any-enemy galley-line > 0)
			(players-unit-type-count any-enemy fire-ship-line > 0)
		)
	)
	(goal save-wood-goal 0)
	(building-type-count-total dock < 2)
	(or
		(goal strategy-goal flush)
		(building-type-count-total blacksmith > 0)
	)
	(can-build dock)
=>
	(build dock)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(or
		(building-type-count-total blacksmith > 0)
		(starting-age == post-imperial-age)
	)
	(building-type-count-total dock < 8)
	(or
		(building-type-count-total dock < 3)
		(building-type-count-total town-center >= tc-level-two)
	)
	(or
		(building-type-count-total dock < 4)
		(or
			(civilian-population > 80)
			(death-match-game)
		)
	)
	(can-build dock)
=>
	(build dock)
)
(defrule	
	(or
		(and
			(goal control-goal aggressive-rush)
			(goal unit-goal knight)
		)
		(goal unit-goal skirmisher)
	)
=>
	(up-jump-rule 1)
)
(defrule
	(current-age-time < 300)
	(current-age == castle-age)
	(building-type-count monastery == 1)
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total monk == 0)
	(unit-type-count-total 134 == 0); dead monk
	(unit-type-count-total 286 == 0); monk with relic
	(building-type-count-total market == 0)
	(cc-players-unit-type-count 0 relic > 0)
	(gold-amount < 100)
=>
	(set-strategic-number sn-resource-control monk)
	(chat-to-player my-player-number "save-resources = monk")
)
(defrule
	(current-age-time < 300)
	(building-type-count monastery == 1)
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total monk == 0)
	(unit-type-count-total 134 == 0); dead monk
	(goal control-goal aggressive-rush)
	(goal unit-goal knight)
	(or
		(strategic-number sn-cavalry-threat > 0); still get a monk if enemy is krushing, as they're good vs cavalry
		(goal enemy-goal skirmisher); enemy spam trash so it's not likely we're going to attack quick
	)
	(not (player-in-game any-ally))
	(cc-players-unit-type-count 0 relic > 0)
	(gold-amount < 100)
=>
	(set-strategic-number sn-resource-control monk)
	(chat-to-player my-player-number "save-resources = monk")
)
(defrule
	(strategic-number sn-resource-control == monk)
	(or
		(and
			(unit-type-count female-gold-miner == 0)
			(unit-type-count male-gold-miner == 0)
		)
		(and
			(or
				(town-under-attack)
				(strategic-number sn-military-level < 0)
			)
			(strategic-number sn-military-level < 1)
		)
	)
=>
	(set-strategic-number sn-resource-control 0)
)

; ********** RESEARCH **********

(defrule
	(or
		(strategic-number sn-resource-control <= 2)
		(goal train-civ-goal ri-chain-barding)
	)
	(or
		(unit-type-count cavalry-units > mid-min-number-upgrade)
		(and
			(or
				(civ-selected saracen)
				(goal control-goal shot)
			)
			(goal unit-goal knight)
		)
	)
	(can-research-with-escrow ri-chain-barding)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-chain-barding)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(can-research ri-bow-saw)
	(goal train-civ-goal 1)
	(or
		(goal position-goal pocket)
		(or
			(current-age-time > 120)
			(or
				(goal unit-goal my-unique-unit-line)
				(goal unit-goal skirmisher)
			)
		)
	)
	(up-compare-goal strategy-goal != fast-imp)
	(building-type-count-total monastery > 0)
=>
	(research ri-bow-saw)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(can-research ri-bow-saw)
	(goal train-civ-goal 1)
	(or
		(and
			(goal strategy-goal fast-imp)
			(or
				(strategic-number sn-current-age >= ci-transit)
				(unit-type-count villager > 45)
			)
		)
		(goal strategy-goal boom)
	)
=>
	(research ri-bow-saw)
)
(defrule
	(nand
		(goal strategy-goal fast-imp)
		(strategic-number sn-current-age < ci-transit)
	)
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(or
		(goal position-goal pocket)
		(or
			(current-age-time > 120)
			(goal unit-goal my-unique-unit-line)
		)
	)
	(nand
		(goal unit-goal default-ranged)
		(research-available ri-bodkin-arrow)
	)
=>
	(research ri-heavy-plow)
)
(defrule
	(nand
		(research-available ri-war-galley)
		(civ-selected viking)
	)
	(warboat-count > 12)
	(goal enemy-boats-goal 1)
	(or
		(strategic-number sn-resource-control < 2)
		(players-unit-type-count any-enemy galley-line > 0)
	)
	(can-research ri-careening)
=>
	(research ri-careening)
)
(defrule
	(or
		(research-completed ri-bow-saw)
		(or
			(civ-selected viking)
			(unit-type-count galley-line > 4)
		)
	)
	(can-research ri-war-galley)
=>
	(research ri-war-galley)
)
(defrule
	(can-research-with-escrow ri-fast-fire-ship)
=>
	(release-escrow wood)(release-escrow gold)
	(set-escrow-percentage wood 0)(set-escrow-percentage gold 0)
	(research ri-fast-fire-ship)
)
(defrule
	(can-research-with-escrow ri-galleon)
=>
	(release-escrow wood)(release-escrow food)
	(set-escrow-percentage wood 0)(set-escrow-percentage food 0)
	(research ri-galleon)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(research-available ri-galleon)
	(building-type-count dock > 0)
=>
	(set-escrow-percentage wood 20)(set-escrow-percentage food 20)
	(set-goal escrow-purpose-goal navy)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(research-available ri-fast-fire-ship)
	(building-type-count dock > 0)
=>
	(set-escrow-percentage wood 20)(set-escrow-percentage gold 20)
	(set-goal escrow-purpose-goal navy)
)
(defrule
	(goal escrow-purpose-goal navy)
	(or
		(nor
			(research-available ri-fast-fire-ship)
			(research-available ri-galleon)
		)
		(building-type-count dock == 0)
	)
=>
	(set-goal escrow-purpose-goal 0)
	(release-escrow wood)(release-escrow food)(release-escrow gold)
	(set-escrow-percentage wood 0)(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
)
(defrule
	(nor 
		(research-available ri-galleon)
		(research-available ri-fast-fire-ship)
	)
	(can-research-with-escrow ri-cannon-galleon)
=>
	(release-escrow food)(release-escrow wood)
	(research ri-cannon-galleon)
)
(defrule
	(nor 
		(research-available ri-galleon)
		(research-available ri-fast-fire-ship)
	)
	(or
		(can-research-with-escrow ri-shipwright)
		(or
			(can-research-with-escrow ri-dry-dock)
			(can-research-with-escrow ri-deck-guns)
		)
	)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-shipwright)
	(research ri-dry-dock)
	(research ri-deck-guns)
)
(defrule
	(strategic-number sn-resource-control <= 1)
	(building-type-count-total town-center > 0)
	(or
		(goal strategy-goal sling)
		(or 
			(strategic-number sn-current-age >= fc-transit)
			(goal strategy-goal flush)
		)
	)
	(nand
		(goal unit-goal my-unique-unit-line)
		(research-available ri-stone-mining)
	)
	(can-research ri-double-bit-axe)
=>
	(research ri-double-bit-axe)
)
#load-if-not-defined SARACEN-CIV
(defrule
	(strategic-number sn-resource-control <= 1)
	(building-type-count-total town-center > 0)
	(strategic-number sn-current-age >= fc-transit)
	(nand
		(goal unit-goal my-unique-unit-line)
		(research-available ri-stone-mining)
	)
	(or
		(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
		(research-completed ri-bow-saw)
	)
	(can-research ri-horse-collar)
=>
	(research ri-horse-collar)
)
#else
(defrule
	(strategic-number sn-resource-control <= 1)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(or
			(commodity-selling-price stone < 100)
			(commodity-buying-price food > 130)
		)
		(or
			(dropsite-min-distance stone > 5)
			(or
				(strategic-number sn-stone-gatherer-percentage == 0)
				(goal strategy-goal boom)
			)
		)
	)
	(or
		(building-type-count-total barracks > 0)
		(goal unit-goal my-unique-unit-line)
	)
	(can-research ri-horse-collar)
=>
	(research ri-horse-collar)
)
#end-if
(defrule
	(strategic-number sn-resource-control <= 1)
	(building-type-count-total town-center > 0)
	(or
		(and
			(goal strategy-goal flush)
			(or
				(not (research-available ri-man-at-arms))
				(or
					(building-type-count-total archery-range > 1)
					(building-type-count-total stable > 0)
				)
			)
		)
		(goal strategy-goal sling)
	)
	(can-research ri-horse-collar)
=>
	(research ri-horse-collar)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(civilian-population >= 42)
	(or
		(and
			(goal strategy-goal flush)
			(or
				(and
					(food-amount > 600)
					(gold-amount < 75)
				)
				(goal unit-goal archer)
			)
		)
		(goal strategy-goal sling)
	)
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(or
			(strategic-number sn-gold-gatherer-percentage >= 20)
			(or
				(and
					(goal unit-goal knight)
					(up-compare-goal position-goal != pocket)
				)
				(goal unit-goal monk)
			)
		)
		(civilian-population >= 50)
	)
	(strategic-number sn-current-age >= fc-transit)
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(or
			(or
				(unit-type-count cavalry-units > low-min-number-upgrade)
				(unit-type-count cavalry-archer-units > low-min-number-upgrade)
			)
			(strategic-number sn-current-age >= ci-transit)
		)
		(or
			(goal unit-goal knight)
			(goal unit-goal cavalry-archer)
		)
	)
	(can-research ri-bloodlines)
=>
	(research ri-bloodlines)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(unit-type-count scout-cavalry > mid-min-number-upgrade);scouts do not count as cavalry-units(!)
		(unit-type-count conquistador-line > mid-min-number-upgrade)
	)
	(can-research ri-bloodlines)
=>
	(research ri-bloodlines)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(unit-type-count infantry-units > low-min-number-upgrade)
		(research-completed ri-scale-barding)
	)
	(unit-type-count cavalry-units > 5)
	(strategic-number sn-current-age >= fc-transit)
	(can-research ri-forging)
=>
	(research ri-forging)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(not (goal train-civ-goal ri-chain-mail))
	(or 
		(unit-type-count cavalry-units > low-min-number-upgrade)
		(research-completed ri-scale-mail)
	)
	(unit-type-count infantry-units > 5)
	(nand
		(goal strategy-goal boom)
		(goal hostilities-goal 0)
	)
	(strategic-number sn-current-age >= fc-transit)
	(can-research ri-forging)
=>
	(research ri-forging)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(unit-type-count infantry-units > mid-min-number-upgrade)
		(and
			(goal unit-goal eagle-warrior)
			(building-type-count-total barracks > 0); don't research too early on islands
		)
	)
	(or
		(and
			(strategic-number sn-current-age >= fc-transit)
			(research-completed ri-gold-mining)
		)
		(or
			(goal hostilities-goal 1)
			(death-match-game)
		)
	)
	(can-research ri-scale-mail)
=>
	(research ri-scale-mail)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(or
			(unit-type-count cavalry-units > low-min-number-upgrade)
			(unit-type-count scout-cavalry > mid-min-number-upgrade)
		)
		(and
			(building-type-count-total stable > 1)
			(food-amount > 300)
		)
	)
	(strategic-number sn-current-age >= fc-transit)
	(can-research ri-scale-barding)
=>
	(research ri-scale-barding)
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-archer-threat < 2)
	(unit-type-count trade-cart > 0)
=>
	(up-jump-rule 1)
)
#end-if
(defrule
	(or
		(and
			(strategic-number sn-resource-control <= 2)
			(or
				(or 
					(and
						(building-type-count-total siege-workshop > 0)
						(nand
							(goal enemy-goal eagle-warrior)
							(strategic-number sn-archer-threat == 0)
						)
					)
					(strategic-number sn-archer-threat >= 1)
				)
				(unit-type-count-total skirmisher-line > mid-min-number-upgrade)
			)
		)
		(strategic-number sn-resource-control == ri-elite-skirmisher)
	)
	(can-research ri-elite-skirmisher)
=>
	(research ri-elite-skirmisher)
)
(defrule
	(or
		(or
			(unit-type-count eagle-warrior-line > 11)
			(and
				(not (civ-selected aztec))
				(current-age-time >= 300)
			)
		)
		(goal unit-goal eagle-warrior)
	)
	(can-research-with-escrow ri-elite-eagle-warrior)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(research ri-elite-eagle-warrior)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count monk > 4)
=>
	(research ri-sanctity)
	(research ri-theocracy)
	(research ri-illumination)
	(research ri-block-printing)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(up-research-status c: ri-sanctity >= research-pending)
	(unit-type-count monk > 4)
	(or
		(civ-selected aztec); bugged, movement speed bonus only counts for monks with relics in 1.0c
		(goal aofe-game-goal 1); bug is fixed in AoFE
	)
	(can-research ri-fervor)
=>
	(research ri-fervor)
)
#load-if-defined AZTEC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(up-research-status c: ri-sanctity >= research-pending)
	(unit-type-count monk > 4)
	(can-research ri-fervor)
=>
	(research ri-fervor)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(building-type-count-total monastery > 2)
	(unit-type-count monk > 19)
	(current-age == imperial-age)
	(population >= max-pop)
	(can-research ri-herbal-medicine)
=>
	(research ri-herbal-medicine)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(goal ranged-unit-type-goal monk); redemption will lure monks into death so avoid it unless enemy tries to counter monks with siege
	(or
		(players-unit-type-count any-enemy scorpion-line > 2)
		(or
			(players-unit-type-count any-enemy bombard-cannon > 0)
			(players-unit-type-count any-enemy mangonel-line > 0)
		)
	)
	(can-research ri-redemption)
=>
	(research ri-redemption)
)
(defrule
	(or
		(strategic-number sn-resource-control < 1)
		(strategic-number sn-resource-control == ri-heresy)
	)
	(or
		(and
			(and
				(unit-type-count monk > 12)
				(strategic-number sn-current-age >= ci-transit)
			)
			(unit-type-count monk > 5)
		)
		(and
			(players-unit-type-count any-enemy monk > 3)
			(goal ranged-unit-type-goal monk)
		)
	)
	(can-research ri-atonement)
=>
	(research ri-atonement)
)
#load-if-defined CELTIC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(can-research ri-heavy-scorpion)
		(can-research my-unique-research)
	)
	(unit-type-count scorpion-line > low-min-number-upgrade)
=>
	(research ri-heavy-scorpion)
	(research my-unique-research)
)
#else
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(unit-type-count scorpion-line > low-min-number-upgrade)
		(goal ranged-unit-type-goal scorpion)
	)
	(can-research ri-heavy-scorpion)
=>
	(research ri-heavy-scorpion)
)
#end-if
(defrule
	(or
		(unit-type-count-total my-unique-unit-line >= high-min-number-upgrade)
		(goal uu-up-goal 1)
	)
	(can-research-with-escrow my-unique-unit-upgrade)
=>
	(release-escrow wood)(release-escrow food)(release-escrow gold)
	(research my-unique-unit-upgrade)
	(set-goal uu-up-goal 0)
)
(defrule
	(current-age-time > 300)
	(game-time > 1800); not in DM
	(gold-amount > 2000)
	(or (or (civ-selected saracen)(civ-selected turkish))(civ-selected japanese))
	(can-research-with-escrow my-unique-unit-upgrade)
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-unit-upgrade)
	(set-goal uu-up-goal 0)
)
(defrule
	(population >= del-civ-pop)
	(current-age-time > 300)
	(gold-amount > 2000)
	(or (or (civ-selected saracen)(civ-selected turkish))(civ-selected byzantine))
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-research)
)
#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control != ri-long-swordsman)
	(goal unit-goal knight)
	(building-type-count town-center < tc-level-three)
	(goal control-goal militiaman-line)
=>
	(up-jump-rule 4)
)
#end-if
(defrule
	(or
		(strategic-number sn-resource-control <= 2)
		(strategic-number sn-resource-control == ri-long-swordsman)
	)
	(or
		(goal unit-goal militiaman-line)
		(goal control-goal militiaman-line)
	)
	(or
		(goal strategy-goal flush)
		(strategic-number sn-current-age >= fc-transit)
	)
	(can-research ri-man-at-arms)
=>
	(research ri-man-at-arms)
)
(defrule
	(or
		(strategic-number sn-resource-control <= 2)
		(strategic-number sn-resource-control == ri-long-swordsman)
	)
	(or
		(goal unit-goal militiaman-line)
		(goal control-goal militiaman-line)
	)
	(can-research ri-long-swordsman)
=>
	(research ri-long-swordsman)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(goal unit-goal militiaman-line)
		(goal control-goal militiaman-line)
	)
	(can-research ri-two-handed-swordsman)
=>
	(research ri-two-handed-swordsman)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(goal unit-goal militiaman-line)
		(goal control-goal militiaman-line)
	)
	(can-research ri-champion)
=>
	(research ri-champion)
)
(defrule
	(or
		(and
			(strategic-number sn-resource-control <= 2)
			(or
				(goal strategy-goal flush)
				(current-age-time > 240)
			)
		)
		(strategic-number sn-resource-control == ri-crossbow)
	)
	(or
		(goal ranged-unit-type-goal archer)
		(and
			(unit-type-count archer > 10)
			(goal hostilities-goal 1)
		)
	)
	(can-research ri-crossbow)
=>
	(research ri-crossbow)
)
(defrule
	(or
		(strategic-number sn-resource-control <= 2)
		(strategic-number sn-resource-control == ri-arbalest)
	)
	(or
		(goal ranged-unit-type-goal archer)
		(and
			(unit-type-count archer-line > 15)
			(goal hostilities-goal 1)
		)
	)
	(can-research ri-arbalest)
=>
	(research ri-arbalest)
)
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-resource-control <= 2)	
	(unit-type-count knight-line > 19)
	(can-research ri-cavalier)
=>
	(research ri-cavalier)
)
(defrule
	(or
		(or
			(civ-selected slavic); get more uu instead
			(civ-selected mongol)
		)
		(and
			(civ-selected persian)
			(goal unit-goal my-unique-unit-line)
		)
	)
	(up-compare-goal unit-goal != knight)
=>
	(up-jump-rule 1)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or 
		(goal anti-cavalry-threat-goal 0)
		(goal unit-goal knight)
	)
	(or 	
		(research-completed ri-bloodlines)
		(civ-selected frankish)
	)
	(can-research ri-cavalier)
=>
	(research ri-cavalier)
)
#else
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal unit-goal knight)
	(or 
		(research-completed ri-bloodlines)
		(civ-selected frankish)
	)
	(can-research ri-cavalier)
=>
	(research ri-cavalier)
)
#end-if
(defrule
	(strategic-number sn-resource-control <= 2)
	(or 
		(research-completed ri-bloodlines)
		(civ-selected frankish)
	)
	(can-research-with-escrow ri-paladin)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-paladin)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(or
			(unit-type-count ranged-units > mid-min-number-upgrade)
			(unit-type-count cavalry-archer-units > mid-min-number-upgrade)
		)
		(goal ranged-unit-type-goal cavalry-archer)
	)
	(or
		(or
			(gold-amount < 200)
			(strategic-number sn-current-age >= ci-transit)
		)
		(goal hostilities-goal 1)
	)
	(can-research-with-escrow ri-thumb-ring)
=>
	(release-escrow wood)(release-escrow food)
	(research ri-thumb-ring)
)
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(research-completed ri-bloodlines)
		(research-available ri-bloodlines)
	)
	(or
		(unit-type-count villager >= 40); dont research this at castle age start when rushing
		(population >= del-civ-pop)
	)
	(or
		(and
			(food-amount > 350)
			(or 
				(gold-amount < 200)
				(strategic-number sn-current-age >= ci-transit)
			)
		)
		(unit-type-count scout-cavalry > 6)
	)
	(can-research ri-light-cavalry)
=>
	(research ri-light-cavalry)
)
#end-if
(defrule
	(or
		(goal monk-threat-goal 1)
		(and
			(strategic-number sn-resource-control <= 2)
			(and
				(and
					(food-amount > 400)
					(gold-amount < 100)
				)
				(or
					(civ-selected frankish)
					(civ-selected briton)
				)
			)
		)
	)
	(can-research ri-light-cavalry)
=>
	(research ri-light-cavalry)
)
(defrule
	(game-time < 1500)
	(or
		(players-building-type-count every-enemy monastery > 1)
		(and
			(players-building-type-count every-enemy castle > 0)
			(players-unit-type-count every-enemy monk > 3)
		)
	)
	(can-research ri-light-cavalry)
=>
	(research ri-light-cavalry)
)
#end-if
(defrule
	(nand
		(civ-selected magyar)
		(goal monk-threat-goal 0); get UU instead
	)
	(strategic-number sn-resource-control <= 2)
	(can-research ri-hussar)
=>
	(research ri-hussar)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(goal unit-goal cavalry-archer)
		(and
			(civ-selected hun)
			(unit-type-count trade-cart > 5)
		)
	)
	(unit-type-count cavalry-archer-line >= mid-min-number-upgrade)
	(can-research ri-heavy-cavalry-archer)
=>
	(research ri-heavy-cavalry-archer)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(or
			(research-completed ri-crossbow)
			(unit-type-count cavalry-archer-units > mid-min-number-upgrade)
		)
		(or
			(or
				(unit-type-count ranged-units > mid-min-number-upgrade)
				(goal strategy-goal flush)
			)
			(or
				(unit-type-count galley-line > 4)
				(research-completed ri-chemistry)
			)
		)
	)
	(can-research ri-fletching)
=>
	(research ri-fletching)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(strategic-number sn-resource-control <= 2)
		(strategic-number sn-resource-control == ri-fletching)
	)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(or 
			(goal unit-goal cavalry-archer)
			(goal unit-goal archer)
		)
		(goal unit-goal skirmisher)
	)
	(can-research ri-fletching)
=>
	(research ri-fletching)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(strategic-number sn-resource-control <= 2)
		(strategic-number sn-resource-control == ri-fletching)
	)
	(current-age >= castle-age)
	(building-type-count castle > 0)
	(or
		(unit-type-count ranged-units > 0)
		(unit-type-count cavalry-archer-units > 0)
	)
	(can-research ri-fletching)
=>
	(research ri-fletching)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(or
			(unit-type-count ranged-units > mid-min-number-upgrade)
			(unit-type-count cavalry-archer-units > mid-min-number-upgrade)
		)
		(or
			(unit-type-count galley-line > 0)
			(and
				(goal unit-goal skirmisher)
				(current-age-time > 60)
			)
		)
	)
	(can-research ri-bodkin-arrow)
=>
	(research ri-bodkin-arrow)
)
(defrule
	(or 
		(and
			(goal strategy-goal rush)
			(or
				(goal unit-goal cavalry-archer)
				(goal unit-goal archer)
			)
		)
		(or
			(and
				(building-type-count castle > 1)
				(population >= max-civ-pop)
			)
			(strategic-number sn-resource-control == ri-bodkin-arrow)
		)
	)
	(can-research ri-bodkin-arrow)
=>
	(research ri-bodkin-arrow)
)
(defrule
	(or
		(and
			(unit-type-count infantry-units > mid-min-number-upgrade)
			(strategic-number sn-resource-control <= 2)
		)
		(goal train-civ-goal ri-chain-mail)
	)
	(can-research-with-escrow ri-chain-mail)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-chain-mail)
)
(defrule
	(strategic-number sn-resource-control <= 0)
	(or
		(research-completed ri-chain-barding)
		(research-completed ri-chain-mail)
	)
	(or
		(or
			(strategic-number sn-current-age >= ci-transit)
			(goal hostilities-goal 1)
		)
		(and
			(goal unit-goal eagle-warrior)
			(not (goal strategy-goal fast-imp))
		)
	)
	(can-research-with-escrow ri-iron-casting)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-iron-casting)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(current-age-time > 60)
	(can-research ri-conscription)
=>
	(research ri-conscription)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
	(unit-type-count cavalry-units > high-min-number-upgrade)
	(research-available ri-plate-barding)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
	(set-goal escrow-purpose-goal blacksmith)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count cavalry-units > mid-min-number-upgrade)
	(can-research-with-escrow ri-plate-barding)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(set-goal escrow-purpose-goal 0)
	(research ri-plate-barding)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
	(not (can-research-with-escrow ri-bracer))
	(research-available ri-bracer)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(can-research-with-escrow ri-bracer)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(research ri-bracer)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
	(or 
		(unit-type-count infantry-units > high-min-number-upgrade)
		(unit-type-count cavalry-units > high-min-number-upgrade)
	)
	(not (can-research-with-escrow ri-blast-furnace))
	(research-available ri-blast-furnace)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
	(set-goal escrow-purpose-goal blacksmith)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(nand
		(research-available ri-plate-mail)
		(unit-type-count infantry-units > high-min-number-upgrade)
	)
	(nand
		(research-available ri-plate-barding)
		(unit-type-count cavalry-units > high-min-number-upgrade)
	)
	(can-research-with-escrow ri-blast-furnace)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(research ri-blast-furnace)
	(set-goal escrow-purpose-goal 0)
)
(defrule
	(goal unit-goal knight)
	(unit-type-count knight-line > 12)
	(game-time < 2700)
	(not (up-research-status c: ri-paladin >= research-pending))	
=>
	(up-jump-rule 2)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
	(building-type-count university > 0)
	(not (can-research-with-escrow ri-chemistry))
	(research-available ri-chemistry)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
)
(defrule
	(or
		(strategic-number sn-resource-control <= 2)
		(strategic-number sn-resource-control == ri-chemistry)
	)
	(or
		(current-age-time > 120)
		(or
			(goal unit-goal gunpowder-units)
			(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
		)
	)
	(can-research-with-escrow ri-chemistry)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(research ri-chemistry)
)
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined SPANISH-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count cavalry-archer-units > mid-min-number-upgrade)
	(can-research ri-parthian-tactics)
=>
	(research ri-parthian-tactics)
)
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
	(unit-type-count infantry-units > high-min-number-upgrade)
	(research-available ri-plate-mail)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
	(set-goal escrow-purpose-goal blacksmith)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count infantry-units > mid-min-number-upgrade)
	(can-research-with-escrow ri-plate-mail)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(set-goal escrow-purpose-goal 0)
	(research ri-plate-mail)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(or
			(unit-type-count gunpowder-units > low-min-number-upgrade)
			(unit-type-count conquistador-line > low-min-number-upgrade)
		)
		(and
			(research-completed ri-fletching)
			(or
				(or 
					(unit-type-count ranged-units > mid-min-number-upgrade)
					(unit-type-count cavalry-archer-units > mid-min-number-upgrade)
				)
				(and
					(goal hostilities-goal 1)
					(goal strategy-goal flush)
				)
			)
		)
	)
	(can-research ri-padded-archer-armor)
=>
	(research ri-padded-archer-armor)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(unit-type-count ranged-units > low-min-number-upgrade)
		(unit-type-count cavalry-archer-units > low-min-number-upgrade)
	)
	(research-completed ri-bodkin-arrow)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(goal hostilities-goal 1)
	)
	(can-research-with-escrow ri-leather-archer-armor)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-leather-archer-armor)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(unit-type-count gunpowder-units > low-min-number-upgrade)
		(unit-type-count conquistador-line > low-min-number-upgrade)
	)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(goal hostilities-goal 1)
	)
	(can-research-with-escrow ri-leather-archer-armor)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-leather-archer-armor)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(not (research-available ri-bracer))
	(or
		(or 
			(unit-type-count ranged-units > low-min-number-upgrade)
			(unit-type-count cavalry-archer-units > low-min-number-upgrade)
		)
		(or
			(unit-type-count gunpowder-units > low-min-number-upgrade)
			(unit-type-count conquistador-line > low-min-number-upgrade)
		)
	)
	(can-research-with-escrow ri-ring-archer-armor)
=>
	(release-escrow food)(release-escrow gold)	
	(research ri-ring-archer-armor)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(and
			(gold-amount < 200)
			(or
				(food-amount > 500)
				(goal hostilities-goal 1)
			)
		)
	)
	(unit-type-count infantry-units > mid-min-number-upgrade)
	(can-research ri-squires)
=>
	(research ri-squires)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(or
			(gold-amount < 200)
			(strategic-number sn-current-age >= ci-transit)
		)
		(goal hostilities-goal 1)
	)
	(or
		(unit-type-count cavalry-units > mid-min-number-upgrade)
		(or
			(unit-type-count cavalry-archer-units > mid-min-number-upgrade)
			(unit-type-count conquistador-line > mid-min-number-upgrade)
		)
	)
	(can-research ri-husbandry)
=>
	(research ri-husbandry)
)
(defrule
	(or
		(unit-type-count spearman-line > 7)
		(strategic-number sn-cavalry-threat >= 1)
	)
	(nand
		(and
			(goal unit-goal knight)
			(strategic-number sn-resource-control != ri-pikeman)
		)
		(civ-selected indian)
	)
	(can-research ri-pikeman)
=>
	(research ri-pikeman)
)
(defrule
	(unit-type-count spearman-line > high-min-number-upgrade)
	(research-available ri-halberdier)
	(not (goal escrow-purpose-goal blacksmith))
=>
	(set-escrow-percentage gold 67)
	(set-goal escrow-purpose-goal ri-halberdier)
)
(defrule
	(or
		(and
			(escrow-amount gold >= 225)
			(not (goal escrow-purpose-goal ri-halberdier))
		)
		(escrow-amount gold >= 600)
	)

	(not (goal escrow-purpose-goal my-unique-unit-line))
	(current-age == imperial-age)
=>
	(set-escrow-percentage food 30)
	(set-escrow-percentage gold 0); stop escrowing gold when we have enough
)
(defrule
	(or
		(unit-type-count spearman-line > mid-min-number-upgrade)
		(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	)
	(can-research-with-escrow ri-halberdier)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(research ri-halberdier)
	(set-goal escrow-purpose-goal 0)
)
(defrule
	(or
		(and
			(unit-type-count spearman-line < 10)
			(goal escrow-purpose-goal ri-halberdier)
		)
		(and
			(and
				(unit-type-count infantry-units < 10)
				(unit-type-count cavalry-units < 10)
			)
			(goal escrow-purpose-goal blacksmith)
		)
	)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(set-goal escrow-purpose-goal 0)
)
(defrule
	(research-completed ri-elite-eagle-warrior); try to press advatange with as many EEW as possivle in early imp
	(current-age-time < 600)
	(population < del-civ-pop)
=>
	(release-escrow food)(release-escrow wood)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage wood 0)(set-escrow-percentage gold 0)
	(set-goal escrow-purpose-goal 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(current-age-time > 180)
	(strategic-number sn-resource-control <= 2)
	(can-research ri-capped-ram)
	(unit-type-count-total battering-ram-line > 0)
=>
	(research ri-capped-ram)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(population > max-civ-pop)
	(strategic-number sn-resource-control <= 1)
	(can-research ri-siege-ram)
	(unit-type-count-total battering-ram-line > 3)
=>
	(research ri-siege-ram)
)
(defrule
	(goal save-wood-goal 0)
	(strategic-number sn-resource-control <= 1)
	(or 
		(strategic-number sn-current-age >= ci-transit)
		(or
			(building-type-count-total monastery > 2); mush
			(and
				(food-amount > 400)
				(gold-amount < 200)
			)
		)
	)
	(can-research ri-gold-shaft-mining)
=>
	(research ri-gold-shaft-mining)
)
(defrule
	(or
		(strategic-number sn-stone-gatherer-percentage > 9)
		(strategic-number sn-current-age >= ci-transit)
	)
	(strategic-number sn-stone-gatherer-percentage > 3)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(building-type-count-total barracks > 0); for saracens, to finish the barracks first to drop the other military buildings before castle age
		(or
			(goal unit-goal my-unique-unit-line)
			(strategic-number sn-current-age >= ci-transit)
		)
	)
	(can-research ri-stone-mining)
=>
	(research ri-stone-mining)
)
(defrule
	(or
		(can-research ri-crop-rotation)
		(can-research ri-two-man-saw)
	)
=>
	(research ri-crop-rotation)
	(research ri-two-man-saw)
)
;********** SIEGE UNITS **********

#load-if-not-defined POPULATION-CAP-25
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal enemy-fortifications-goal 1)
	(building-type-count-total castle > 0)
	(current-age == imperial-age)
	(unit-type-count-total trebuchet-set < 3)
	(population >= max-civ-pop)
	(game-time < 1200)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(unit-type-count battering-ram-line < 3)
		(or
			(players-building-type-count any-enemy castle > 1)
			(players-building-type-count any-enemy stone-wall-line > 10)
		)
	)
	(unit-type-count trebuchet-set == 0)
	(building-type-count castle > 0)
	(up-research-status  c: ri-conscription != research-pending)
	(current-age == imperial-age)
	(unit-type-count trebuchet-set < 1)
	(population >= max-civ-pop)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(current-age >= imperial-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control == 2)
	(unit-type-count trebuchet-set < 3)
	(population >= del-civ-pop)
=>
	(set-goal save-wood-goal 1)
	(set-goal train-civ-goal -1)
)
(defrule
	(population >= del-civ-pop)
	(population-cap <= 250)
	(unit-type-count battering-ram-line < 4)
	(building-type-count siege-workshop > 0)
	(unit-type-count trebuchet-set < 1)
	(current-age == imperial-age)
	(current-age-time > 180)
	(wood-amount > 175)
	(gold-amount > 75)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(population-cap <= 250)
	(players-building-count any-enemy > 0)
	(population >= del-civ-pop)
	(civilian-population > max-civ)
	(gold-amount > 1500)
	(food-amount > 1500)
	(current-age == imperial-age)
	(current-age-time > 300)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
)
(defrule
	(building-type-count castle > 0)
	(current-age == imperial-age)
	(population >= del-civ-pop)
	(population-cap <= 250)
	(unit-type-count trebuchet-set < 4)
	(or
		(goal enemy-fortifications-goal 1)
		(unit-type-count trebuchet-set < 1)
	)
	(wood-amount > 200)
	(gold-amount > 200)
	(can-afford-unit trebuchet)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
	(set-strategic-number sn-resource-control 2)
)
#load-if-not-defined HIGHLAND-MAP
#load-if-not-defined YUCATAN-MAP
(defrule
	(population-cap <= 250)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total dock > 0)
	(or
		(warboat-count < 25)
		(and
			(civilian-population > 50)
			(and
				(can-afford-unit cannon-galleon-line)
				(unit-type-count cannon-galleon-line < 6)
			)
		)
	)
	(population >= max-pop)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
	(set-strategic-number sn-resource-control 1)
	(chat-to-player my-player-number "execute villagers too make room for a fleet")
)
#end-if
#end-if
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total dock > 0)
	(or
		(and
			(unit-type-count villager >= max-civ)
			(current-age == castle-age)
		)
		(research-completed ri-cannon-galleon)
	)
	(unit-type-count villager >= 6)
	(population >= max-pop)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
	(set-strategic-number sn-resource-control 1)
	(chat-to-player my-player-number "execute villagers too make room for a fleet")
)
(defrule
	(population >= max-pop)
	(or
		(strategic-number sn-resource-control == battering-ram)
		(and
			(or
				(goal forward-threat-goal 1)
				(military-population > 5)
			)
			(and
				(unit-type-count battering-ram-line < 2)
				(unit-type-count trebuchet-set < 1)
			)
		)
	)
	(unit-type-count villager >= 6)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
)
(defrule
	(current-age == imperial-age)
	(current-age-time > 300)
	(population > del-civ-pop)
	(strategic-number sn-resource-control < 2); no siege required from rules above
	(up-compare-goal uu-up-goal != 1)
	(goal escrow-purpose-goal 0)
	(unit-type-count villager >= max-civ)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on water maps
	(dropsite-min-distance wood > 0)
	(dropsite-min-distance wood < 20)
	(goal train-civ-goal -1)
	(strategic-number sn-resource-control < 1); no siege required from rules above
	(civilian-population <= fourty-percent-pop); already deleted lots of villagers
=>
	(set-goal train-civ-goal 1); restart villager training
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(strategic-number sn-resource-control == 1)
	(warboat-count >= 25)
	(or
		(not (research-completed ri-cannon-galleon))
		(unit-type-count cannon-galleon-line > 7)
	)
=>
	(set-strategic-number sn-resource-control 0)
)
; order of rules does matter as 1st rule that will be executed 1st, so next rules may not spend the resources
; so put siege training above building

#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control < 2)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(up-research-status c: ri-cannon-galleon < research-pending)
	(warboat-count > 30)
	(civilian-population > 100)
	(strategic-number sn-military-level >= 0)
	(players-building-type-count any-enemy castle > 0)
	(nand
		(up-compare-goal aofe-game-goal != 1)
		(civ-selected briton)
	)
	(nand
		(up-compare-goal aofe-game-goal == 1)
		(civ-selected hun)
	)
=>
	(set-strategic-number sn-resource-control 2)
	(chat-to-player my-player-number "save-resources = cannon-galleon")
)
#end-if
#end-if
#end-if
(defrule
	(wood-amount < 200)
	(gold-amount > 500)
	(unit-type-count trade-cart > 4)
	(or
		(strategic-number sn-resource-control == 2)
		(and
			(commodity-buying-price wood < 30)
			(gold-amount > 800)
		)
	)
	(commodity-buying-price wood < 80)
=>
	(buy-commodity wood)
	(chat-local-to-self "4 Buy cheap wood with trade cart gold")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(warboat-count >= 20)
	(or
		(up-projectile-detected projectile-castle c:< 2000)
		(up-projectile-detected projectile-bombard-tower c:< 2000)
	)
	(unit-type-count cannon-galleon-line < 4)
	(can-train-with-escrow cannon-galleon-line)
=>
	(release-escrow wood)(release-escrow gold)
	(train cannon-galleon-line)
)
#load-if-defined DEFEND-WONDER
(defrule
	(building-type-count wonder == 0)
	(unit-type-count-total trebuchet-set < 1)
	(can-train trebuchet)
=>
	(train trebuchet)
)
#end-if
(defrule
	(unit-type-count-total trebuchet-set < 1)
	(unit-type-count-total religious-units > 20)
	(can-train-with-escrow trebuchet)
=>
	(release-escrow wood)(release-escrow gold)
	(train trebuchet)
)
(defrule
	(population > fourty-percent-pop)
	(or
		(or
			(unit-type-count trebuchet-set < 2)
			(game-time < 1200); start in DM
		)
		(or
			(goal enemy-fortifications-goal 1)
			(players-building-type-count any-enemy castle > 1)
		)
	)
	(unit-type-count trebuchet-set < 4)
	(can-train trebuchet)
=>
	(train trebuchet)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(unit-type-count-total battering-ram-line < number-rams)
	(population >= seventy-five-percent-pop)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
#load-if-not-defined POPULATION-CAP-25
(defrule
	(building-type-count-total town-center < 4)
	(strategic-number sn-military-level < 2)
	(population-cap >= 225)
=>
	(up-jump-rule 1)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(and
			(building-type-count-total town-center >= 3)
			(wood-amount > 300)
		)
		(and
			(unit-type-count-total battering-ram-line < 2)
			(strategic-number sn-military-level > 0)
		)
	)
	(military-population > 10)
	(or
		(strategic-number sn-military-level >= 0)
		(population >= del-civ-pop)
	)
	(unit-type-count-total battering-ram-line < 4)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count mangonel-line < 1)
	(or
		(and
			(goal unit-goal my-unique-unit-line); assume we have a ranged uu
			(unit-type-count ranged-units > mid-min-number-upgrade)
		)
		(goal unit-goal scorpion)
	)
	(or
		(players-unit-type-count any-enemy mangonel-line > 1)
		(players-unit-type-count any-enemy scorpion-line > 4)
	)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-infantry-threat == 0)
	(strategic-number sn-cavalry-threat == 0)
	(or
		(strategic-number sn-archer-threat > 1)
		(players-unit-type-count any-enemy scorpion-line > 5)
	)
	(game-time < 1500)
	(unit-type-count mangonel-line < 1)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(strategic-number sn-archer-threat > 2)
		(players-unit-type-count any-enemy scorpion-line > 11)
	)
	(unit-type-count mangonel-line < 1)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
	(or
		(strategic-number sn-resource-control < 3)
		(and
			(strategic-number sn-resource-control == ri-elite-eagle-warrior)
			(food-amount < 700)
		)
	)
	(not (research-completed ri-elite-eagle-warrior)); EW die to massed ranged, EEW don't
	(or
		(strategic-number sn-archer-threat > 2)
		(players-unit-type-count any-enemy scorpion-line > 11)
	)
	(unit-type-count-total mangonel-line < 2)
	(goal unit-goal eagle-warrior)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-resource-control < 1)
	(wood-amount > 400)
	(food-amount > 2000)
	(gold-amount > 2250)
	(population >= del-civ-pop)
=>
	(research ri-onager)
	(research ri-siege-onager)
	(research 445); ri-shinkichon
)
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-onager)
	(gold-amount > 400)
	(unit-type-count mangonel-line < 4)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(or
			(strategic-number sn-archer-threat > 3)
			(players-unit-type-count any-enemy scorpion-line > 15)
		)
		(and
			(or
				(strategic-number sn-archer-threat > 2)
				(players-unit-type-count any-enemy scorpion-line > 8)
			)
			(unit-type-count trade-cart > 15)
		)
	)
=>
	(research ri-onager)
	(research ri-siege-onager)
	(research 445); ri-shinkichon
)
(defrule
	(strategic-number sn-resource-control < 1)
	(players-unit-type-count any-enemy galley-line > 20)
	(or
		(warboat-count < 15)
		(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	)
=>
	(research ri-onager)
	(research ri-siege-onager)
	(research 445); ri-shinkichon
)
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(strategic-number sn-archer-threat > 2)
		(or
			(players-unit-type-count any-enemy scorpion-line > 8)
			(players-unit-type-count any-enemy galley-line > 15)
		)
	)
	(research-completed ri-onager)
	(unit-type-count mangonel-line < 4)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#load-if-not-defined POPULATION-CAP-25
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(military-population > 20)
	(unit-type-count battering-ram-line < 4)
	(or
		(strategic-number sn-military-level >= 0)
		(population > sixty-percent-pop)
	)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(goal unit-goal monk)
	(nand
		(unit-available trebuchet)
		(unit-type-count trebuchet-set < 1)
	)
	(military-population > 20)
	(unit-type-count battering-ram-line < 2)
	(or
		(strategic-number sn-military-level >= 0)
		(population > sixty-percent-pop)
	)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(population > max-civ-pop)
	(or
		(unit-type-count battering-ram-line < 4)
		(research-completed ri-siege-ram)
	)
	(or
		(goal enemy-fortifications-goal 1)
		(unit-type-count battering-ram-line < 6)
	)
	(unit-type-count battering-ram-line < 12)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
; Relic Monks

#load-if-not-defined UP-MICHI-STYLE
(defrule
	(or
		(strategic-number sn-resource-control < 1)
		(gold-amount > 250)
	)
	(current-age == castle-age)
	(current-age-time < 480)
	(unit-type-count-total monk < 3)
	(unit-type-count-total 134 == 0); 134 = dead monk; dont make monks when they're dying while trying to collect relics behind enemy bases.
	(can-train monk)
=>
	(train monk)
)
#end-if
#end-if
(defrule
	(or
		(strategic-number sn-resource-control < 1)
		(strategic-number sn-resource-control == monk)
	)
	(unit-type-count-total monk == 0)
	(unit-type-count-total 134 == 0); 134 = dead monk; dont make monks when they're dying while trying to collect relics behind enemy bases.
	(can-train monk)
=>
	(train monk)
)

; Trade
(defrule
	(nor
		(research-available ri-double-bit-axe)
		(research-available ri-horse-collar)
	)
	(goal strategy-goal sling)
	(can-research ri-coinage)
=> 
	(research ri-coinage)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(and
			(and
				(food-amount > 500)
				(gold-amount < 200)
			)
			(unit-type-count villager > villager-coinage)
		)
	)
	(or
		(unit-type-count villager > villager-coinage)
		(unit-type-count villager >= max-civ)
	)
	(players-building-type-count any-ally market > 0)
	(can-research ri-coinage)
=> 
	(research ri-coinage)
)
(defrule
	(or
		(strategic-number sn-resource-control <= 2)
		(strategic-number sn-resource-control == sling)
	)
	(players-building-type-count any-ally market > 0)
	(can-research ri-banking)
=> 
	(research ri-banking)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(unit-type-count-total trade-cart > 9)
		(unit-type-count-total trade-cog > 9)
	)
	(can-research-with-escrow ri-caravan)
=> 
	(release-escrow food)(release-escrow gold)
	(research ri-caravan)
)
#load-if-not-defined DEFEND-WONDER
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined POPULATION-CAP-50
#load-if-defined ITALIAN-CIV
(defrule
	(unit-type-count trade-cart < 12)
	(player-in-game any-ally)
	(can-research ri-silk-road)
=>
	(research ri-silk-road)
)
#end-if
#load-if-not-defined SMALL-MAP
#load-if-not-defined TINY-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count town-center > 0)
	(or
		(game-time > market-time)
		(building-type-count-total town-center > 4)
	)
	(player-in-game any-ally)
	(players-building-type-count any-ally market > 0)
	(building-type-count-total market < number-markets)
	(can-build market)
=>
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data focus-player -1 c: -120)
	(up-build place-control 0 c: market)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(player-in-game any-ally)
	(or
		(game-time >= 1800)
		(game-time > market-time)
	)
	(building-type-count-total market == 0)
	(can-build market)
=>
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number -1 c: -24)
	(up-build place-control 0 c: market)
)
#end-if
(defrule	
	(or
		(or
			(not(player-in-game any-ally))
			(or
				(players-building-type-count every-ally market == 0)
				(building-type-count town-center == 0)
			)
		)
		(or
			(unit-type-count-total trade-cart >= max-trade-pop); depending on popcap and difficulty
			(unit-type-count-total trade-cart >= max-trade-cart); depending on map size
		)
	)
=>
	(up-jump-rule 1); rule too long
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(research-available imperial-age)
		(strategic-number sn-current-age >= ci-transit)
	)
	(or
		(strategic-number sn-minimum-water-body-size-for-dock <= water-mixed)
		(map-type team-islands)
	)	
	(or
		(or
			(game-time > 2100);35 min
			(and
				(unit-type-count battering-ram-line > 1)
				(goal unit-goal monk)
			)
		)
		(death-match-game)
	)
	(can-train trade-cart)
=>
	(train trade-cart)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal strategy-goal sling)
	(goal under-attack-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= water-mixed)
	(game-time > 1800)
	(can-train trade-cart)
=>
	(train trade-cart)
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-resource-control <= 2)
	(player-in-game any-ally)
	(players-building-type-count any-ally market > 0)
	(building-type-count-total town-center >= tc-level-five)
	(or
		(research-available imperial-age)
		(strategic-number sn-current-age >= ci-transit)
	)
	(can-train trade-cart)
	(unit-type-count trade-cart < max-trade-pop); depending on popcap and difficulty
	(unit-type-count trade-cart < max-trade-cart); depending on map size
=>
	(train trade-cart)
)
#end-if
(defrule
	(or
		(unit-type-count 178 > 0);dead trade cart (empty/loaded)
		(unit-type-count 205 > 0)
	)
=>
	(set-strategic-number sn-preferred-trade-distance trade-distance)
)
(defrule	
	(unit-type-count 178 == 0)
	(unit-type-count 205 == 0)
=>
	(set-strategic-number sn-preferred-trade-distance 200); try farest market
)
#end-if
#end-if
#end-if
#end-if ; NO WONDER-RACE

; VILLAGERS

(defrule
	(strategic-number sn-current-age == dark)
	(up-object-type-count-total c: villager >= villager-feudal)
	(or
		(or
			(difficulty != hard)
			(game-type == 8)
		)
		(or
			(starting-resources != low-resources)
			(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
		)
	)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(up-object-type-count-total c: villager >= villager-flush)
	(or
		(goal strategy-goal flush)
		(and
			(up-object-type-count-total c: villager >= dark-age-villager)
			(or
				(up-object-type-count-total c: villager >= 32); allows better boom if pocket
				(or
					(up-compare-goal position-goal != pocket)
					(or
						(goal unit-goal my-unique-unit-line); but don't do with UU, to get the castle faster (prevent rush)
						(goal unit-goal monk)
					)
				)
			)
		)
	)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
	(or
		(and
			(current-age == feudal-age)
			(or
				(food-amount > 600)
				(strategic-number sn-current-age == fc-transit)
			)
		)
		(or
			(and
				(goal need-loom-goal 1)
				(research-available ri-loom)
			)
			(and
				(current-age < imperial-age)
				(death-match-game)
			)
		)
	)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
	(current-age == feudal-age)
	(goal strategy-goal flush)
	(current-age-time < 300)
=>
	(set-strategic-number sn-enable-training-queue 0)
	(set-strategic-number sn-local-targeting-mode 1)
)
(defrule
	(current-age >= castle-age)
	(or
		(up-compare-goal strategy-goal != boom)
		(or
			(strategic-number sn-resource-control > 2)
			(and
				(research-available imperial-age)
				(and
					(food-amount >= imp-f2)
					(gold-amount >= imp-g2)
				)
			)
		)
	)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
	(or
		(and
			(strategic-number sn-current-age >= ci-transit)
			(strategic-number sn-resource-control >= 1)
		)
		(population >= max-civ-pop)
	)
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#load-if-not-defined DEATH-MATCH
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined HIGH-RESOURCES-START
#load-if-not-defined MEDIUM-RESOURCES-START
(defrule
	(or
		(and
			(current-age == dark-age)
			(unit-type-count villager < 33)
		)
		(current-age == feudal-age)
	)
	(up-compare-goal unit-goal != wonder)
	(unit-type-count villager < 35)
	(goal strategy-goal fast-imp)
	(goal train-civ-goal 1)
	(can-train villager)
=>
	(train villager)
)
#load-if-defined WONDER-RACE
(defrule
	(or
		(or
			(and
				(current-age == dark-age)
				(unit-type-count villager < villager-wonder-dark)
			)
			(and
				(current-age >= feudal-age)
				(unit-type-count villager < villager-wonder-feudal)
			)
		)
		(current-age == imperial-age)
	)
	(goal train-civ-goal 1)
	(can-train villager)
=>
	(train villager)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-not-defined WONDER-RACE
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager < 32)
	(or
		(unit-type-count villager < villager-feudal)
		(or
			(and
				(nor
					(goal strategy-goal flush)
					(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
				)
				(unit-type-count villager < dark-age-villager)
			)
			(food-amount < 430)
		)
	)
	(goal train-civ-goal 1)
	(can-train villager)
=>
	(train villager)
)
(defrule
	(goal train-civ-goal 1)
	(current-age == feudal-age)
	(or
		(goal strategy-goal flush)
		(goal strategy-goal sling)
	)
	(or
		(not (research-available castle-age))
		(or
			(food-amount < 750)
			(gold-amount < 160)
		)
	)
	(unit-type-count-total villager < max-civ)
	(population < max-civ-pop)
	(can-train villager)
=>
	(train villager)
)
(defrule
	(goal train-civ-goal 1)
	(current-age >= castle-age)
	(civilian-population < max-civ)
	(or
		(population < max-civ-pop)
		(game-time < 1800); keep training villagers in DM
	)
	(can-train villager)
=>
	(train villager)
)
#load-if-defined POPULATION-CAP-200
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal train-civ-goal 1)
	(strategic-number sn-current-age == castle)
	(food-amount > 200)
	(gold-amount < 600)
	(population < max-civ-pop)
	(civilian-population < 140)
	(or
		(goal unit-goal knight); train extra villagers with knights or elephants
		(civ-selected persian)
	)
	(can-train villager)
=>
	(train villager)
)
#end-if
;********** BUILDINGS **********

#load-if-defined KING-OF-THE-HILL
(defrule
	(game-time > 1800)
	(players-building-type-count any-ally 826 > 0)
	(can-build castle)
=>
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data this-any-ally 826 c: 2)
	(up-build place-control 0 c: castle)
)
(defrule
	(game-time > 1800)
	(building-type-count 826 > 0)
	(can-build castle)
=>
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-set-placement-data my-player-number 826 c: 2)
	(up-build place-control 0 c: castle)
)
#end-if
(defrule
	(strategic-number sn-maximum-town-size >= 60)
	(up-compare-sn sn-target-player-number g:== closest-enemy-goal)
	(players-unit-type-count target-player trebuchet == 0)
	(building-type-count castle > 0)
	(or
		(up-compare-const allow-forward-castle == 1)
		(building-type-count-total castle > 2)
	)
	(can-build castle)
=>
	(build-forward castle)
	(set-strategic-number sn-percent-building-cancellation 79)
)
#load-if-defined POPULATION-CAP-25
(defrule
	(can-build watch-tower)
	(current-age < imperial-age)
	(players-military-population any-enemy > 2)
	(building-type-count-total watch-tower == 0)
=>
	(up-set-placement-data my-player-number -1 c: 8)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: watch-tower)
)
#end-if
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(can-build watch-tower)
	(game-time < 960)
	(players-military-population focus-player > 5)
	(building-type-count-total watch-tower == 0)
	(goal strategy-goal rush)
	(goal unit-goal knight)
=>
	(up-set-placement-data my-player-number -1 c: 8)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: watch-tower)
)
(defrule
	(can-build watch-tower)
	(current-age == feudal-age)
	(players-military-population focus-player > 3)
	(or
		(strategic-number sn-current-age == feudal-age)
		(players-military-population focus-player > 5)
	)
	(building-type-count-total watch-tower == 0)
	(building-type-count-total blacksmith > 0)
	(goal unit-goal my-unique-unit-line)
=>
	(up-set-placement-data my-player-number -1 c: 8)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: watch-tower)
)
(defrule
	(can-build watch-tower)
	(current-age == feudal-age)
	(players-military-population focus-player > 3)
	(or
		(strategic-number sn-current-age == feudal-age)
		(players-military-population focus-player > 5)
	)
	(building-type-count-total watch-tower == 1)
	(goal unit-goal my-unique-unit-line)
=>
	(up-set-placement-data my-player-number mining-camp c: 2)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: watch-tower)
)
(defrule
	(can-build watch-tower)
	(strategic-number sn-current-age == feudal)
	(building-type-count-total blacksmith > 0)
	(players-military-population focus-player > 5)
	(town-under-attack)
	(building-type-count watch-tower == 0)
	(or
		(goal unit-goal knight)
		(goal unit-goal my-unique-unit-line)
	)
=>
	(up-assign-builders c: watch-tower c: 4)
	(set-strategic-number sn-percent-building-cancellation 0); push for the building or we lose anyway, as the computer will try to place it over an over again there
)
#end-if
(defrule
	(can-build watch-tower)
	(strategic-number sn-current-age == feudal)
	(building-type-count-total market > 0)
	(building-type-count-total watch-tower > 0)
	(building-type-count-total watch-tower < 3)
	(goal strategy-goal sling)
=>
	(up-set-placement-data my-player-number -1 c: 8)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: watch-tower)
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(can-build castle)
	(building-type-count-total castle == 0)
=>
	(up-set-placement-data my-player-number -1 c: 16)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-build place-control 0 c: castle)
	(up-jump-rule 2)
)
#end-if
#load-if-defined DEATH-MATCH
(defrule
	(can-build castle)
	(up-pending-objects c: castle < 2)
	(unit-type-count-total villager >= villager-castle)
	(building-type-count-total castle < 2)
=>
	(build castle)
	(up-jump-rule 2)
)
#end-if
(defrule
	(can-build castle)
	(up-pending-objects c: castle < 2)
	(unit-type-count-total villager >= villager-castle)
=>
	(up-set-placement-data my-player-number -1 c: 8)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: castle)
)
(defrule
	(can-build castle)
	(up-pending-objects c: castle < 2)
	(building-type-count-total wonder > 0)
	(unit-type-count-total villager >= villager-castle)
=>
	(up-set-placement-data my-player-number wonder c: 2)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: castle)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 600)
	(up-can-build is-one-goal c: town-center)
	(building-type-count-total town-center == 0)
	(player-in-game any-ally)
=>
	(release-escrow wood)
	(set-strategic-number sn-town-center-placement 0)
	(set-strategic-number sn-placement-zone-size 5)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-set-placement-data this-any-ally -1 c: -20); don't build too close or we're stuck between his buildings
	(up-build place-control is-zero-goal c: town-center)
	(chat-to-allies "Trying to rebuild TC next to ally")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(research-completed ri-bombard-tower)
	(or
		(building-type-count-total bombard-tower < 10)
		(gold-amount > 2500)
	)
	(unit-type-count trade-cart > 14)
	(unit-type-count 42 > 0); trebuchets in siege mode
	(population > del-civ-pop); high pop
	(can-buy-commodity stone)
	(gold-amount >= 900)
	(stone-amount < 100)
=>
	(buy-commodity stone)
	(chat-to-player my-player-number "6 buy stone to push with bbt")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(game-time > 300)
	(building-type-count bombard-tower < 10)
	(or
		(game-time < 900); build them defensively early in DM
		(building-type-count bombard-tower < 4)
	)
	(up-pending-objects c: bombard-tower == 0)
	(can-build bombard-tower)
=>
	(up-set-placement-data my-player-number dock c: 2)
	(up-build place-control 0 c: bombard-tower)
	(set-strategic-number sn-object-repair-level 20481); = +1 castles + 16384 siege + 4096 towers
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-maximum-town-size >= 40)
	(unit-type-count 42 > 0)
	(can-build bombard-tower)
	(up-pending-objects c: bombard-tower == 0)
=>
	(up-set-placement-data my-player-number 42 c: 2)
	(up-build place-control 0 c: bombard-tower)
	(set-strategic-number sn-object-repair-level 20481); = +1 castles + 16384 siege + 4096 towers
	(up-set-offense-priority c: siege-units c: 8); kill rams first as biggest danger to trebs
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-maximum-town-size >= 40)
	(unit-type-count bombard-cannon > 0)
	(unit-type-count 368 > 0); bombard cannon bullet
	(can-build bombard-tower)
=>
	(up-set-placement-data my-player-number 42 c: 1)
	(up-build place-control 0 c: bombard-cannon)
	(set-strategic-number sn-object-repair-level 20481); = +1 castles + 16384 siege + 4096 towers
	(up-set-offense-priority c: siege-units c: 8); kill rams first as biggest danger to bbt
)
(defrule
	(building-type-count town-center > 0)
	(goal increase-town-size-goal 0)
	(goal save-wood-goal 0)
	(or
		(goal unit-goal monk)
		(and
			(goal ranged-unit-type-goal monk)
			(building-type-count-total monastery < 4)
		)
	)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total monastery < 6)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-town-size-goal 2)
)
#else
(defrule
	(building-type-count town-center > 0)
	(goal increase-town-size-goal 0)
	(goal unit-goal monk)
	(or
		(and
			(building-type-count-total monastery < 3)
			(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
		)
		(and
			(current-age == imperial-age)
			(current-age-time > 180)
		)
	)
	(goal save-wood-goal 0)
	(building-type-count-total monastery < 5)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(building-type-count town-center > 0)
	(goal increase-town-size-goal 0)
	(goal ranged-unit-type-goal monk)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total monastery < 3)
	(wood-amount > 300)
	(goal save-wood-goal 0)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-town-size-goal 2)
)
#end-if
#load-if-defined AZTEC-CIV
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(goal increase-town-size-goal 0)
	(goal save-wood-goal 0)
	(building-type-count-total siege-workshop > 0)
	(building-type-count-total town-center >= tc-level-three)
	(or
		(building-type-count-total monastery < 2)
		(strategic-number sn-current-age >= ci-transit)
	)
	(building-type-count-total monastery < 3)
	(nor 
		(goal enemy-goal eagle-warrior)
		(or
			(goal unit-goal archer)
			(goal unit-goal eagle-warrior)
		)
	)
	(can-build monastery)
=>
	(build monastery)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal save-wood-goal 0)
	(building-type-count-total town-center >= tc-level-two)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(building-type-count-total monastery < 2)
	)
	(or
		(building-type-count-total town-center >= tc-level-four)
		(building-type-count-total monastery < 3)
	)
	(building-type-count-total monastery < 5)
	(goal ranged-unit-type-goal monk)
	(can-build monastery)
=>
	(build monastery)
)
#else
(defrule
	(unit-type-count villager > villager-monastery)
	(or
		(or
			(players-civ every-enemy indian)
			(players-civ every-enemy slavic)
		)
		(or
			(or
				(players-civ every-enemy gothic)
				(players-civ every-enemy persian)
			)
			(or
				(players-civ every-enemy korean)
				(players-civ every-enemy chinese)
			)
		)
	)
	(building-type-count-total monastery < 5)
	(can-build monastery)
=>
	(build monastery)
)
#end-if
#end-if
#end-if
#load-if-not-defined DEATH-MATCH
#load-if-defined BRITON-CIV
(defrule
	(up-compare-goal strategy-goal != boom)
	(or
		(and
			(and
				(goal unit-goal archer)
				(goal control-goal aggressive-rush)
			)
			(or
				(building-type-count-total archery-range < 4); don't mess up build order because british TC discount
				(building-type-count-total siege-workshop < 1)
			)
		)
		(and
			(building-type-count-total monastery < 1)
			(building-type-count-total town-center > 1)
		)
	)
=>
	(up-jump-rule 2)
)
#end-if
(defrule
	(or 
		(or
			(and
				(goal strategy-goal fast-imp)
				(and
					(current-age < imperial-age)
					(wood-amount < 600)
				)
			)
			(and
				(goal strategy-goal shot)
				(building-type-count-total siege-workshop == 0)
			)
		)
		(and
			(and
				(goal unit-goal my-unique-unit-line)
				(building-type-count-total castle == 0)
			)
			(building-type-count watch-tower != 2);  2 watch-tower = anti flush defense for uu strat
		)
	)	
=>
	(up-jump-rule 1)
)
(defrule
	(goal save-wood-goal 0)
	(current-age >= castle-age)
	(can-afford-building town-center)
	(building-type-count-total town-center < 5)
	(goal increase-town-size-goal 0)
=>
	(enable-timer increase-town-size-timer 6)
	(set-goal increase-town-size-goal town-center)
	(set-strategic-number sn-camp-max-distance camp-distance-tc); don't build TC too far waway.
)
(defrule
	(goal increase-town-size-goal town-center)
	(strategic-number sn-current-age == castle)
	(building-type-count town-center >= 1)
	(goal unit-goal monk)
=>
	(disable-timer increase-town-size-timer)
	(set-goal increase-town-size-goal 0)
)
(defrule
	(up-compare-goal increase-town-size-goal != town-center); don't mess with TC placement
	(game-time > 1200)
	(strategic-number sn-camp-max-distance < 35)
=>
	(set-strategic-number sn-camp-max-distance 35)
)
(defrule
	(game-time < 1800)
	(current-age >= castle-age)
	(building-type-count-total town-center >= tc-level-two)	
=>
	(set-strategic-number sn-town-center-placement lumber-camp)
	(set-strategic-number sn-dropsite-separation-distance 10)
)
(defrule
	(building-type-count town-center > 0)	
	(current-age >= castle-age)
	(strategic-number sn-town-center-placement != mining-camp)
	(or
		(and
			(building-type-count-total town-center == 1)
			(dropsite-min-distance stone > 5)
		)
		(game-time > 1800)
	)
=>
	(set-strategic-number sn-town-center-placement mining-camp)
)
(defrule
	(current-age == castle-age)
	(building-type-count-total town-center == 1)
	(goal increase-town-size-goal town-center)
	(nand
		(or
			(civ-selected mongol)
			(civ-selected chinese)
		)
		(goal control-goal shot)
	)
=>
	(set-strategic-number sn-maximum-stone-drop-distance 40)
	(set-strategic-number sn-stone-dropsite-distance 40)
	(set-strategic-number sn-maximum-gold-drop-distance 3)
	(set-strategic-number sn-gold-dropsite-distance 3)
)
(defrule
	(building-type-count town-center > 0)
	(current-age >= castle-age)
	(goal increase-town-size-goal town-center)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal unit-goal archer)
	(goal strategy-goal rush)
	(players-building-type-count any-enemy watch-tower > 0)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal 0)
)
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(building-type-count town-center > 0)
	(goal save-wood-goal 0)
	(goal increase-town-size-goal town-center)
	(building-type-count-total town-center < 5)
	(can-build town-center)
=>
	(build town-center)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
)
#else
(defrule
	(current-age >= castle-age)
	(building-type-count town-center > 0)
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center < 5)
	(can-afford-building town-center)
=>
	(up-assign-builders c: 621 c: 2)
	(set-goal increase-town-size-goal town-center)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
)
(defrule
	(building-type-count town-center > 0)
	(goal increase-town-size-goal town-center)
	(building-type-count-total town-center < 5)
	(can-build town-center)
=>
	(build town-center)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
)
#end-if
(defrule
	(can-afford-building town-center)
	(timer-triggered increase-town-size-timer)
	(goal increase-town-size-goal town-center)
	(up-pending-objects c: town-center == 0)
	(strategic-number sn-camp-max-distance >= camp-distance-tc)
	(strategic-number sn-camp-max-distance < 35)
=>
	(enable-timer increase-town-size-timer 6)
	(up-modify-sn sn-camp-max-distance c:+ 4)
)
(defrule
	(can-afford-building town-center)
	(timer-triggered increase-town-size-timer)
	(goal increase-town-size-goal town-center)
	(or
		(and
			(up-pending-objects c: town-center == 0)
			(strategic-number sn-camp-max-distance > 35)
		)
		(game-time > 1800)
	)
=>
	(set-strategic-number sn-town-center-placement 0)
)
(defrule
	(or
		(unit-type-count 213 > 0)
		(unit-type-count 225 > 0)
	)
	(up-get-fact 25 213 math-goal)
	(up-get-fact 25 225 math-goal2)
=>
	(up-modify-goal math-goal g:+ math-goal2); add dead builders
)
(defrule
	(or
		(unit-type-count 213 > 0)
		(unit-type-count 225 > 0)
	)
	(up-compare-goal math-goal > 7)
	(strategic-number sn-placement-zone-size != 8)
=>
	(set-strategic-number sn-placement-zone-size 8)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-assign-builders c: 621 c: 2)
	(up-assign-builders c: castle c: 2)
	(up-assign-builders c: bombard-tower c: 1)
	(set-strategic-number sn-town-center-placement 0)
	(set-strategic-number sn-percent-building-cancellation 100)
)
(defrule
	(or
		(unit-type-count 213 > 0)
		(unit-type-count 225 > 0)
	)
	(up-compare-goal math-goal < 5)
	(strategic-number sn-placement-zone-size == 8)
=>
	(set-strategic-number sn-placement-fail-delta 1)
	(set-strategic-number sn-placement-zone-size 2)
	(set-strategic-number sn-percent-building-cancellation 70)
	(up-assign-builders c: 621 c: 4)
	(up-assign-builders c: castle c: 4)	
)
#else; => DM
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(goal save-wood-goal 0)
	(building-type-count-total monastery > 0)
	(building-type-count-total siege-workshop > 0)
	(building-type-count-total town-center < 5)
	(goal increase-town-size-goal 0)
	(can-build town-center)
=>
	(build town-center)
)
(defrule
	(unit-type-count villager < 15)
	(goal increase-town-size-goal town-center)
=>
	(set-goal increase-town-size-goal 0)
)
#end-if
#end-if
#end-if; NOT WONDER-RACE
#load-if-not-defined DEATH-MATCH
(defrule
	(current-age == feudal-age)
	(or
		(up-research-status c: ri-wheel-barrow != research-pending)
		(current-age-time > 40)
	)
	(current-age-time > 20)
	(food-amount > 700)
	(up-compare-goal strategy-goal != flush)
	(building-type-count-total blacksmith == 0)
=>
	(up-assign-builders c: blacksmith c: 3)(disable-self)
)
(defrule
	(current-age-time < 10)
	(current-age == feudal-age)
	(or
		(and
			(up-pending-objects c: villager > 0)
			(food-amount > 700)
		)
		(or
			(goal strategy-goal flush)
			(goal strategy-goal sling)
		)
	)
=>
	(up-assign-builders c: archery-range c: 2)
	(up-assign-builders c: stable c: 2)
	(up-assign-builders c: market c: 2)(disable-self)
)
#end-if
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(building-type-count-total town-center < 3)
=>
	(set-goal increase-town-size-goal 0)
	(up-jump-rule 3)
)
(defrule
	(goal save-wood-goal 0)
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(player-in-game any-ally)
	(not (goal strategy-goal boom))
	(or
		(building-type-count-total town-center >= tc-level-two)
		(nor
			(goal unit-goal knight)
			(goal unit-goal archer)
		)
	)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal save-wood-goal 0)
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(or
		(and
			(goal strategy-goal boom)
			(building-type-count-total town-center >= tc-boom-monastery)
		)
		(goal strategy-goal fast-imp)
	)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(or
		(goal unit-goal wonder)
		(not (player-in-game any-ally))
	)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
	(food-amount > 500)
	(gold-amount > 400)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined DEATH-MATCH
(defrule
	(up-compare-goal increase-town-size-goal != monastery)
	(building-type-count-total siege-workshop > 0)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#else
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center >= tc-level-five)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-not-defined WONDER-RACE
(defrule
	(building-type-count-total town-center == 0); rebuild tc and no stone => get a market and buy some.
	(stone-amount < 100)
	(building-type-count-total market == 0)
	(dropsite-min-distance wood < 10)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(or
		(or
			(and
				(building-type-count-total town-center >= tc-level-four)
				(current-age >= castle-age)
			)
			(strategic-number sn-resource-control == sling)
		)
		(and
			(wood-amount > 430)
			(building-type-count-total town-center >= tc-level-three)
		)
	)
	(goal save-wood-goal 0)
	(building-type-count-total market == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(or
		(and
			(game-time >= 1800)
			(player-in-game any-ally)
		)
		(or
			(building-type-count town-center >= tc-level-four)
			(and
				(research-available imperial-age)
				(goal strategy-goal fast-imp)
			)
		)
				
	)
	(building-type-count-total market == 0)
	(can-afford-building market)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 3)
)
#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined UP-1-PLAYER-TEAM
#load-if-not-defined UP-2-PLAYER-TEAM
#load-if-not-defined VIKING-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(up-compare-goal unit-goal != scout-cavalry)
	(goal monk-threat-goal 0)
	(not (research-available ri-bloodlines))
=>
	(up-jump-rule 1)
)
#end-if
#end-if
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(or
		(goal strategy-goal flush)
		(goal unit-goal mix)
	)
	(building-type-count-total archery-range > 0)
	(or
		(goal unit-goal scout-cavalry)
		(or
			(and
				(strategic-number sn-current-age >= fc-transit)
				(game-time < 1800); don't build them too late e.g. after slinging
			)
			(goal monk-threat-goal 1)
		)
	)
	(building-type-count-total stable < 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined BRITON-CIV
(defrule
	(goal increase-town-size-goal 0)
	(research-available ri-man-at-arms)
	(players-unit-type-count every-enemy skirmisher-line > 24)
	(or
		(and
			(building-type-count-total town-center >= tc-level-three)
			(building-type-count-total stable < 1)
		)
		(unit-type-count-total villager > 90)
	)
	(building-type-count-total stable < 2)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal archer)
	(building-type-count-total stable < 1)
	(building-type-count-total archery-range > 2)
	(research-available ri-man-at-arms)
	(players-civ any-enemy aztec)
	(or
		(goal enemy-goal eagle-warrior)
		(or
			(players-building-type-count any-enemy market > 0)
			(players-building-type-count any-enemy barracks > 1)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined CHINESE-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total town-center >= tc-level-four)
	(unit-type-count-total villager > 90)
	(building-type-count-total stable < 2)
	(wood-amount >= 175)
	(food-amount > 600)
	(gold-amount < 75)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(or
		(or
			(or
				(unit-type-count-total cavalry-units > 11)
				(unit-type-count-total cavalry-archer-units > 11)
			)
			(unit-type-count-total conquistador-line > 11)
		)
		(strategic-number sn-current-age >= ci-transit)
	)
	(wood-amount >= 175)
	(building-type-count-total stable < 1)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(or
		(and
			(unit-type-count-total mameluke-line > 11)
			(building-type-count-total stable < 1)
		)
		(and
			(research-completed ri-hussar)
			(and	
				(food-amount > 1200)
				(wood-amount > 400)
			)
		)
	)
	(building-type-count-total stable < 7)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-not-defined VIKING-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal archer)
	(building-type-count-total archery-range > 3)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total stable < 2)
	(research-available ri-man-at-arms)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(and
			(unit-type-count villager > 50)
			(and
				(food-amount > 400)
				(gold-amount < 150)
			)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal gunpowder-units)
	(building-type-count-total stable < 2)
	(building-type-count-total archery-range > 1)
	(or
		(and
			(civ-selected turkish)
			(strategic-number sn-cavalry-threat > 0); get camels vs cavalry with turks
		)
		(and
			(building-type-count-total archery-range > 5)
			(building-type-count-total university > 0)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(or
		(building-type-count-total town-center >= tc-level-four)
		(or
			(goal monk-threat-goal 1)
			(and
				(goal meso-enemy-goal 1)
				(or
					(goal enemy-goal rush)
					(goal enemy-goal eagle-warrior)
				)
			)
		)
	)
	(building-type-count-total stable < 1)
	(current-age >= castle-age)
	(goal unit-goal skirmisher)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined INDIAN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total stable < 3)
	(up-research-status c: imperial-age >= research-available)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total stable < 1)
	(goal strategy-goal boom)
	(goal monk-threat-goal 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total stable < 2)
	(or
		(and
			(building-type-count-total blacksmith > 0)
			(up-compare-goal strategy-goal != boom)
		)
		(building-type-count-total stable < 1)
	)
	(or
		(goal unit-goal knight)
		(and
			(goal unit-goal scout-cavalry)
			(goal strategy-goal rush)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total stable < 1)
	(goal unit-goal cavalry-archer)
	(or
		(goal control-goal 0)
		(and
			(or
				(building-type-count-total monastery > 0)
				(building-type-count-total town-center >= tc-level-two)
			)
			(building-type-count-total archery-range > 2)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal knight)
	(goal control-goal shot)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total stable < 3)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total university > 0)
	(research-completed ri-light-cavalry)
	(or
		(building-type-count-total stable < 3)
		(and
			(wood-amount > 350)
			(strategic-number sn-current-age >= ci-transit)
		)
	)
	(building-type-count-total stable < 4)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(or
		(building-type-count-total town-center >= tc-level-five)
		(and
			(strategic-number sn-military-level < 0)
			(building-type-count-total town-center >= tc-level-four)
		)
	)
	(goal unit-goal knight)
	(or
		(building-type-count-total stable < 4)
		(and
			(wood-amount > 220)
			(strategic-number sn-current-age >= ci-transit)
		)
	)
	(building-type-count-total stable < 6)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#load-if-not-defined HUN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal knight)
	(goal strategy-goal boom)
	(building-type-count town-center >= tc-level-three)
	(or
		(building-type-count-total stable < 2)
		(building-type-count-total town-center >= tc-level-four)	
	)
	(strategic-number sn-military-level < 0)
	(goal position-goal flank)
	(building-type-count-total stable < 4)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(building-type-count town-center >= tc-level-two)
	(goal unit-goal default-ranged)
	(or
		(or
			(civ-selected frankish)
			(civ-selected persian)
		)
		(or
			(civ-selected spanish)
			(civ-selected teutonic)
		)
	)
	(building-type-count-total stable < 2)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-five)
	(building-type-count-total stable < 8)
	(goal unit-goal knight)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-defined DEATH-MATCH
(defrule
	(or
		(building-type-count-total stable < 1)
		(or
			(building-type-count-total blacksmith > 0)
			(current-age >= castle-age)
		)
	)
	(or
		(or
			(building-type-count-total stable < 6)
			(civ-selected hun)
		)
		(building-type-count-total siege-workshop > 0)
	)
	(building-type-count-total stable < number-stables)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if; NOT AZTEC
#end-if; NOT INCAN
#end-if; NOT MAYAN
#load-if-defined INCAN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total archery-range < 2)
	(building-type-count-total monastery > 0)
	(or
		(strategic-number sn-infantry-threat > 1)
		(players-civ focus-player gothic)
	)
	(or
		(building-type-count-total archery-range < 1)
		(building-type-count-total siege-workshop > 0)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks > 2)
	(goal unit-goal eagle-warrior)
	(players-unit-type-count every-enemy eagle-warrior-line < 6)
	(strategic-number sn-cavalry-threat == 0)
	(wood-amount > 350)
	(food-amount > 150)
	(gold-amount < 50)
	(building-type-count-total archery-range < 2)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total town-center >= tc-level-three)
	(or
		(building-type-count-total archery-range < 1)
		(and
			(building-type-count-total town-center >= tc-level-four)
			(or
				(research-completed ri-crossbow)
				(civ-selected hun)
			)
		)
	)
	(building-type-count-total archery-range < 2)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(or
		(goal enemy-goal flush)
		(and
			(current-age-time > 200)
			(wood-amount > 270)
		)
	)
	(building-type-count-total archery-range < 3)
	(strategic-number sn-current-age == feudal)
	(building-type-count-total blacksmith > 0)
	(wood-amount >= 220)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age == feudal-age)
	(not (goal unit-goal knight))
	(building-type-count-total market < 1)
	(building-type-count-total archery-range < 1)
	(building-type-count barracks > 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total market > 0)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total university > 0)
	(building-type-count-total archery-range < 1)
	(building-type-count barracks > 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(building-type-count-total archery-range < 2)
	(building-type-count-total blacksmith > 0)
	(or
		(strategic-number sn-archer-threat > 1)
		(and
			(players-building-type-count any-enemy archery-range > 1)
			(goal enemy-goal skirmisher)
		)
	)
	(strategic-number sn-infantry-threat == 0)
	(strategic-number sn-cavalry-threat == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(building-type-count barracks > 0)
	(or
		(and
			(building-type-count-total archery-range < 2)
			(and
				(research-available ri-man-at-arms)
				(or
					(building-type-count-total stable == 0)
					(strategic-number sn-current-age >= fc-transit)
				)
			)
		)
		(goal unit-goal archer)
	)
	(building-type-count-total archery-range < 3)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total blacksmith > 0)
	(or
		(goal strategy-goal rush)
		(goal strategy-goal flush)
	)
	(building-type-count-total archery-range < 4)
	(or
		(building-type-count-total archery-range < 3)
		(or
			(building-type-count-total town-center >= tc-level-three)
			(unit-type-count-total battering-ram-line > 0)
		)
	)
	(goal unit-goal archer)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(or
		(goal unit-goal archer)
		(goal unit-goal cavalry-archer)
	)
	(goal strategy-goal boom)
	(building-type-count-total town-center >= tc-level-three)
	(or
		(building-type-count-total archery-range < 3)
		(building-type-count-total town-center >= tc-level-four)	
	)
	(strategic-number sn-military-level < 0)
	(building-type-count-total archery-range < 5)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined VIKING-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal archer)
	(goal strategy-goal boom)
	(building-type-count-total town-center >= 3)
	(or
		(research-available imperial-age)
		(strategic-number sn-current-age >= ci-transit)
	)
	(building-type-count-total archery-range < 8)
	(wood-amount >= 220)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal gunpowder-units)
	(or
		(building-type-count-total archery-range < 2)
		(or
			(building-type-count-total town-center >= 2)
			(civilian-population > 80)
		)
	)
	(or
		(building-type-count-total archery-range < 3)
		(civilian-population > 80)
	)
	(building-type-count-total archery-range < 6)	
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined BYZANTINE-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total town-center >= tc-level-two)
	(or
		(building-type-count-total archery-range < 2)
		(and
			(building-type-count-total town-center >= 3)
			(strategic-number sn-cavalry-threat < 2)
		)
	)
	(or
		(strategic-number sn-cavalry-threat < 1)
		(building-type-count-total barracks > 1)
	)
	(building-type-count-total archery-range < 4)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#else
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total archery-range < 2)
	(or
		(strategic-number sn-cavalry-threat < 1)
		(building-type-count-total barracks > 1)
	)
	(or
		(goal unit-goal skirmisher)
		(goal unit-goal mix)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-not-defined CELTIC-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal unit-goal knight)
	(goal strategy-goal rush)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count siege-workshop == 0)
	(food-amount < 180)
	(current-age >= castle-age)
	(goal anti-cavalry-threat-goal 0)
=>
	(up-jump-rule 2)
)
#end-if
#end-if
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal unit-goal knight)
	(goal strategy-goal rush)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(goal enemy-goal eagle-warrior); he will come with pikes
	)
	(building-type-count-total archery-range < 2)
	(wood-amount >= 175)
	(current-age >= castle-age)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal knight)
	(building-type-count-total town-center >= tc-level-two)
	(or
		(or
			(goal anti-cavalry-threat-goal 1)
			(strategic-number sn-archer-threat > 1)
		)
		(or
			(goal enemy-goal flush)
			(goal enemy-goal skirmisher)
		)
	)
	(up-compare-goal position-goal != pocket)
	(building-type-count-total archery-range < 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined UP-1-PLAYER-TEAM
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal knight)
	(players-unit-type-count any-enemy spearman-line > 6)
	(building-type-count-total archery-range < 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(players-civ every-enemy gothic)
	(strategic-number sn-current-age >= fc-transit)
	(building-type-count-total archery-range < 4)
	(wood-amount >= 175)
=>
	(set-goal control-goal aggressive-rush)
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total blacksmith > 0)
	(or
		(building-type-count-total stable > 0)
		(building-type-count-total archery-range < 3)
	)
	(or
		(building-type-count-total siege-workshop > 0)
		(building-type-count-total archery-range < 4)
	)
	(building-type-count-total archery-range < 6)
	(or
		(goal unit-goal cavalry-archer)
		(goal strategy-goal flush)
	)
	(goal control-goal aggressive-rush)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal unit-goal knight)
	(goal strategy-goal rush)
	(or
		(not (civ-selected celtic))
		(research-completed ri-elite-skirmisher)
	)
	(building-type-count-total town-center >= tc-level-four)
	(building-type-count-total archery-range < 4)
	(not (goal control-goal my-unique-unit-line))
	(wood-amount >= 225)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined POPULATION-CAP-50
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total university > 0)
	(building-type-count-total siege-workshop > 0)
	(research-completed ri-elite-skirmisher)
	(wood-amount > 300); excess wood
	(or
		(building-type-count-total archery-range < 6)
		(wood-amount > 600)
	)
	(building-type-count-total archery-range < 8)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if
(defrule
	(goal increase-town-size-goal archery-range)
	(nor
		(goal ranged-unit-type-goal archer)
		(goal ranged-unit-type-goal cavalry-archer)
	)
	(wood-amount < 800)
	(building-type-count-total archery-range > 3)
	(strategic-number sn-archer-threat < 3)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal archery-range)
	(goal unit-goal eagle-warrior)
	(goal control-goal shot)
	(building-type-count-total town-center < tc-level-three)
	(building-type-count-total barracks < 6)
	(current-age >= castle-age)
=>
	(set-goal increase-town-size-goal 0)
)
#load-if-defined DEATH-MATCH
(defrule
	(game-time > 60)
	(or
		(building-type-count-total archery-range < 1)
		(building-type-count-total blacksmith > 0)
	)
	(or
		(or
			(building-type-count-total archery-range < 4)
			(civ-selected hun)
		)
		(building-type-count-total university > 0)
	)
	(building-type-count-total archery-range < number-archery-ranges)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(or
		(or
			(building-type-count barracks == 0); prerequisits missing
			(current-age == dark-age)
		)
		(goal save-wood-goal 1)
	)
	(or
		(goal increase-town-size-goal archery-range)
		(goal increase-town-size-goal stable)
	)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal strategy-goal flush)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal barracks)
	(goal enemy-boats-goal 1)
	(goal strategy-goal flush)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total dock < 2)
	(players-building-type-count every-enemy barracks == 0)
	(players-building-type-count every-enemy archery-range == 0)
	(players-building-type-count every-enemy stable == 0)
=>
	(set-goal increase-town-size-goal 0); skip barracks for more boats
	(disable-timer increase-town-size-timer)
)
#load-if-not-defined SARACEN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal strategy-goal rush)
	(nor
		(goal unit-goal monk)
		(or
			(goal unit-goal eagle-warrior)
			(goal unit-goal my-unique-unit-line)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks < 3)
	(or
		(civ-selected aztec)
		(building-type-count-total barracks < 1)
	)
	(building-type-count town-center > 0)
	(goal unit-goal monk)
	(or
		(or
			(goal anti-monk-threat-goal 1)
			(strategic-number sn-cavalry-threat > 1)
		)
		(building-type-count town-center >= tc-level-three)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal strategy-goal boom)
	(or
		(nor 
			(goal unit-goal my-unique-unit-line)
			(goal unit-goal scorpion)
		)
		(or
			(strategic-number sn-cavalry-threat > 1)
			(goal monk-threat-goal 1)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(building-type-count blacksmith > 0)
	(building-type-count-total watch-tower > 1)
	(goal unit-goal my-unique-unit-line)
	(or
		(players-unit-type-count focus-player scout-cavalry > 3)
		(players-building-type-count focus-player stable > 0)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#else
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks < 3)
	(or
		(civ-selected aztec)
		(building-type-count-total barracks < 1)
	)
	(building-type-count town-center > 0)
	(goal unit-goal monk)
	(or
		(goal anti-monk-threat-goal 1)
		(building-type-count town-center >= tc-level-three)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal unit-goal my-unique-unit-line)
	(strategic-number sn-cavalry-threat > 1)
	(current-age-time > 400)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal strategy-goal boom)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(or		
		(up-compare-goal unit-goal != scorpion)
		(strategic-number sn-cavalry-threat > 1)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks < 3)
	(building-type-count town-center > 0)
	(or
		(goal strategy-goal boom)
		(goal strategy-goal fast-imp)
	)
	(or
		(building-type-count-total barracks < 2)
		(building-type-count-total siege-workshop > 0)
	)
	(goal unit-goal eagle-warrior)
	(strategic-number sn-military-level < 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(or
		(goal strategy-goal fast-imp)
		(goal unit-goal my-unique-unit-line)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined SARACEN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks < 1)
	(building-type-count-total blacksmith > 0)
	(building-type-count town-center > 0)
	(goal strategy-goal rush)
	(up-compare-goal unit-goal != monk)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined POPULATION-CAP-50
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total market > 0)
	(or
		(building-type-count-total barracks < 1)
		(and
			(building-type-count-total town-center >= tc-level-four)
			(or
				(research-completed ri-long-swordsman)
				(unit-available eagle-warrior-line)
			)
		)
	)
	(building-type-count-total barracks < 3)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total monastery > 0)
	(building-type-count-total town-center >= tc-level-two)
	(strategic-number sn-cavalry-threat > 0)
	(or
		(building-type-count-total barracks < 2)		
		(and
			(building-type-count-total town-center >= tc-level-four)
			(research-completed ri-pikeman)
		)
	)
	(building-type-count-total barracks < 4)
	(goal unit-goal skirmisher)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(strategic-number sn-cavalry-threat > 1); dont care about TC if enemy has lots of knights
	)
	(nand
		(goal unit-goal knight)
		(building-type-count-total town-center == 1)
	)
	(building-type-count-total barracks < 3)
	(research-completed ri-pikeman)
	(goal strategy-goal rush)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(building-type-count-total town-center >= tc-level-four)
		(building-type-count-total barracks < 2)
	)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total barracks < 3)
	(research-completed ri-pikeman)
	(goal strategy-goal boom)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total barracks < 4)
	(or
		(goal unit-goal eagle-warrior)
		(research-completed ri-halberdier)
	)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(building-type-count-total barracks < 3)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(building-type-count-total barracks < 10)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total town-center >= tc-level-three)
	(or
		(building-type-count-total barracks < 6)
		(wood-amount > 400)
	)
	(wood-amount > 220)
	(or
		(goal unit-goal eagle-warrior)
		(research-completed ri-halberdier)
	)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal barracks)
	(goal strategy-goal boom)
	(goal unit-goal eagle-warrior)
	(or
		(building-type-count-total barracks > 0)
		(strategic-number sn-current-age < fc-transit)
	)
	(nand
		(building-type-count-total barracks < 2)
		(building-type-count-total town-center >= tc-level-three)
	)
=>
	(set-goal increase-town-size-goal 0)
	(disable-timer increase-town-size-timer)
)
(defrule
	(goal increase-town-size-goal barracks)
	(goal strategy-goal fast-imp)
	(building-type-count-total barracks > 0)
	(not (research-available imperial-age))
=>
	(set-goal increase-town-size-goal 0)
	(disable-timer increase-town-size-timer)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total barracks < 4)
	(goal unit-goal eagle-warrior)
	(goal strategy-goal rush)
	(or
		(building-type-count-total monastery > 0)
		(goal control-goal aggressive-rush)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
	(or 
		(and
			(goal enemy-goal eagle-warrior)
			(current-age == feudal-age)
		)
		(and
			(research-completed ri-elite-skirmisher)
			(building-type-count-total town-center >= tc-level-two)
		)
	)
	(building-type-count-total barracks < 2)
	(building-type-count-total blacksmith > 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(goal strategy-goal rush)
	(goal unit-goal militiaman-line)
	(building-type-count-total barracks < 2)
	(building-type-count-total blacksmith > 0)
	(research-completed ri-double-bit-axe)
	(research-completed ri-horse-collar)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or 
		(or
			(goal unit-goal militiaman-line)
			(goal control-goal militiaman-line)
		)
		(research-completed ri-pikeman)
	)
	(building-type-count-total barracks < 8)
	(building-type-count-total university > 0)
	(building-type-count-total siege-workshop > 0)
	(wood-amount > 420)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(or
		(and
			(goal strategy-goal flush)
			(strategic-number sn-cavalry-threat > 1)
		)
		(and
			(population-cap < 75)
			(research-completed ri-pikeman)
		)
	)
	(building-type-count-total barracks < 2)
	(building-type-count-total blacksmith > 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(goal increase-town-size-goal barracks)
	(strategic-number sn-current-age < ci-transit)
=>
	(set-goal increase-town-size-goal 0)
	(disable-timer increase-town-size-timer)
)
#end-if
#load-if-defined DEATH-MATCH
(defrule
	(or
		(building-type-count-total barracks < 1)
		(or
			(or
				(building-type-count-total lumber-camp > 0)
				(building-type-count-total mill > 0)
			)
			(building-type-count-total blacksmith > 0)
		)
	)
	(or
		(building-type-count-total barracks < 5)
		(building-type-count-total siege-workshop > 0)
	)
	(building-type-count-total barracks < number-barracks)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-defined DIFFICULTY-HARDEST
#load-if-defined DARK-AGE-START
(defrule
	(cc-players-building-type-count any-human barracks > 0)
	(game-time < 490)
	(building-type-count-total barracks == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if
(defrule
	(or
		(goal increase-town-size-goal siege-workshop)
		(or
			(or
				(goal increase-town-size-goal barracks)
				(goal increase-town-size-goal archery-range)
			)
			(goal increase-town-size-goal stable)
		)
	)
	(building-type-count-total town-center == 0)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(wood-amount < 200)
	(or
		(goal increase-town-size-goal siege-workshop)
		(and
			(wood-amount < 175)
			(or
				(or
					(goal increase-town-size-goal barracks)
					(goal increase-town-size-goal archery-range)
				)
				(goal increase-town-size-goal stable)
			)
		)
	)
=>
	(set-goal increase-town-size-goal 0)
	(chat-local-to-self "not enough wood to build")
)
(defrule; don't build if we save
	(or
		(strategic-number sn-resource-control == 3); hand-cart upgrade
		(or
			(and
				(strategic-number sn-resource-control == ri-elite-skirmisher)
				(building-type-count archery-range > 0)
			)
			(and
				(or
					(strategic-number sn-resource-control == battering-ram)
					(goal save-wood-goal 1)
				)
				(building-type-count siege-workshop > 0)
			)
		)
	)
=>
	(set-goal increase-town-size-goal 0)
)
#end-if; NOT WONDER-RACE
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-current-age == feudal)
	(or
		(building-type-count-total barracks == 0); no rax => market+bs start
		(or
			(and
				(goal strategy-goal rush); fail save for maps with a rax at start
				(civ-selected saracen); use saracen market advantage
			)
			(or
				(goal strategy-goal sling)
				(strategic-number sn-resource-control == sling)
			)
		)
	)
	(building-type-count-total market < 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal market)
	(or
		(or
			(building-type-count-total market > 0)
			(wood-amount < 175)
		)
		(or
			(or
				(strategic-number sn-current-age == fc-transit)
				(strategic-number sn-resource-control == 3)
			)
			(strategic-number sn-resource-control == ri-elite-skirmisher)
		)
	)
=>
	(set-goal increase-town-size-goal 0)
	(chat-local-to-self "market placed/or aborted")
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(current-age == imperial-age)
	(current-age-time > 40)
	(current-age-time < 300)
	(building-type-count-total blacksmith < 2)
	(can-afford-building blacksmith)
=>
	(enable-timer increase-town-size-timer 3)
	(set-goal increase-town-size-goal blacksmith)
)
#end-if	
(defrule
	(game-time > 60)
	(goal increase-town-size-goal 0)
	(food-amount > 550)
	(nand
		(goal strategy-goal sling)
		(current-age-time < 600)
	)
	(building-type-count town-center > 0)
	(or 
		(or
			(building-type-count-total stable > 0)
			(building-type-count-total archery-range > 0)
		)
		(building-type-count-total market > 0)
	)
	(building-type-count-total blacksmith < number-blacksmiths)
	(can-afford-building blacksmith)
=>
	(enable-timer increase-town-size-timer 3)
	(set-goal increase-town-size-goal blacksmith)
)
(defrule
	(game-time > 60)
	(goal strategy-goal flush)
	(goal increase-town-size-goal 0)
	(or
		(and
			(building-type-count-total archery-range > 0)
			(or
				(building-type-count-total stable > 0)
				(research-completed ri-man-at-arms)
			)
		)
		(building-type-count-total archery-range > 1)
	)
	(building-type-count-total mining-camp > 0)
	(building-type-count-total blacksmith < 1)
	(can-afford-building blacksmith)
=>
	(enable-timer increase-town-size-timer 3)
	(set-goal increase-town-size-goal blacksmith)
)
(defrule
	(goal increase-town-size-goal blacksmith)
	(building-type-count town-center > 0)
	(can-build blacksmith)
=>
	(build blacksmith)
	(set-goal increase-town-size-goal 2)
)
#end-if
(defrule
	(or
		(goal increase-town-size-goal market)
		(goal increase-town-size-goal barracks)
	)
	(goal save-wood-goal 1)
=>
	(set-goal increase-town-size-goal 0)
)
#load-if-defined NEEDS-MORE-TESTING
#load-if-not-defined BLACK-FOREST-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-maximum-town-size >= 70)
	(goal unit-goal archer)
	(or
		(civ-selected viking)
		(civ-selected japanese)
	)
	(or
		(wood-amount > 700)
		(goal increase-town-size-goal archery-range)
	)
	(building-type-count-total archery-range < 12)
	(building-type-count-total archery-range > 3)
=>
	(set-goal forward-goal archery-range)
)
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CELTIC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-maximum-town-size >= 70)
	(or
		(research-completed ri-paladin)
		(research-completed ri-heavy-camel)
	)
	(gold-amount > 500)
	(wood-amount > 1100)
	(building-type-count-total stable < 12)
	(building-type-count-total stable > 5)
=>
	(set-goal forward-goal stable)
)
#end-if
#end-if
#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-maximum-town-size >= 70)
	(or
		(research-completed ri-champion)
		(research-completed ri-anarchy)
	)
	(or
		(wood-amount > 700)
		(goal increase-town-size-goal barracks)
	)
	(building-type-count-total barracks < 15)
	(building-type-count-total barracks > 5)
=>
	(set-goal forward-goal barracks)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-maximum-town-size >= 70)
	(research-completed ri-halberdier)
	(strategic-number sn-cavalry-threat > 2)
	(or
		(wood-amount > 1100)
		(goal increase-town-size-goal barracks)
	)
	(building-type-count-total barracks < 9)
=>
	(set-goal forward-goal barracks)
)
(defrule
	(strategic-number sn-maximum-town-size >= 70)
	(up-compare-goal forward-goal > 0)
	(goal forward-point-goal -1)
	(up-can-build 0 g: forward-goal)
	(strategic-number sn-target-player-number g:== threat-player-goal)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-get-point position-target forward-point-goal)
	(up-lerp-tiles forward-point-goal position-self-goal c: 20)
	(up-set-target-point forward-point-goal)
	(up-build place-point 0 g: forward-goal)
	(set-strategic-number sn-placement-zone-size 5)
	(set-goal forward-goal -1)
	(chat-to-all "build forward1")
)
(defrule
	(strategic-number sn-maximum-town-size >= 70)
	(up-compare-goal forward-goal > 0)
	(up-compare-goal forward-point-goal > 0)
	(up-can-build 0 g: forward-goal)
=>
	(up-set-target-point forward-point-goal)
	(up-build place-point 0 g: forward-goal)
	(set-strategic-number sn-placement-zone-size 5)
	(set-goal forward-goal -1)
	(chat-to-all "build forward2")
)
#end-if
#end-if
(defrule
	(building-type-count-total monastery == 0)
	(goal increase-town-size-goal monastery)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal market)
	(building-type-count-total market < 1)
	(can-build-with-escrow market)
=>
	(release-escrow wood)
	(build market)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal stable)
	(can-build stable)
=>
	(build stable)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal barracks)
	(can-build barracks)
=>
	(build barracks)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal archery-range)
	(can-build archery-range)
=>
	(build archery-range)
	(set-goal increase-town-size-goal 2)
)
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-defined DEATH-MATCH
(defrule
	(game-time > 60)
=>
	(set-strategic-number sn-maximum-town-size 12)
	(disable-self)
)
(defrule
	(game-time > 120)
=>
	(set-strategic-number sn-maximum-town-size 14)
	(disable-self)
)
#load-if-not-defined FEUDAL-AGE-START
(defrule
	(current-age == feudal-age)
	(current-age-time > 20)
=>
	(set-strategic-number sn-maximum-town-size 14)
)
(defrule
	(current-age == feudal-age)
	(current-age-time > 90)
=>
	(set-strategic-number sn-maximum-town-size 16)
)
(defrule
	(current-age == feudal-age)
	(current-age-time > 180)
=>
	(set-strategic-number sn-maximum-town-size 20)
)
#end-if
#end-if
#else
(defrule
	(game-time < 90)
=>
	(set-strategic-number sn-maximum-town-size 8)
	(set-strategic-number sn-percent-building-cancellation 5)(disable-self)
)
(defrule
	(game-time > 90)
=>
	(set-strategic-number sn-maximum-town-size 12)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-wood-drop-distance 30)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-maximum-hunt-drop-distance 24)
	(set-strategic-number sn-gold-gatherer-percentage 100)
	(set-strategic-number sn-cap-civilian-builders 100)
	(set-strategic-number sn-cap-civilian-gatherers 100)(disable-self)
)
(defrule
	(game-time > 120)
=>
	(set-strategic-number sn-maximum-town-size 15)(disable-self)
)
(defrule
	(game-time > 180)
=>
	(set-strategic-number sn-maximum-town-size 18)(disable-self)
)
(defrule
	(game-time > 240)
=>
	(set-strategic-number sn-maximum-town-size 22)
	(set-strategic-number sn-camp-max-distance 50)(disable-self)
)
(defrule
	(game-time > 300)
	(strategic-number sn-maximum-town-size < 26)
=>
	(set-strategic-number sn-maximum-town-size 26)
	(set-strategic-number sn-percent-building-cancellation 75)(disable-self)
)
(defrule
	(game-time > 480)
	(strategic-number sn-maximum-town-size < 30)
=>
	(set-strategic-number sn-maximum-town-size 30)(disable-self)
)
#end-if
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(current-age >= castle-age)
	(or
		(building-type-count-total town-center >= tc-level-four)
		(unit-type-count-total villager >= max-civ)		
	)
	(can-afford-building university)
	(building-type-count-total university == 0)
	(goal increase-town-size-goal 0)
=>
	(set-goal increase-town-size-goal university)
	(enable-timer increase-town-size-timer 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total monastery > 0)
	(building-type-count-total university == 0)
	(wood-amount >= 200)
	(food-amount > 500)
	(gold-amount > 400)
=>
	(set-goal increase-town-size-goal university)
	(enable-timer increase-town-size-timer 3)
)
#load-if-not-defined TURKISH-CIV
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal gunpowder-units)
	(can-afford-building university)
	(building-type-count-total university == 0)
	(goal increase-town-size-goal 0)
=>
	(set-goal increase-town-size-goal university)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(or
		(or 
			(building-type-count-total university > 0)
			(wood-amount < 200)
		)
		(or
			(up-compare-goal save-wood-goal != 0)
			(and
				(goal strategy-goal boom)
				(and
					(building-type-count-total town-center < tc-level-five)
					(or
						(food-amount < 600)
						(gold-amount < 500)
					)
				)
			)
		)
	)
	(goal increase-town-size-goal university)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal university)
	(building-type-count-total university < 1)
	(can-build university)
=>
	(build university)
	(set-goal increase-town-size-goal 2)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(building-type-count-total dock < 12)
	(can-build dock)
=>
	(build dock)
	(set-strategic-number sn-dock-proximity-factor -10000)
	(set-strategic-number sn-dock-placement-mode dock-placement)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(not (can-build dock))
	(unit-type-count eagle-warrior-line > 0)
	(building-type-count-total barracks == 0)
	(can-build barracks)
=>
	(build barracks)
	(set-strategic-number sn-number-explore-groups 3)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(not (can-build dock))
	(building-type-count-total stable == 0)
	(can-build stable)
=>
	(build stable)
	(set-strategic-number sn-number-explore-groups 3)
)
(defrule
	(building-type-count town-center > 0)
	(unit-type-count villager > villager-siege-workshop)
	(building-type-count-total siege-workshop < 1)
	(can-build siege-workshop)
=>
	(build siege-workshop)
)
(defrule
	(or 
		(and
			(unit-type-count villager >= villager-monastery)
			(or
				(goal position-goal pocket)
				(not (player-in-game any-ally))
			)
		)
		(or
			(unit-type-count villager >= 18)
			(civ-selected aztec)
		)
	)
	(can-build monastery)
	(building-type-count-total monastery < 1)
=>
	(build monastery)
)
(defrule
	(unit-type-count villager >= 13)
	(can-build town-center)
	(building-type-count-total town-center < 6)
=>
	(build town-center)
)

(defrule
	(can-build stable)
	(or 
		(building-type-count-total market < 1)
		(building-type-count farm > 0)
	)
	(unit-type-count villager >= villager-stable)
	(building-type-count-total stable < number-stables)
=>
	(build stable)
)
(defrule
	(can-build archery-range)
	(building-type-count-total archery-range < number-archery-ranges)
	(or
		(unit-type-count villager >= villager-archery-range)
		(and
			(building-type-count-total market < 1)
			(civ-selected hun)
		)
	)
=>
	(build archery-range)
)
(defrule
	(can-build barracks)
	(or
		(or 
			(research-completed ri-champion)
			(civ-selected mayan)
		)
		(strategic-number sn-cavalry-threat >= 1)
	)
	(building-type-count-total barracks < number-barracks)
	(unit-type-count villager >= villager-barracks)
=>
	(build barracks)
)
(defrule
	(building-type-count-total market < 1)
	(unit-type-count villager >= villager-market)
	(can-build market)
=>
	(build market)
)
(defrule
	(building-type-count town-center > 0)
	(unit-type-count villager > villager-siege-workshop)
	(or
		(research-completed ri-heavy-scorpion)
		(and
			(civ-selected hun)
			(building-type-count-total siege-workshop < 2)
		)
	)
	(building-type-count-total siege-workshop < 3)
	(can-build siege-workshop)
=>
	(build siege-workshop)
)
#load-if-not-defined DEFEND-WONDER
(defrule
	(or
		(unit-type-count villager >= villager-mining-camp)
		(and
			(unit-type-count villager >= villager-town-center)
			(building-type-count-total mining-camp == 0)
		)
	)
	(building-type-count-total mining-camp < 6)
	(or 
		(resource-found gold)
		(resource-found stone)
	)
	(can-build mining-camp)
=>
	(build mining-camp)
)
#end-if
#end-if ;PIDM
;********** UNITS **********
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time < 180)
	(players-building-count every-enemy == 0)
	(unit-type-count scout-cavalry-line < 3)
=>
	(train scout-cavalry-line)
	(set-strategic-number sn-number-explore-groups 5)
	(set-strategic-number sn-minimum-explore-group-size 1)
)
#end-if
(defrule
	(strategic-number sn-number-explore-groups > 1)
	(players-building-count every-enemy > 0)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(disable-self)
)

; *** NAVY ***
#load-if-not-defined RIVERS-MAP
#load-if-not-defined BALTIC-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(can-train transport-ship)
	(players-unit-type-count every-enemy fire-ship-line < 15)
	(players-unit-type-count every-enemy galley-line < 15)
	(strategic-number sn-resource-control != 2)
	(current-age == imperial-age)
	(unit-type-count transport-ship < 3)
	(warboat-count > 40)
	(soldier-count > 20)
=>
	(train transport-ship)
)
#end-if
#end-if
#load-if-defined KOREAN-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(can-train turtle-ship-line)
	(or
		(unit-type-count turtle-ship-line < 12)
		(can-research ri-elite-turtle-ship)
	)
=>
	(research ri-elite-turtle-ship)
	(train turtle-ship-line)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(can-train cannon-galleon-line)
	(warboat-count >= 20)
	(or
		(unit-type-count cannon-galleon-line < 8)
		(warboat-count >= 50)
	)
	(unit-type-count cannon-galleon-line < 16)
=>
	(train cannon-galleon-line)
)
#load-if-defined POPULATION-CAP-200
(defrule
	(game-time < 1800)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-military-level > 0)
	(warboat-count > 15)
	(or
		(cc-players-unit-type-count 0 shore-fish > min-fishing)
		(cc-players-unit-type-count 0 sea-fish > min-fishing)
	)
	(dropsite-min-distance wood < 4)
	(civilian-population < max-civ)
	(population < max-civ-pop)
	(unit-type-count fishing-ship < 16)
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
#end-if
#load-if-defined VIKING-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(can-research-with-escrow ri-elite-longboat)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-elite-longboat)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(research-completed ri-elite-longboat)
	(warboat-count < max-fleet)
	(can-train longboat-line)
=>
	(train longboat-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 2)
	(unit-type-count fire-ship-line < 6)
	(or
		(current-age == castle-age)
		(research-completed ri-fast-fire-ship)
	)
	(goal enemy-boats-goal 1)
	(or
		(or
			(warboat-count < 15)
			(unit-type-count fire-ship-line < 6)
		)
		(and
			(civ-selected aztec)
			(warboat-count < 25)
		)
	)
	(can-train fire-ship-line)
=>
	(train fire-ship-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(strategic-number sn-resource-control < 2)
	(or
		(current-age == castle-age)
		(research-completed ri-fast-fire-ship)
	)
	(unit-type-count fire-ship-line < 24)
	(warboat-count < max-fleet)
	(can-train fire-ship-line)
=>
	(train fire-ship-line)
)
(defrule
	(strategic-number sn-resource-control < 2)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(research-completed ri-war-galley)
	(warboat-count < max-fleet)
	(can-train galley-line)
=>
	(train galley-line)
)
(defrule
	(strategic-number sn-resource-control < 2)
	(or
		(goal strategy-goal flush)
		(current-age > feudal-age)
	)
	(nor 
		(research-available ri-war-galley)
		(research-available ri-galleon)
	)
	(or
		(and
			(goal enemy-boats-goal 1)
			(warboat-count < max-warships)
		)
		(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	)
	(warboat-count < max-fleet)
	(can-train galley-line)
=>
	(train galley-line)
)

; counter units

#load-if-not-defined TEUTONIC-CIV
(defrule
	(or
		(and
			(strategic-number sn-resource-control <= 2)
			(or
				(strategic-number sn-resource-control < 1)
				(unit-type-count scout-cavalry-line < 6)
			)
		)
		(strategic-number sn-resource-control == ri-heresy)
	)
	(or
		(food-amount > 200)
		(unit-type-count scout-cavalry-line < 6)
	)
	(goal monk-threat-goal 1)
	(not (research-available ri-light-cavalry))
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#else
(defrule
	(nand
		(game-time > 1800)
		(players-unit-type-count every-enemy monk < 10)
	)
	(or
		(and
			(food-amount > 200)
			(strategic-number sn-resource-control < 2)
		)
		(unit-type-count scout-cavalry-line < 6)
	)
	(goal monk-threat-goal 1)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control >= 2)
=>
	(up-jump-rule 26)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal rush)
	(goal unit-goal scout-cavalry)
	(nor
		(research-available ri-double-bit-axe)
		(research-available ri-horse-collar)
	)
	(unit-type-count scout-cavalry-line < 5)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#load-if-defined ITALIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(and
			(unit-type-count my-unique-unit-line < 20)
			(strategic-number sn-cavalry-threat >= 1)
		)
		(research-completed my-unique-unit-upgrade)
	)
	(gold-amount > 100)
	(can-train genoese-crossbowman)
=>
	(train genoese-crossbowman)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal rush); when using fast castle strategy
	(unit-type-count spearman-line < 4)
	(strategic-number sn-current-age == fc-transit)
	(players-current-age every-enemy == castle-age)
	(players-current-age-time every-enemy >= 60); enemy at least 60s ahead of us in castle age
	(goal enemy-goal rush); possible enemy krush
	(goal meso-enemy-goal -1)
	(can-train spearman-line); make spearman so enemy won't raid us with knights
=>
	(train spearman-line)
)
#load-if-not-defined SARACEN-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined INDIAN-CIV
(defconst extra-anti-cav-unit spearman-line)
#else
(defconst extra-anti-cav-unit camel-line)
#end-if
#else
(defconst extra-anti-cav-unit camel-line)
#end-if
#else
(defconst extra-anti-cav-unit camel-line)
#end-if
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat >= 1)
	(or
		(players-unit-type-count any-enemy paladin > 0)
		(and
			(players-unit-type-count any-enemy camel-line > 10)
			(players-civ any-enemy saracen)
		)
	)
	(research-completed ri-halberdier)
	(unit-type-count extra-anti-cav-unit < 40)
	(can-train extra-anti-cav-unit)
=>
	(train extra-anti-cav-unit)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(or
			(goal unit-goal knight)
			(research-completed ri-imperial-camel)
		)
		(unit-type-count camel-line < 12)
	)
	(can-train camel-line)
=>
	(train camel-line)
)
#end-if
#load-if-defined SARACEN-CIV
#load-if-defined POST-IMPERIAL-AGE-START
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-resource-control < 1)
	(population < seventy-five-percent-pop)
	(game-time < 480)
	(can-train camel-line)
=>
	(train camel-line)
)
#end-if
#end-if
#end-if
(defrule
	(current-age <= castle-age)
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(building-type-count-total archery-range > 0)
	(strategic-number sn-cavalry-threat >= 1)
	(or
		(current-age == feudal-age)
		(research-completed ri-pikeman)
	)
	(unit-type-count spearman-line < 20)
	(unit-type-count camel-line < 12)
	(unit-type-count villager > 30); or we never make it anywhere if we lose villagers to knights
	(can-train spearman-line)		
=>
	(train spearman-line)
)
#load-if-defined BYZANTINE-CIV
(defrule
	(starting-age == post-imperial-age)
	(game-time > 600)
	(building-type-count castle > 0)
=>
	(up-jump-rule 1)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-paladin)
	(or
		(or
			(and
				(players-unit-type-count every-enemy spearman-line < 25)
				(players-unit-type-count every-enemy camel-line < 20)
			)
			(and
				(civ-selected celtic)
				(gold-amount > 2000)
			)
		)
		(or
			(strategic-number sn-archer-threat > 1)
			(players-unit-type-count any-enemy scorpion-line > 10)
		)
	)
	(can-train knight-line)
=>
	(train knight-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count my-unique-unit-line < 20)
	(strategic-number sn-infantry-threat >= 1)
	(or
		(gold-amount > 100)
		(research-completed my-unique-unit-upgrade)
	)
	(or
		(or 
			(civ-selected aztec)
			(civ-selected byzantine)
		)
		(or 
			(civ-selected spanish)
			(research-completed ri-elite-teutonic-knight)
		)
	)
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train my-unique-unit-line)
	(unit-type-count my-unique-unit-line < 12)
	(goal enemy-goal eagle-warrior)
	(or
		(or 
			(civ-selected aztec)
			(civ-selected byzantine)
		)
		(or 
			(civ-selected japanese)
			(civ-selected teutonic)
		)
	)
=>
	(train my-unique-unit-line)
)
#load-if-defined INCAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count slinger < 20)
	(or
		(strategic-number sn-infantry-threat > 1)
		(goal ranged-unit-type-goal slinger)
	)	
	(or
		(gold-amount > 100)
		(current-age == castle-age)
	)
	(can-train slinger)
=>
	(train slinger)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(unit-type-count villager > 75)
		(food-amount >= unique-unit-food)
	)
	(or
		(gold-amount > 100)
		(current-age == castle-age)
	)
	(or
		(unit-type-count my-unique-unit-line < 20)
		(or
			(strategic-number sn-cavalry-threat > 1)
			(unit-type-count-total archer-line > 15)
		)
	)
	(can-train kamayuk)
=>
	(train kamayuk)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count condottiero < 12)
	(players-unit-type-count any-enemy hand-cannoneer > 6)
	(gold-amount > 70)
	(or
		(unit-type-count teutonic-knight-line > high-min-number-upgrade)
		(civ-selected gothic)
	)
	(can-train condottiero)
=>
	(train 184)
)
#load-if-defined GOTHIC-CIV
(defrule
	(not (player-in-game any-ally))
	(research-completed ri-champion)
	(players-unit-type-count every-enemy teutonic-knight-line < 10)
	(gold-amount < 500)
=>
	(up-jump-rule 1)
)
#end-if	
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(unit-type-count hand-cannoneer < 30)
		(unit-type-count trade-cart > 20)
	)
	(or
		(goal unit-goal gunpowder-units)
		(and
			(goal ranged-unit-type-goal gunpowder-units)
			(or
				(unit-type-count hand-cannoneer < 15)
				(death-match-game)
			)
		)
	)
	(gold-amount > 100)
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count bombard-cannon < 3)
	(goal unit-goal gunpowder-units)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(unit-type-count-total bombard-cannon < 3)
		(goal unit-goal gunpowder-units)
	)
	(unit-type-count-total bombard-cannon < 8)	
	(research-completed ri-bombard-tower)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#end-if
#load-if-not-defined TURKISH-CIV
(defrule
	(research-completed ri-heavy-scorpion)
	(wood-amount > 300)
	(players-unit-type-count every-enemy huskarl-line < 10)
	(unit-type-count scorpion-line > 4)
=>
	(up-jump-rule 1)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(nand
		(or
			(civ-selected teutonic)
			(civ-selected byzantine)
		)
		(building-type-count castle > 0)
	)
	(unit-type-count hand-cannoneer < 20)
	(or
		(strategic-number sn-infantry-threat >= 1)
		(players-unit-type-count any-enemy huskarl-line > 4)
	)
	(gold-amount > 150)
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-long-swordsman)
	(goal enemy-goal eagle-warrior)
	(unit-type-count militiaman-line < 12)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train my-unique-unit-line)
	(or
		(current-age == castle-age)
		(gold-amount > 120)
	)
	(or
		(or
			(civ-selected mongol)
			(civ-selected briton)
		)
		(and
			(strategic-number sn-archer-threat >= 1)
			(civ-selected gothic)
		)
	)
=>
	(train my-unique-unit-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat > 0)
	(or
		(game-time < 900); in DM
		(strategic-number sn-cavalry-threat > 2)
	)		
	(can-train camel-line)
	(gold-amount > 250)
	(or
		(unit-type-count camel-line < 16)
		(strategic-number sn-cavalry-threat > 3)
	)
	(or
		(unit-type-count camel-line < 24)
		(game-time < 600)
	)
=>
	(train camel-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(game-time < 900)
	(can-train camel-line)
	(players-civ any-enemy hun)
	(gold-amount > 250)
=>
	(train camel-line)
)
#load-if-not-defined WONDER-RACE
(defrule
	(strategic-number sn-resource-control < 1)
	(goal ranged-unit-type-goal monk)
	(research-completed ri-sanctity)
	(or
		(unit-type-count-total monk < 12)
		(and
			(or
				(players-unit-type-count every-enemy monk < 5)
				(research-completed ri-atonement)
			)
			(or
				(and
					(players-unit-type-count every-enemy mangonel-line == 0)
					(players-unit-type-count every-enemy scorpion-line < 5)
				)
				(research-completed ri-redemption)
			)
		)
	)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-sanctity >= research-available)
	(up-research-status c: ri-block-printing >= research-available)
	(gold-amount > 175)
	(or 
		(civ-selected aztec)
		(or
			(players-unit-type-count any-enemy war-elephant-line > 10)
			(players-unit-type-count any-enemy elephant-archer > 10)
		)
	)
	(or
		(goal anti-monk-threat-goal 0)
		(and
			(players-unit-type-count any-enemy war-elephant-line > 25)
			(unit-type-count religious-units < 15)
		)
	)
	(can-train monk)
=>
	(train monk)
)
#end-if
#load-if-not-defined TURKISH-CIV
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat >= 1)
	(food-amount >= 85)
	(nand
		(building-type-count-total town-center == 1)
		(and
			(goal unit-goal knight)
			(research-available ri-pikeman)
		)
	)
	(or
		(unit-type-count spearman-line < 10)
		(research-completed ri-pikeman)
	)
	(unit-type-count camel-line < 12); don't overdo anti cavalry
	(unit-type-count imperial-camel < 12)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(not (player-in-game 3))
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat > 1)
	(strategic-number sn-military-level < 0)
	(or
		(unit-type-count spearman-line < 10)
		(research-completed ri-pikeman)
	)
	(unit-type-count spearman-line < 18)
	(unit-type-count camel-line < 12)
	(unit-type-count imperial-camel < 12)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat >= 1)
	(or
		(food-amount >= 85)
		(unit-type-count spearman-line < 6)
	)
	(or
		(or
			(goal unit-goal archer); ranged units are weak vs cavalry
			(goal unit-goal skirmisher)
		)
		(strategic-number sn-military-level >= 1); or try to reach lvl2 and attack
	)
	(unit-type-count spearman-line < 15)
	(unit-type-count camel-line < 12)
	(unit-type-count imperial-camel < 12)
	(research-completed ri-pikeman)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#else
(defrule
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat >= 1)
	(food-amount >= 85)
	(or
		(current-age-time > 420)
		(goal unit-goal archer)
	)
	(or
		(unit-type-count spearman-line < 8)
		(research-completed ri-pikeman)
	)
	(gold-amount < 200)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if
#else
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat >= 1)
	(food-amount >= 85)
	(research-completed ri-pikeman)
	(unit-type-count spearman-line < 4)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if
#else
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train camel-line)
	(or
		(strategic-number sn-cavalry-threat >= 1)
		(players-unit-type-count any-enemy cavalry-archer-line >= 15)
	)
	(or
		(gold-amount > 100)
		(unit-type-count camel-line < 6)
	)
=>
	(train camel-line)
)
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal knight)
	(or
		(or
			(players-unit-type-count any-enemy knight-line >= 5); in RM train camels vs mass knights
			(or
				(players-unit-type-count any-enemy scout-cavalry-line >= 5); or vs scouts + ca
				(players-unit-type-count any-enemy cavalry-archer-line >= 15)
			)
		)
		(or
			(strategic-number sn-cavalry-threat >= 1)
			(unit-type-count camel-line < 8)
		)
	)
	(can-train camel-line)
=>
	(train camel-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-pikeman)
	(gold-amount < 50)
	(food-amount > 200)
	(wood-amount > 200)
	(or
		(or
			(civ-selected aztec)
			(civ-selected viking)
		)
		(research-completed ri-halberdier)
	)
	(unit-type-count spearman-line < 20)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(or
		(strategic-number sn-resource-control < 1)
		(or
			(civ-selected turkish)
			(civ-selected indian)
		)
	)
	(or
		(and
			(or
				(strategic-number sn-cavalry-threat >= 1)
				(players-unit-type-count any-enemy cavalry-archer-line >= 15)
			)
			(unit-type-count camel-line > mid-min-number-upgrade)
		)
		(civ-selected indian)
	)
	(can-research ri-heavy-camel)
=>
	(research ri-heavy-camel)
)
(defrule
	(strategic-number sn-resource-control < 1) ; anticipate knight defense
	(goal unit-goal eagle-warrior); so better make some spears and spend our gold to collect relics
	(goal enemy-goal rush)
	(or 
		(or 
			(players-civ any-enemy hun)
			(players-civ any-enemy frankish)
		)
		(or 
			(players-civ any-enemy teutonic)
			(players-civ any-enemy viking)
		)
	)
	(unit-type-count-total monk == 0)
	(building-type-count-total monastery > 0)
	(unit-type-count spearman-line < 5)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-elite-eagle-warrior)
	(or
		(current-age-time < 300)
		(gold-amount > 114)
	)
	(nor
		(players-unit-type-count any-enemy teutonic-knight-line > 11)
		(players-unit-type-count any-enemy militiaman-line > 19)
	)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(nand 
		(goal train-civ-goal ri-chain-mail)
		(gold-amount < 160)
	)
	(or
		(food-amount >= 52); one food drop left to train next villager
		(or
			(town-under-attack)
			(and
				(goal control-goal aggressive-rush)
				(current-age-time < 240)
			)
		)
	)
	(goal unit-goal eagle-warrior)
	(goal strategy-goal rush)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
(defrule
	(current-age == castle-age)
	(strategic-number sn-resource-control < 1)
	(or
		(gold-amount > 120)
		(strategic-number sn-military-level < 0)
	)
	(food-amount >= 52)
	(goal unit-goal mix)
	(goal strategy-goal rush)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
#load-if-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(players-unit-type-count any-enemy huskarl-line > 3)
	(or
		(players-unit-type-count any-enemy militiaman-line < 12)
		(or
			(unit-type-count archer-line > 12)
			(unit-type-count plumed-archer-line > 12)
		)
	)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(gold-amount > 300)
		(and
			(or 
				(gold-amount > 150)
				(current-age == castle-age)
			)
			(and
				(or
					(and
						(players-unit-type-count any-enemy skirmisher-line > 5)
						(building-type-count siege-workshop == 0)
					)
					(players-unit-type-count any-enemy monk > 5)
				)
				(unit-type-count eagle-warrior < 15)
			)
		)
	)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-archer-threat >= 2)
	(or
		(gold-amount > 220)
		(and
			(or
				(strategic-number sn-cavalry-threat < 2)
				(or
					(unit-type-count camel-line > mid-min-number-upgrade)
					(unit-type-count spearman-line > high-min-number-upgrade)
				)
			)
			(players-unit-type-count every-enemy eagle-warrior-line < high-min-number-upgrade)
		)
	)
	(research-completed ri-heavy-scorpion)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(current-age == feudal-age)
	(or
		(and
			(strategic-number sn-current-age == fc-transit)
			(goal control-goal aggressive-rush)
		)
		(and
			(building-type-count-total blacksmith > 0)
			(gold-amount > 245)
		)
	)
	(goal unit-goal archer)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-crossbow)
	(goal ranged-unit-type-goal archer)
	(nor (can-train longbowman-line)
	(can-train plumed-archer-line))
	(nor (can-train war-wagon-line)
	(goal strategy-goal boom))
	(gold-amount > 120)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(wood-amount > 100)
	(gold-amount >= 145)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(game-time < 1800)
		(civ-selected viking)
	)
	(goal ranged-unit-type-goal archer)
	(goal strategy-goal boom)
	(can-train archer-line)
=>
	(train archer-line)
)
#load-if-not-defined SARACEN-CIV
(defrule
	(or
		(strategic-number sn-resource-control < 1)
		(and 
			(or
				(or
					(strategic-number sn-resource-control == ri-pikeman)
					(strategic-number sn-resource-control == ri-bodkin-arrow)
				)
				(strategic-number sn-resource-control == ri-crossbow)
			)
			(gold-amount >= 145); don't stop producing archers if we need only food for our research
		)
	)
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1800)
	(goal unit-goal archer)
	(goal strategy-goal rush)
	(can-train archer-line)
=>
	(train archer-line)
)
#else
(defrule
	(strategic-number sn-resource-control < 1); buy food instead if with saracen
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1800)
	(goal unit-goal archer)
	(goal strategy-goal rush)
	(can-train archer-line)
=>
	(train archer-line)
)
#end-if
#load-if-defined MAGYAR-CIV
(defrule
	(or
		(strategic-number sn-resource-control < 1)
		(and
			(research-available imperial-age)
			(and
				(food-amount > 1070)
				(gold-amount < 700)
			)
		)
	)
	(food-amount > 150)
	(can-train magyar-huszar)
=>
	(train magyar-huszar)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(current-age == castle-age)
		(gold-amount > 120)
	)
	(or
		(unit-type-count villager > 75)
		(food-amount >= unique-unit-food)
	)
	(can-train boyar)
=>
	(train boyar)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age == fc-transit)
	(goal strategy-goal flush)
	(wood-amount > 200)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#end-if
#load-if-not-defined UP-MULTIPLE-ENEMIES
(defrule
	(current-age >= castle-age)
	(strategic-number sn-resource-control == 2)
	(research-completed ri-pikeman)
	(wood-amount > 400); gold shortage while getting imperial researches
	(food-amount > 400); so keep slots filled
	(gold-amount < 200); with non-gold units
	(population < max-civ-pop)
	(nand
		(research-completed ri-bracer)
		(unit-type-count spearman-line > 40)
	)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(research-completed ri-pikeman)
	(research-available imperial-age)
	(population < max-civ-pop)
	(or
		(food-amount > imp-food)
		(gold-amount < 300)
	)
	(food-amount > 400)
	(gold-amount < imp-gold)
	(wood-amount >= 100)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(research-completed ri-elite-skirmisher)
	(research-available imperial-age)
	(population < max-civ-pop)
	(or
		(food-amount > imp-food)
		(gold-amount < 300)
	)
	(food-amount > 400)
	(gold-amount < imp-gold)
	(wood-amount >= 100)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal my-unique-unit-line)
	(goal strategy-goal rush)
	(strategic-number sn-current-age == castle)
	(unit-type-count knight-line < 12)
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(and
			(goal unit-goal cavalry-archer)
			(research-completed ri-bloodlines)
		)
		(goal unit-goal mix)
	)
	(or
		(building-type-count-total archery-range < 6)
		(goal enemy-goal eagle-warrior)
	)
	(goal strategy-goal rush)
	(current-age == castle-age)
	(unit-type-count knight-line < 12)
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal skirmisher)
	(or
		(players-unit-type-count any-enemy eagle-warrior-line > 5)
		(strategic-number sn-military-level >= 2)
	)
	(nand
		(civ-selected byzantine)
		(building-type-count castle > 0)
	)
	(goal strategy-goal rush)
	(current-age == castle-age)
	(unit-type-count knight-line < 12)
	(can-train knight-line)
=>
	(train knight-line)
)
#load-if-not-defined DEATH-MATCH
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal archer)
	(game-time < 1800)
	(or
		(goal enemy-goal eagle-warrior)
		(or
			(not (goal enemy-goal flush))
			(or
				(players-building-type-count any-enemy market > 0)
				(players-building-type-count any-enemy barracks > 1)
			)
		)
	)
	(unit-type-count knight-line < 6)
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(and
			(goal strategy-goal flush)
			(current-age == castle-age)
		)
		(and	
			(research-completed ri-cavalier)
			(gold-amount > 150)
		)
	)
	(or
		(or
			(goal anti-cavalry-threat-goal 0)
			(military-population < 30)
		)
		(death-match-game)
	)
	(can-train knight-line)
=>
	(train knight-line)
)
#else
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-cavalier)
	(or 
		(research-completed ri-bloodlines)
		(research-completed ri-paladin)
	)
	(or
		(goal anti-cavalry-threat-goal 0)
		(or
			(game-time < 480)
			(and
				(civ-selected hun)
				(death-match-game)
			)
		)
	)
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if
#end-if
(defrule
	(game-time < 240)
	(can-train monk)
=>
	(train monk)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(goal unit-goal knight)
		(and
			(research-completed ri-paladin)
			(players-unit-type-count every-enemy spearman-line < 25)
		)
	)
	(or
		(current-age == castle-age)
		(gold-amount > 100)
	)
	(can-train knight-line)
=>
	(train knight-line)
)
; balance resources
#load-if-defined ITALIAN-CIV
(defrule
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-resource-control != ri-heresy)
	(gold-amount > 250)
	(food-amount < 200)
	(or
		(food-amount < 80)
		(gold-amount > 400)
	)
	(can-train genoese-crossbowman); same rule as below, because my-uu-line doesn't work with aofe uu
=>
	(train genoese-crossbowman)
)
#end-if
#load-if-not-defined INCAN-CIV
#load-if-not-defined INDIAN-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined AZTEC-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined SPANISH-CIV
#load-if-not-defined TEUTONIC-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined VIKING-CIV
#load-if-not-defined BYZANTINE-CIV
(defrule
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-resource-control != ri-heresy)
	(gold-amount > 250)
	(food-amount < 200)
	(or
		(food-amount < 80)
		(gold-amount > 400)
	)
	(can-train my-unique-unit-line); ranged uu
=>
	(train my-unique-unit-line)
)
#end-if
(defrule
	(current-age >= castle-age)
	(or
		(and
			(and
				(or
					(civ-selected briton)
					(civ-selected mayan)
				)
				(goal unit-goal my-unique-unit-line)
			)
			(goal strategy-goal rush)
		)
		(building-type-count castle >= 2)
	)
=>
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(current-age >= castle-age)
	(goal unit-goal knight)
	(goal strategy-goal rush)
	(building-type-count castle > 0)
	(or
		(or
			(civ-selected mongol)
			(civ-selected chinese)
		)
		(civ-selected briton)
	)
=>
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-not-defined INCAN-CIV
#load-if-not-defined AZTEC-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined VIKING-CIV
#load-if-defined UP-1-PLAYER-TEAM
(defrule
	(building-type-count-total siege-workshop > 0)
	(goal unit-goal knight)
	(goal anti-cavalry-threat-goal 1)
	(goal ranged-unit-type-goal archer)
	(not (research-completed ri-long-swordsman))
=>
	(up-jump-rule 1)
)
#end-if
(defrule
	(or
		(or
			(building-type-count-total siege-workshop > 0)
			(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
		)
		(goal strategy-goal boom)
	)
	(up-compare-goal ranged-unit-type-goal != scorpion)
	(up-compare-goal ranged-unit-type-goal != monk)
	(up-compare-goal ranged-unit-type-goal != gunpowder-units)
=>
	(set-goal ranged-unit-type-goal 0)
)
#load-if-defined DEATH-MATCH
#load-if-not-defined TURKISH-CIV
(defrule
	(up-compare-goal ranged-unit-type-goal != 0)
=>
	(set-goal ranged-unit-type-goal 0)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(goal ranged-unit-type-goal cavalry-archer)
	(or
		(gold-amount > 125)
		(goal unit-goal cavalry-archer)
	)
	(or
		(gold-amount > 100)
		(and
			(goal control-goal aggressive-rush)
			(current-age == castle-age)
		)
	)
	(or
		(dropsite-min-distance wood < 4)
		(wood-amount > 140)
	)
	(can-train cavalry-archer-line)
=>
	(train cavalry-archer-line)
)
#load-if-not-defined HUN-CIV
(defrule
	(strategic-number sn-resource-control != battering-ram)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-resource-control != ri-heresy)
	(research-completed ri-crossbow)
	(goal ranged-unit-type-goal archer)
	(wood-amount > 90)
	(gold-amount > 250)
	(food-amount < 200)
	(or
		(food-amount < 80)
		(gold-amount > 400)
	)
	(can-train archer-line)
=>
	(train archer-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-resource-control != ri-heresy)
	(nor (can-train chu-ko-nu-line)
	(can-train mangudai-line))
	(goal ranged-unit-type-goal cavalry-archer)
	(wood-amount > 90)
	(gold-amount > 250)
	(or
		(food-amount < 200)
		(game-time < 720)
	)
	(or
		(food-amount < 80)
		(gold-amount > 400)
	)
	(can-train cavalry-archer-line)
=>
	(train cavalry-archer-line)
)
(defrule
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 1)
	(goal unit-goal militiaman-line)
	(goal strategy-goal rush)
	(not (research-available ri-long-swordsman))
	(unit-type-count militiaman-line < 15)
	(game-time < 1800); this strategy is currently only used that early against EW rush
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(goal unit-goal militiaman-line)
		(goal control-goal militiaman-line)
	)
	(food-amount > 100)
	(or 
		(and
			(and
				(current-age == castle-age)
				(research-completed ri-long-swordsman)
			)
			(unit-type-count militiaman-line < 30)
		)
		(and
			(research-completed ri-two-handed-swordsman)
			(gold-amount > 90)
		)
	)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount > 100)
	(gold-amount > 90)
	(can-train rax-husky-line)
=>
	(train rax-husky-line)
	(set-goal unit-goal my-unique-unit-line)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train elephant-archer)
	(or
		(or
			(unit-type-count villager > 75)
			(goal train-civ-goal -1)
		)
		(food-amount >= unique-unit-food)
	)
	(or
		(current-age == castle-age)
		(gold-amount > 100)
	)
=>
	(train elephant-archer)
)
#end-if
#load-if-not-defined HUN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train my-unique-unit-line)
	(or
		(research-completed my-unique-unit-upgrade)
		(or
			(goal unit-goal my-unique-unit-line)
			(goal control-goal my-unique-unit-line)
		)
	)
	(or
		(or
			(unit-type-count villager > 75)
			(goal train-civ-goal -1)
		)
		(food-amount >= unique-unit-food)
	)
	(or
		(current-age == castle-age)
		(gold-amount > 100)
	)
=>
	(train my-unique-unit-line)
)
(defrule
	(goal unit-goal my-unique-unit-line)
	(can-train my-unique-unit-line)	
	(or
		(and
			(unit-type-count-total my-unique-unit-line < 5)
			(civ-selected byzantine)
		)
		(civ-selected gothic)
	)
	(unit-type-count-total my-unique-unit-line < 12)
	(current-age == castle-age)
=>
	(train my-unique-unit-line)
)
#end-if
#load-if-not-defined AZTEC-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined ITALIAN-CIV
(defrule
	(research-completed my-unique-unit-upgrade)
	(building-type-count castle > 2)
=>
	(up-jump-rule 1)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(research-completed ri-champion)
	(food-amount > 100)
	(gold-amount > 200)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
; Flush
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(or
		(food-amount >= 130)
		(current-age-time < 120)
	)
	(current-age == feudal-age)
	(or
		(current-age-time < 480)
		(and
			(food-amount < 500)
			(players-military-population every-enemy < 8)
		)
	)
	(not (research-completed ri-man-at-arms))
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-gold-gatherer-percentage > 10)
	(strategic-number sn-current-age == feudal)
	(or
		(and
			(food-amount < 600)
			(strategic-number sn-resource-control < 1)
		)
		(and
			(gold-amount >= 245)
			(strategic-number sn-resource-control <= 2)
		)
	)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(current-age-time < 180)
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(players-building-type-count every-enemy stable == 0)
	(players-military-population any-enemy > 4)
	(or
		(military-population < 3)
		(players-military-population any-enemy > 8)
	)
	(military-population < 6)
	(strategic-number sn-current-age == feudal)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(or
		(strategic-number sn-gold-gatherer-percentage <= 10)
		(and
			(strategic-number sn-current-age == fc-transit)
			(goal ranged-unit-type-goal archer)
		)
	)
	(gold-amount >= 245)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(wood-amount > 70);dont run out of stock while spaming skirmishers
	(food-amount > 74)
	(or
		(food-amount < 700)
		(and
			(food-amount >= 825)
			(building-type-count-total blacksmith > 0)
		)
	)
	(nand
		(research-completed ri-man-at-arms)
		(goal enemy-goal eagle-warrior)
	)
	(strategic-number sn-current-age == feudal)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(nand
		(research-completed ri-man-at-arms)
		(goal enemy-goal eagle-warrior)
	)
	(building-type-count-total blacksmith > 0); castle age advancement is already prepared
	(current-age == feudal-age); as no resource restriction on this rule
	(strategic-number sn-military-level < 0); use this only to catch up with enemy military
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(goal enemy-goal flush)
	(strategic-number sn-current-age == fc-transit)
	(strategic-number sn-military-level < 1)
	(wood-amount > 250)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(current-age == feudal-age)
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(research-completed ri-man-at-arms)
	(goal unit-goal militiaman-line)
	(or
		(goal enemy-goal eagle-warrior)
		(or 
			(current-age-time < 480)
			(and
				(strategic-number sn-current-age == fc-transit)
				(food-amount >= 260)
			)
		)
	)
	(food-amount > 100)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(goal unit-goal militiaman-line)
	(strategic-number sn-current-age == df-transit)
	(food-amount > 260)
	(nand
		(civ-selected gothic)
		(not (death-match-game))
	)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
(defrule
	(game-time < 900)
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(or
		(players-civ any-enemy hun)
		(players-civ any-enemy mongol)
	)
	(players-building-type-count every-enemy archery-range < 2)
	(unit-type-count spearman-line < 2)
	(not (goal unit-goal militiaman-line))
	(can-train spearman-line); make spearman fast so the flush won't die vs quick scouts.
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(unit-type-count spearman-line < 5)
	(or 
		(and
			(and
				(building-type-count-total archery-range > 0); archery-range not yet finished
				(building-type-count archery-range == 0)
			)
			(players-military-population any-enemy > 2); enemy is very fast
		)
		(goal enemy-goal rush)
	)
	(goal meso-enemy-goal -1)
	(can-train spearman-line); make spearman to keep up with military production
=>
	(train spearman-line)
)
#load-if-defined DIFFICULTY-HARDEST
(defrule
	(current-age == feudal-age)
	(nor
		(goal unit-goal militiaman-line)
		(goal control-goal militiaman-line)
	)
	(building-type-count-total archery-range > 0)
	(current-age-time < 90)
	(unit-type-count spearman-line < 4)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if
#load-if-not-defined WONDER-RACE ;Wonderrace is too fast to make gold from relics
#load-if-not-defined UP-MICHI-STYLE
#load-if-defined AZTEC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(goal train-civ-goal 1)
	(or
		(and
			(not (goal ranged-unit-type-goal monk))
			(research-completed ri-sanctity)
		)
		(unit-type-count monk < 6)
	)
	(food-amount < 150)
	(gold-amount > 200)
	(goal anti-monk-threat-goal 0)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(nand
		(goal unit-goal eagle-warrior)
		(strategic-number sn-cavalry-threat == 0)
	)
	(or
		(unit-type-count monk < 8)
		(and
			(food-amount < 600)
			(gold-amount > 750)
		)
	)
	(goal anti-monk-threat-goal 0)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
	(gold-amount > 175)
	(or
		(players-unit-type-count every-enemy monk < 5)
		(research-completed ri-atonement)
	)
	(or
		(and
			(players-unit-type-count every-enemy mangonel-line == 0)
			(players-unit-type-count every-enemy scorpion-line < 5)
		)
		(research-completed ri-redemption)
	)
	(goal anti-monk-threat-goal 0)
	(can-train monk)
=>
	(train monk)
)
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(goal ranged-unit-type-goal monk)
	(unit-type-count monk < 6)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal train-civ-goal 1)
	(or
		(research-completed ri-sanctity)
		(unit-type-count monk < 6)
	)
	(research-completed ri-pikeman)
	(goal anti-monk-threat-goal 0)
	(strategic-number sn-cavalry-threat >= 1)
	(or
		(goal unit-goal mix)
		(goal unit-goal skirmisher)
	)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal train-civ-goal 1)
	(or
		(research-completed ri-sanctity)
		(unit-type-count monk < 6)
	)
	(food-amount < 100)
	(gold-amount > 300)
	(current-age == castle-age)
	(goal anti-monk-threat-goal 0)
	(strategic-number sn-cavalry-threat > 1)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal train-civ-goal 1)
	(or
		(research-completed ri-sanctity)
		(unit-type-count monk < 6)
	)
	(gold-amount > 200)
	(current-age == castle-age)
	(goal anti-monk-threat-goal 0)
	(strategic-number sn-cavalry-threat > 1)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(player-resigned every-ally)
	(players-building-type-count every-ally market == 0)
	(or (unit-type-count trade-cart > 0)
	(unit-type-count trade-cog > 0))
=>
	(delete-unit trade-cart)
	(delete-unit trade-cog)
)
#end-if ;not WONDER-RACE
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount > 200)
	(or
		(gold-amount < 100)
		(and
			(strategic-number sn-current-age >= ci-transit)
			(population < max-civ-pop)
		)
	)
	(research-completed ri-light-cavalry)
	(nor
		(and
			(not (research-completed ri-bloodlines))
			(goal anti-cavalry-threat-goal 1)
		)
		(can-train magyar-huszar)
	)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(research-completed ri-light-cavalry)
	(research-available imperial-age)
	(not (can-train magyar-huszar))
	(food-amount > 1070)
	(gold-amount < 700)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#else
(defrule
	(strategic-number sn-resource-control < 1)
	(population < seventy-five-percent-pop)
	(gold-amount > 1000)
	(research-completed ri-cavalier)
	(can-train knight-line)
=>
	(train knight-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount > 400)
	(gold-amount < 100)
	(not (can-train magyar-huszar))
	(research-completed ri-light-cavalry)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#end-if
#load-if-not-defined TURKISH-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(unit-type-count skirmisher-line < 20)
	(strategic-number sn-archer-threat >= 1)
	(or 
		(research-completed ri-elite-skirmisher)
		(unit-type-count skirmisher-line < 7)
	)
	(nand
		(gold-amount > 400)
		(unit-type-count trade-cart > 20)
	)
	(wood-amount > 145)
	(current-age >= castle-age)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal rush)
	(or
		(and
			(gold-amount >= 145)
			(wood-amount >= 100)
		)
		(players-unit-type-count any-enemy militiaman-line > 0)
	)
	(goal ranged-unit-type-goal archer)
	(or
		(goal unit-goal mix)
		(goal unit-goal skirmisher)
	)
	(military-population < 8)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(gold-amount < 750)
	(research-completed ri-elite-skirmisher)
	(or
		(and
			(research-available my-unique-research)
			(civ-selected aztec)
		)
		(research-available ri-hussar)
	)
	(wood-amount > 250)
	(food-amount > 500)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(unit-type-count spearman-line > 14)
	(research-available ri-halberdier)
	(nor 
		(research-available ri-blast-furnace)
		(research-available ri-bracer)
	)
	(nor
		(research-available ri-plate-mail)
		(research-available ri-plate-barding)
	)
	(research-completed ri-chemistry)
	(wood-amount > 250)
	(food-amount > 350)
	(gold-amount < 600)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1320)
	(unit-type-count spearman-line < 4)
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
	(goal enemy-goal rush)	
	(goal meso-enemy-goal -1)
	(can-train spearman-line); make spearman so enemy won't raid us with knights
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(game-time < 1800)
		(strategic-number sn-current-age >= ci-transit)
	)
	(strategic-number sn-resource-control < 1)
	(building-type-count-total town-center >= tc-level-two)
	(goal unit-goal skirmisher)
	(wood-amount > 115)
	(food-amount > 85)
	(goal strategy-goal rush)
	(unit-type-count spearman-line < 10)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#load-if-not-defined AZTEC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(military-population < 4)		
		(building-type-count-total monastery > 0)
	)
	(goal strategy-goal rush)
	(or
		(goal unit-goal mix)
		(goal unit-goal skirmisher)
	)
	(food-amount > 90)
	(wood-amount > 95)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age == fc-transit)
	(military-population < 8)
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
	(goal enemy-goal flush)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(strategic-number sn-current-age == fc-transit)
		(and
			(gold-amount > 145)
			(building-type-count-total monastery > 0)
		)
	)
	(wood-amount > 85)
	(goal strategy-goal rush)
	(goal ranged-unit-type-goal archer)
	(goal unit-goal skirmisher)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(current-age == castle-age)
	(current-age-time < 400)
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(nor 
		(research-available ri-crossbow)
		(goal enemy-goal flush)
	)
	(or
		(or
			(players-civ any-enemy frankish)
			(players-civ any-enemy persian)
		)
		(players-civ any-enemy hun)
	)
	(unit-type-count spearman-line < 8)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(current-age == castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-resource-control != battering-ram)
	(strategic-number sn-archer-threat > 1)
	(unit-type-count scorpion-line < 8)
	(or
		(goal unit-goal eagle-warrior)
		(goal unit-goal monk)
	)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
#end-if
#load-if-not-defined CHINESE-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined AZTEC-CIV
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal save-wood-goal 0)
	(strategic-number sn-archer-threat >= 1)
	(unit-type-count scorpion-line < 5)
	(or
		(and
			(food-amount < 50)
			(strategic-number sn-military-level < 0)
		)
		(and
			(up-research-status c: ri-elite-skirmisher < research-complete)
			(up-compare-goal unit-goal != eagle-warrior)
		)
	)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(players-unit-type-count any-enemy spearman-line > 20)
	(unit-type-count scorpion-line < 15)
	(unit-type-count cavalry-units > 20)
	(research-completed ri-heavy-scorpion)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-archer-threat >= 1)
	(unit-type-count scorpion-line < 12)
	(or
		(and
			(gold-amount > 150)
			(food-amount < 75)
		)
		(civ-selected turkish)
	)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined CELTIC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(nor (goal strategy-goal fast-imp)
	(goal unit-goal default-ranged))
	(strategic-number sn-resource-control < 1)
	(can-train scorpion-line)
	(unit-type-count scorpion-line < 12)
	(wood-amount > 400); excess wood and gold
	(gold-amount > 300)
	(food-amount < 200)
=>
	(train scorpion-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(not (research-completed ri-elite-skirmisher))
	(goal unit-goal monk)
	(strategic-number sn-resource-control < 1)
	(can-train scorpion-line)
	(strategic-number sn-archer-threat >= 1)
	(unit-type-count scorpion-line < 6)
	(wood-amount > 200)
=>
	(train scorpion-line)
)
#end-if
#end-if
(defrule
	(or
		(or
			(civ-selected celtic)
			(civ-selected slavic)
		)
		(goal ranged-unit-type-goal scorpion)
	)
	(or
		(strategic-number sn-resource-control < 1)
		(and
			(strategic-number sn-resource-control == 2)
			(and
				(food-amount < 100)
				(population < del-civ-pop)
			)
		)
	)
	(can-train scorpion-line)
	(gold-amount > scorpion-gold-min)
=>
	(train scorpion-line)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-resource-control < 1)
	(can-train archer-line)
	(research-completed ri-arbalest)
	(wood-amount > 400); excess wood and gold
	(gold-amount > 300)
	(food-amount < 200)
=>
	(train archer-line)
)
#end-if
#load-if-not-defined MAGYAR-CIV
(defrule
	(strategic-number sn-resource-control == 2)
	(or
		(and
			(wood-amount < 300)
			(not (research-available ri-champion))
		)
		(goal monk-threat-goal 1)
	)
	(food-amount > 580); hussar + lc food cost
	(gold-amount < 600); hussar gold cost
	(population < max-civ-pop)
	(research-completed ri-light-cavalry)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#end-if
#load-if-not-defined AZTEC-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined SPANISH-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
	(or
		(gold-amount <= 90)
		(goal escrow-purpose-goal ri-halberdier)
	)
	(food-amount > 200)
	(wood-amount > 200)
	(or
		(unit-type-count spearman-line < 10)
		(research-completed ri-pikeman)
	)
	(nor
		(research-completed ri-elite-teutonic-knight)
		(research-completed ri-elite-throwing-axeman)
	)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control == 2)
	(wood-amount > 400)
	(food-amount > 400)
	(or
		(dropsite-min-distance gold > 5)
		(gold-amount < 100)
	)
	(nor
		(research-completed ri-elite-teutonic-knight)
		(research-completed ri-elite-throwing-axeman)
	)
	(can-research-with-escrow ri-pikeman)
	(strategic-number sn-military-level < 1)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-pikeman)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(wood-amount > 300)
	(food-amount > 175)
	(population < max-civ-pop)
	(or
		(dropsite-min-distance gold > 5)
		(gold-amount < 100)
	)
	(nand
		(gold-amount > 400)
		(unit-type-count trade-cart > 20)
	)
	(research-completed ri-elite-skirmisher)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control == 2)
	(wood-amount > 400)
	(food-amount > 400)
	(population < max-civ-pop)
	(or
		(dropsite-min-distance gold > 5)
		(gold-amount < 100)
	)
	(strategic-number sn-military-level < 1)
	(research-completed ri-elite-skirmisher)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#load-if-defined DEATH-MATCH
#load-if-defined DARK-AGE-START
(defrule
	(current-age <= castle-age); train militias to keep up with dark age militias
	(or
		(and
			(strategic-number sn-military-level < 0)
			(current-age == feudal-age)
		)
		(goal ranged-unit-type-goal archer)
	)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(unit-type-count militiaman-line > 20)
=>
	(research ri-man-at-arms)
	(research ri-two-handed-swordsman)
	(research ri-long-swordsman)
)
(defrule
	(strategic-number sn-current-age <= castle); train militias to keep up with dark age militias
	(or
		(strategic-number sn-military-level < 0)
		(current-age <= feudal-age)
	)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
#end-if
#end-if
#load-if-defined NEEDS-MORE-TESTING
(defrule
	(up-timer-status train-forward-timer != timer-running)
	(population >= del-civ-pop)
=>
	(up-set-target-point forward-point-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-range -1 -1 -1 30)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-include cmdid-military-building actionid-train -1 -1)
)
(defrule
	(up-timer-status train-forward-timer != timer-running)
	(population >= del-civ-pop)
	(up-find-local c: buildings c: 6)
=>
	(up-set-target-point position-self-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-range -1 -1 -1 39)
	(up-filter-exclude cmdid-military-building actionid-attack -1 -1)
	(up-filter-include cmdid-military-building actionid-train -1 -1)
	(up-find-local c: buildings c: 240)
	(up-target-point 0 action-stop -1 -1)
	(chat-to-all "disable home training")
	(enable-timer 1 4)
)
#end-if

; ********** OTHER RESEARCHES **********

#load-if-defined MONGOL-CIV
(defrule
	(unit-type-count battering-ram-line > 3)
	(research-completed ri-siege-ram)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if

(defrule
	(strategic-number sn-current-age >= ci-transit)
	(strategic-number sn-resource-control < 1)
	(or
		(population > del-civ-pop)
		(goal unit-goal wonder)
	)
	(can-research ri-stonecutting)
=>
	(research ri-stonecutting)
)
#load-if-not-defined WONDER-RACE
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(food-amount < 300)
		(strategic-number sn-current-age >= ci-transit)
	)
	(can-research ri-ballistics)
=>
	(research ri-ballistics)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(wood-amount > 800)
		(food-amount > 800)
	)
	(can-research-with-escrow ri-guilds)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-guilds)
)
(defrule
	(cc-players-unit-type-count 0 stone-mine > 5); stone left on map
	(or
		(unit-type-count 124 > 0)
		(unit-type-count 220 > 0)
	)
	(or
		(strategic-number sn-resource-control < 1)
		(strategic-number sn-stone-gatherer-percentage > 15)
	)
	(strategic-number sn-current-age >= ci-transit)
	(strategic-number sn-stone-gatherer-percentage > 4)
	(can-research ri-stone-shaft-mining)
=> 
	(research ri-stone-shaft-mining)
)
#load-if-defined UP-GAME-AGE2-X2
(defrule
	(can-research ri-cartography)
=>
	(research ri-cartography)
)
#else
(defrule
	(strategic-number sn-resource-control < 3)
	(military-population >= 20)
	(strategic-number sn-military-level >= 0)
	(civilian-population > 60)
	(player-valid any-ally)
	(can-research ri-cartography)
=>
	(research ri-cartography); get this to help allies better
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(current-age >= imperial-age)
	(or
		(gold-amount < 100)
		(population > del-civ-pop)
	)
	(food-amount > 400)
	(wood-amount > 400)
	(can-research ri-masonry)
=>
	(research ri-masonry)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(gold-amount < 100)
		(population > del-civ-pop)
	)
	(food-amount > 400)
	(wood-amount > 400)
	(can-research ri-architecture)
=>
	(research ri-architecture)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(gold-amount < 100)
		(population > del-civ-pop)
	)
	(food-amount > 400)
	(wood-amount > 400)
	(building-type-count castle >= 2)
	(can-research ri-hoardings)
=>
	(research ri-hoardings)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(population > del-civ-pop)
	(can-research ri-siege-engineers)
=>
	(research ri-siege-engineers)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount > 1200)
	(current-age-time > 300)
	(population > del-civ-pop)
	(can-research ri-town-watch)
=>
	(research ri-town-watch)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(town-under-attack)
		(population > del-civ-pop)
	)
	(building-type-count castle > 0)
	(can-research ri-murder-holes)
=>
	(research ri-murder-holes)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(population > del-civ-pop)
	(unit-type-count infantry-units > 11)
	(can-research ri-tracking)
=>
	(research ri-tracking)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(population > del-civ-pop)
	(building-type-count castle > 0)
	(can-research ri-bombard-tower)
=>
	(research ri-bombard-tower)
)
(defrule
	(strategic-number sn-resource-control == ri-heresy)
	(can-research-with-escrow ri-heresy)
=>
	(release-escrow gold)
	(research ri-heresy)
)
(defrule
	(strategic-number sn-resource-control < 2)
	(players-unit-type-count any-enemy monk > 19)
	(can-research-with-escrow ri-faith)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-faith)
)
#load-if-not-defined DEFEND-WONDER
(defrule
	(game-time > 300)
	(building-type-count bombard-tower < 6)
	(game-time < 900); build them defensively early in DM
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(can-build bombard-tower)
=>
	(build bombard-tower)
)
#else
(defrule
	(game-time > 300)
	(building-type-count bombard-tower < 6)
	(building-type-count wonder > 0)
	(can-build bombard-tower)
=>
	(build bombard-tower)
)
#end-if
#load-if-defined TEUTONIC-CIV
(defrule
	(research-completed ri-hoardings)
	(building-type-count castle > 1)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
	(or
		(building-type-count bombard-tower > 1)
		(unit-type-count cannon-galleon-line > 3)
	)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
(defrule
	(current-age == imperial-age)
	(unit-type-count transport-ship > 0)
	(strategic-number sn-resource-control <= 1)
=>
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)

; ********** FARMS/FISHING SHIPs ********** ; Put them at the end for low priority

#load-if-not-defined POPULATION-CAP-25
(defrule
	(strategic-number sn-current-age == df-transit)
	(or
		(and
			(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
			(wood-amount > 325)
		)
		(goal strategy-goal flush)
	)
	(wood-amount > 170)
	(can-train fishing-ship)
=>
	(train fishing-ship); make more fishing ships during feudal transit on islands
)
(defrule
	(strategic-number sn-current-age == dark)
	(or
		(building-type-count-total lumber-camp > 0)
		(and
			(civ-selected persian)
			(unit-type-count-total fishing-ship < 3)
		)
	)
	(dropsite-min-distance wood < 4)
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(unit-type-count fishing-ship < 10)
		(current-age == feudal-age)
	)
	(or
		(cc-players-unit-type-count 0 shore-fish > min-fishing)
		(cc-players-unit-type-count 0 sea-fish > min-fishing)
	)
	(wood-amount > 300)
	(game-time < 2100)
	(dropsite-min-distance wood < 4)
	(population < max-civ-pop)
	(unit-type-count revealer == 0); no enemy attacking us
	(building-type-count-total market > 0)
	(unit-type-count fishing-ship < 16)
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(or
		(wood-amount > 200)
		(food-amount < 150)
	)
	(unit-type-count fishing-ship < 8)
	(population < max-civ-pop)	
	(or
		(cc-players-unit-type-count 0 shore-fish > min-fishing)
		(cc-players-unit-type-count 0 sea-fish > min-fishing)
	)
	(or
		(warboat-count >= 20)
		(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	)
	(game-time < 2100)
	(warboat-count > 6)
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
#load-if-defined VIKING-CIV
(defrule
	(current-age == castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(or
		(not (unit-available war-galley))
		(strategic-number sn-resource-control == ri-bodkin-arrow)
	)
	(or
		(cc-players-unit-type-count 0 shore-fish > min-fishing)
		(cc-players-unit-type-count 0 sea-fish > min-fishing)
	)
	(unit-type-count fishing-ship < 16)
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
#end-if
#end-if
#end-if ; NOT WONDER-RACE

; ********** GATHERER PERCENTAGES **********

#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined DEATH-MATCH
(defrule
	(unit-type-count villager >= 9)
=>
	(set-strategic-number sn-food-gatherer-percentage 94)
	(set-strategic-number sn-wood-gatherer-percentage 6)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-strategic-number sn-maximum-wood-drop-distance wood-distance2); enable wood gathering
	(disable-self)
)
(defrule
	(unit-type-count villager == 10)
=>
	(set-strategic-number sn-food-gatherer-percentage 86)
	(set-strategic-number sn-wood-gatherer-percentage 14)
	(set-strategic-number sn-maximum-wood-drop-distance wood-distance2); copy them again in case we had to reexplore and reduce wood drop distance
	(disable-self)
)
(defrule
	(unit-type-count villager == 11)
=>
	(set-strategic-number sn-food-gatherer-percentage 78)
	(set-strategic-number sn-wood-gatherer-percentage 22)
	(set-strategic-number sn-maximum-wood-drop-distance wood-distance2)
	(disable-self)
)
(defrule
	(unit-type-count villager == 12)
=>
	(set-strategic-number sn-food-gatherer-percentage 76)
	(set-strategic-number sn-wood-gatherer-percentage 24)
	(set-strategic-number sn-maximum-wood-drop-distance wood-distance2)
	(disable-self)
)
#load-if-not-defined POPULATION-CAP-25
(defrule
	(or
		(unit-type-count villager == 13)
		(and
			(current-age > dark-age);use them for rebuilding
			(unit-type-count villager < 21)
		)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 78)
	(set-strategic-number sn-wood-gatherer-percentage 22)
)
(defrule
	(strategic-number sn-current-age == dark)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(unit-type-count villager == 13)
=>
	(set-strategic-number sn-food-gatherer-percentage 60)
	(set-strategic-number sn-wood-gatherer-percentage 40)
)
#end-if
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 14)
=>
	(set-strategic-number sn-food-gatherer-percentage 76)
	(set-strategic-number sn-wood-gatherer-percentage 24)
)
(defrule
	(strategic-number sn-current-age == dark)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(unit-type-count villager == 14)
=>
	(set-strategic-number sn-food-gatherer-percentage 56)
	(set-strategic-number sn-wood-gatherer-percentage 44)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 15)
=>
	(set-strategic-number sn-food-gatherer-percentage 71)
	(set-strategic-number sn-wood-gatherer-percentage 29)
)
(defrule
	(strategic-number sn-current-age == dark)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(unit-type-count villager == 15)
=>
	(set-strategic-number sn-food-gatherer-percentage 52)
	(set-strategic-number sn-wood-gatherer-percentage 48)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 16)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-strategic-number sn-food-gatherer-percentage 67)
	(set-strategic-number sn-wood-gatherer-percentage 33)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 17)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-strategic-number sn-food-gatherer-percentage 62)
	(set-strategic-number sn-wood-gatherer-percentage 38)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 18)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-strategic-number sn-food-gatherer-percentage 59)
	(set-strategic-number sn-wood-gatherer-percentage 41)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 19)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-strategic-number sn-food-gatherer-percentage 56)
	(set-strategic-number sn-wood-gatherer-percentage 44)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 20)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-strategic-number sn-food-gatherer-percentage 57)
	(set-strategic-number sn-wood-gatherer-percentage 43)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 21)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-strategic-number sn-food-gatherer-percentage 58)
	(set-strategic-number sn-wood-gatherer-percentage 42)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager >= 22)
	(not (goal strategy-goal flush))
=>
	(set-strategic-number sn-food-gatherer-percentage 65)
	(set-strategic-number sn-wood-gatherer-percentage 35)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager >= 12)
	(unit-type-count villager <= 13)
	(goal dark-build-order-goal 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 70)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-maximum-wood-drop-distance 30)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 22)
=>
	(set-strategic-number sn-food-gatherer-percentage 60)
	(set-strategic-number sn-wood-gatherer-percentage 40)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 23)
=>
	(set-strategic-number sn-food-gatherer-percentage 62)
	(set-strategic-number sn-wood-gatherer-percentage 38)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager >= 22)
	(goal strategy-goal flush)
=>
	(set-strategic-number sn-food-gatherer-percentage 70)
	(set-strategic-number sn-wood-gatherer-percentage 30)
)
#end-if
#else
(defrule
	(unit-type-count villager >= 12)
=>
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-hunt-drop-distance 24)
	(set-strategic-number sn-cap-civilian-builders 100)
	(set-strategic-number sn-cap-civilian-gatherers 100)(disable-self))
#end-if ;DM
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-current-age == df-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 10)
)
(defrule
	(strategic-number sn-current-age == df-transit);will overwrite rule above
	(goal strategy-goal flush)
	(or
		(up-compare-goal unit-goal != militiaman-line)
		(civ-selected gothic)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 60)
	(set-strategic-number sn-gold-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age >= df-transit)
	(goal strategy-goal sling)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 20)
)
#load-if-defined SARACEN-CIV
(defrule
	(strategic-number sn-current-age == df-transit)
	(goal strategy-goal rush)
	(goal control-goal aggressive-rush)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 0)
)
#end-if
#end-if
(defrule
	(or
		(and
			(strategic-number sn-current-age == feudal)
			(not (goal strategy-goal flush))
		)
		(and
			(regicide-game)
			(strategic-number sn-current-age == df-transit)
		)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 19)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(goal strategy-goal flush)
=>
	(set-strategic-number sn-food-gatherer-percentage 25)
	(set-strategic-number sn-wood-gatherer-percentage 70)
	(set-strategic-number sn-gold-gatherer-percentage 5)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(or
		(goal unit-goal militiaman-line)
		(goal unit-goal scout-cavalry)
	)
	(building-type-count-total mining-camp > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 15)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(or
		(goal unit-goal militiaman-line)
		(goal unit-goal scout-cavalry)
	)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total mining-camp > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 29)
	(set-strategic-number sn-gold-gatherer-percentage 16)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(or
		(and
			(goal unit-goal militiaman-line)
			(goal enemy-goal flush)
		)
		(or
			(goal unit-goal skirmisher)
			(strategic-number sn-cavalry-threat > 1)
		)
	)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total mining-camp > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 14)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(strategic-number sn-cavalry-threat > 1)
	(or
		(and
			(or
				(building-type-count farm < 16)
				(unit-type-count villager > 41)
			)
			(and
				(building-type-count farm < 20)
				(unit-type-count villager > 38)
			)
		)
		(building-type-count-total barracks == 0)
	)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 10)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(goal unit-goal archer)
	(building-type-count-total mining-camp > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 15)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(goal unit-goal archer)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 20)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(building-type-count-total blacksmith > 0)
	(current-age-time < 400)
	(goal control-goal belated-flush-defense)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 5)
)
#load-if-not-defined UP-MICHI-STYLE
#load-if-defined AZTEC-CIV
#load-if-not-defined REGICIDE
(defrule
	(building-type-count barracks == 0)
	(or
		(strategic-number sn-current-age == df-transit);will overwrite rule above
		(strategic-number sn-current-age == feudal)
	)
	(goal strategy-goal rush)
	(or
		(goal unit-goal eagle-warrior)
		(goal unit-goal monk)
	)
	(not (goal control-goal shot)); shot won't sell stone for additional TCs, so mine more gold
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 3)
)
#end-if
(defrule
	(strategic-number sn-current-age == feudal)
	(goal unit-goal my-unique-unit-line)
	(dropsite-min-distance stone < 6)
	(unit-type-count castle == 0)
	(stone-amount < 700)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
#else
(defrule
	(strategic-number sn-current-age == feudal)
	(or
		(goal unit-goal my-unique-unit-line)
		(civ-selected saracen)
	)
	(nor 
		(goal strategy-goal flush)
		(goal strategy-goal sling)
	)
	(dropsite-min-distance stone < 6)
	(stone-amount < 700)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#end-if
(defrule
	(or
		(and
			(strategic-number sn-current-age == feudal)
			(goal strategy-goal sling)
		)
		(and
			(strategic-number sn-wood-gatherer-percentage == 100); end of rebuild code
			(building-type-count town-center > 0); use this in case not other percentages are loaded for some reason.
		)
	)
	(game-time > 1200)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#load-if-not-defined SARACEN-CIV
(defrule
	(goal strategy-goal rush)
	(or
		(goal unit-goal eagle-warrior)
		(goal unit-goal monk)
	)
	(strategic-number sn-current-age == fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(or
		(goal strategy-goal rush)
		(goal strategy-goal boom)
	)
	(or
		(or
			(goal unit-goal mix)
			(goal unit-goal skirmisher)
		)
		(or
			(goal unit-goal militiaman-line)
			(goal unit-goal scorpion)
		)
	)
	(strategic-number sn-current-age == fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(goal strategy-goal boom)
	(goal unit-goal knight)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(stone-amount >= 100)
		(dropsite-min-distance stone > 5)
	)
	(building-type-count-total town-center < tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 46)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(up-jump-rule 1)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age >= fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#else
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age >= fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
(defrule
	(goal strategy-goal rush)
	(goal unit-goal scout-cavalry)
	(strategic-number sn-current-age == fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(or
		(and
			(goal strategy-goal rush)
			(goal unit-goal cavalry-archer)
		)
		(goal strategy-goal flush)
	)
	(strategic-number sn-current-age == fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(or
		(goal unit-goal archer)
		(and
			(or
				(civ-selected mayan)
				(civ-selected aztec)
			)
			(goal strategy-goal flush)
		)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 29)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 29)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(nor
		(goal unit-goal my-unique-unit-line)
		(goal unit-goal knight)
	)			
	(goal strategy-goal boom)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal control-goal aggressive-rush)
	(goal unit-goal archer)
=>
	(set-strategic-number sn-food-gatherer-percentage 23)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-not-defined HIGH-RESOURCES-START
#load-if-not-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(building-type-count-total castle == 0)
	(goal strategy-goal rush)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 6)
	(set-strategic-number sn-stone-gatherer-percentage 30)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(building-type-count-total castle == 0)
	(goal strategy-goal boom)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 27)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 3)
	(set-strategic-number sn-stone-gatherer-percentage 30)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(unit-type-count villager > 50)
	(building-type-count-total castle == 0)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
#end-if
#end-if
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal fast-imp)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 22)
	(set-strategic-number sn-gold-gatherer-percentage 33)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == ci-transit)
	(goal strategy-goal fast-imp)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#else; => #load-if-defined SARACEN-CIV
(defrule
	(goal unit-goal knight)
	(goal control-goal aggressive-rush)
	(building-type-count-total stable < 2)
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-stone-gatherer-percentage 23)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal unit-goal archer)
	(goal control-goal aggressive-rush)
	(building-type-count-total archery-range < 3)
	(unit-type-count villager > 20)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 10)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 25)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)	
	(goal unit-goal monk)
	(building-type-count-total monastery < 3)
	(unit-type-count villager > 20)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-stone-gatherer-percentage 23)
)
(defrule
	(goal unit-goal monk)
	(building-type-count-total monastery > 2)
	(commodity-selling-price stone > 104)
	(unit-type-count villager > 20)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 25)
	(set-strategic-number sn-wood-gatherer-percentage 20)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 25)
)
#end-if ; SARACEN-CIV
(defrule
	(game-time < 1800)
	(strategic-number sn-current-age >= ci-transit)
	(goal strategy-goal fast-imp)
	(goal unit-goal gunpowder-units)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(or
		(building-type-count-total town-center == 1)
		(goal enemy-fortifications-goal 1)
	)
	(strategic-number sn-current-age >= ci-transit)
	(goal strategy-goal fast-imp)
	(building-type-count-total archery-range > 2)
	(goal unit-goal gunpowder-units)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 27)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal unit-goal wonder)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
(defrule
	(goal strategy-goal rush)
	(or
		(and
			(goal unit-goal eagle-warrior)
			(strategic-number sn-cavalry-threat >= 1)
		)
		(goal unit-goal mix)
	)
	(unit-type-count villager > 20)
	(building-type-count-total monastery > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(strategic-number sn-cavalry-threat == 0)
	(building-type-count-total barracks > 2)
	(or
		(and
			(building-type-count-total barracks > 3)
			(building-type-count-total monastery > 0)
		)
		(goal control-goal aggressive-rush)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 34)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 40)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(or
		(strategic-number sn-current-age == fc-transit)
		(and
			(current-age == castle-age)
			(current-age-time < 120)
		)
	)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(strategic-number sn-cavalry-threat == 0)
	(building-type-count-total barracks > 2)
	(goal control-goal aggressive-rush)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 34)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal unit-goal my-unique-unit-line)
	(dropsite-min-distance stone < 6)
	(stone-amount < 700)
	(building-type-count castle > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 34)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 6)
	(research ri-stone-mining); or dba and hc are blocked
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count-total stable > 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-not-defined SARACEN-CIV
#load-if-defined UP-2-PLAYER-TEAM
(defrule
	(goal strategy-goal rush)
	(goal control-goal aggressive-rush)
	(goal unit-goal knight)
	(strategic-number sn-current-age == fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal control-goal aggressive-rush)
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(current-age-time < 300)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#else
#load-if-not-defined UP-1-PLAYER-GAME
(defrule
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(goal position-goal flank)
	(strategic-number sn-current-age == fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(not (goal control-goal shot))
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(current-age-time < 300)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 23)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#end-if
#end-if
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(or
		(current-age-time < 300)
		(not (player-in-game any-ally))
	)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(building-type-count-total stable < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 27)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(or
		(current-age-time < 300)
		(not (player-in-game any-ally))
	)
	(strategic-number sn-cavalry-threat > 1)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(building-type-count-total stable < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 27)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total archery-range > 2)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(building-type-count-total stable == 0)
	(strategic-number sn-current-age == castle)
	(stone-amount >= 100)
	(commodity-selling-price stone < 96)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 25)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(building-type-count-total stable == 0)
	(strategic-number sn-current-age == castle)
	(stone-amount >= 100)
	(commodity-selling-price stone < 96)
	(unit-type-count villager > 20)
	(research-completed ri-pikeman)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(stone-amount < 100)
	)
	(commodity-selling-price stone < 96)
	(dropsite-min-distance stone < 5)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(building-type-count-total town-center >= tc-level-three)
	(current-age-time > 600)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 26)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal strategy-goal flush)
	(or
		(goal unit-goal archer)
		(goal unit-goal mix)
	)
	(unit-type-count villager > 20)
	(strategic-number sn-current-age == castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal flush)
	(or
		(goal unit-goal cavalry-archer)
		(goal unit-goal mix)
	)
	(unit-type-count villager > 20)
	(building-type-count-total town-center >= tc-level-two)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal flush)
	(goal unit-goal mix)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(stone-amount < 100)
	)
	(dropsite-min-distance stone < 5)
	(not (goal control-goal my-unique-unit-line))
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 24)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-not-defined CELTIC-CIV
(defrule
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
	(not (goal control-goal my-unique-unit-line))
	(strategic-number sn-current-age >= castle)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(stone-amount < 100)
	)
	(dropsite-min-distance stone < 5)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
	(building-type-count-total town-center >= tc-level-two)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 23)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
	(stone-amount < 100)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#else
(defrule
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
	(strategic-number sn-current-age >= castle)
	(building-type-count-total town-center < 3)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 14)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal flush)
	(dropsite-min-distance stone < 6)
	(strategic-number sn-current-age >= castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 13)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal unit-goal militiaman-line)
	(dropsite-min-distance stone < 6)
	(strategic-number sn-current-age >= castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#end-if
(defrule
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
	(strategic-number sn-cavalry-threat == 0)
	(players-unit-type-count every-enemy militiaman-line < 8)
	(not (goal control-goal my-unique-unit-line))
	(strategic-number sn-current-age >= castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-defined GOTHIC-CIV
(defrule
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
	(building-type-count-total town-center >= tc-level-three)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#end-if
#load-if-not-defined VIKING-CIV
#load-if-not-defined TURKISH-CIV
(defrule
	(not (goal strategy-goal boom))
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count town-center >= tc-level-two)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 42); 42
	(set-strategic-number sn-wood-gatherer-percentage 35); 38
	(set-strategic-number sn-gold-gatherer-percentage 23)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#else
(defrule
	(not (goal strategy-goal boom))
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count town-center >= tc-level-two)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#end-if
(defrule
	(goal strategy-goal boom)
	(or
		(goal unit-goal archer)
		(goal unit-goal scorpion)
	)
	(building-type-count-total town-center < 3)
	(stone-amount < 100); gather stone when TC disrupted
=>
	(set-strategic-number sn-food-gatherer-percentage 23)
	(set-strategic-number sn-wood-gatherer-percentage 46)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal strategy-goal boom)
	(goal unit-goal scorpion)
	(building-type-count-total town-center >= tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal strategy-goal boom)
	(or
		(goal unit-goal archer)
		(and
			(goal unit-goal scorpion)
			(research-completed ri-light-cavalry)
		)
	)
	(building-type-count-total town-center >= tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#load-if-defined VIKING-CIV
(defrule
	(goal strategy-goal boom)
	(goal unit-goal archer)
	(or
		(building-type-count-total town-center >= tc-level-four)
		(current-age-time > 300)
	)
	(strategic-number sn-current-age >= castle-age)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal strategy-goal boom)
	(goal unit-goal archer)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 26)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#end-if
#load-if-defined AZTEC-CIV
(defrule
	(goal strategy-goal fast-imp)
	(strategic-number sn-current-age >= fc-transit)
;	(building-type-count-total town-center >= tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal fast-imp)
	(goal unit-goal archer)
	(or
		(research-completed ri-pikeman)
		(research-completed ri-elite-skirmisher)
	)
	(building-type-count-total town-center >= tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 31)
	(set-strategic-number sn-gold-gatherer-percentage 23)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-three)
	(goal strategy-goal fast-imp)
	(goal unit-goal gunpowder-units)
=>
	(set-strategic-number sn-food-gatherer-percentage 52)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 8)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == castle)
	(civilian-population >= max-civ)
	(goal strategy-goal fast-imp)
	(goal unit-goal gunpowder-units)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-three)
	(goal strategy-goal fast-imp)
	(goal unit-goal gunpowder-units)
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total archery-range > 0)
	(dropsite-min-distance stone <= 6)
	(goal control-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
(defrule
	(goal unit-goal knight)
	(goal control-goal shot)
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(dropsite-min-distance stone <= 6)
	(unit-type-count villager > 20)
	(or(civ-selected mongol)(civ-selected chinese))
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 6)
	(research-completed ri-elite-skirmisher)
	(goal control-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 12)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(dropsite-min-distance stone <= 6)
	(goal control-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
#end-if
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age >= castle)
	(building-type-count-total castle > 0)
	(goal control-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal strategy-goal rush)
	(or
		(goal unit-goal eagle-warrior)
		(goal unit-goal militiaman-line)
	)
	(strategic-number sn-current-age >= castle)
	(dropsite-min-distance stone <= 6)
	(or
		(building-type-count-total town-center >= tc-level-two)
		(and
			(stone-amount < 100)
			(research-completed ri-pikeman)
		)
	)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(or
		(strategic-number sn-cavalry-threat == 0)
		(strategic-number sn-current-age >= ci-transit)
	)
	(dropsite-min-distance stone <= 6)
	(unit-type-count villager > 60)
=>
	(set-strategic-number sn-food-gatherer-percentage 33)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 38)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(strategic-number sn-cavalry-threat == 0)
	(strategic-number sn-current-age == ci-transit)
	(building-type-count town-center == 3)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-not-defined AZTEC-CIV
(defrule
	(goal strategy-goal rush)
	(goal unit-goal mix)
	(building-type-count-total town-center < 3)
	(stone-amount != 100)
	(stone-amount != 200)
	(dropsite-min-distance stone < 5)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#else
(defrule
	(goal strategy-goal boom)
	(goal unit-goal eagle-warrior)
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone < 5)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 14)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal mix)
	(building-type-count-total town-center < 3)
	(stone-amount != 100)
	(stone-amount != 200)
	(dropsite-min-distance stone < 5)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 29)
	(set-strategic-number sn-stone-gatherer-percentage 7)
)
#end-if
#load-if-not-defined AZTEC-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined SARACEN-CIV
(defrule
	(not (goal unit-goal my-unique-unit-line))
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age >= ci-transit)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage ci-uu-switch-food)
	(set-strategic-number sn-wood-gatherer-percentage ci-uu-switch-wood)
	(set-strategic-number sn-gold-gatherer-percentage ci-uu-switch-gold)
	(set-strategic-number sn-stone-gatherer-percentage ci-uu-switch-stone)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined SLAVIC-CIV
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(nor (goal unit-goal archer)
	(goal unit-goal knight))
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 14)
)
#else
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal unit-goal scorpion)
	(goal control-goal my-unique-unit-line)
	(building-type-count-total castle >= 0)
	(unit-type-count villager > 20)
	(strategic-number sn-current-age >= castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 34)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 27)
	(set-strategic-number sn-stone-gatherer-percentage 6)
)
#end-if ;SLAVIC-CIV
#else
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal control-goal my-unique-unit-line)
	(or
		(strategic-number sn-current-age == castle)
		(building-type-count-total castle == 0)
	)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 16)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
#end-if ;KOREAN-CIV
#else
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
#end-if ;CELTIC-CIV
#else
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 13)
	(set-strategic-number sn-stone-gatherer-percentage 15)
)
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age == castle)
	(goal enemy-goal skirmisher)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 41)
	(set-strategic-number sn-gold-gatherer-percentage 5)
	(set-strategic-number sn-stone-gatherer-percentage 15)
)
#end-if ;BYZANTINE-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total castle == 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
	(nand
		(wood-amount > 300)
		(stone-amount < 100)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 7)
)
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-three);3
	(building-type-count-total castle == 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 31)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 24)
	(set-strategic-number sn-stone-gatherer-percentage 8)
)
#else
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total castle == 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
	(nand
		(wood-amount > 300)
		(stone-amount < 100)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 31)
	(set-strategic-number sn-wood-gatherer-percentage 52)
	(set-strategic-number sn-gold-gatherer-percentage 13)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
#end-if
(defrule
	(building-type-count-total castle == 1)
	(goal control-goal shot)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 20)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
#load-if-not-defined BRITON-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined UP-MICHI-STYLE ; food uu
(defrule
	(strategic-number sn-current-age == feudal)
	(goal unit-goal my-unique-unit-line)
	(goal strategy-goal boom)
	(dropsite-min-distance stone < 6)
	(stone-amount < 600)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 15)
)
#end-if
#load-if-not-defined TEUTONIC-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total castle >= 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total castle >= 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
	(current-age-time > 420)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-defined SLAVIC-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 21)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#else
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-five)
	(unit-type-count villager > 20)
	(unit-type-count villager < max-civ)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 16)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
#end-if
(defrule
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle > 1)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage uu-food2)
	(set-strategic-number sn-wood-gatherer-percentage uu-wood2)
	(set-strategic-number sn-gold-gatherer-percentage uu-gold2)
	(set-strategic-number sn-stone-gatherer-percentage uu-stone2)
)
#load-if-defined CELTIC-CIV
(defrule
	(or
		(research-completed my-unique-unit-upgrade)
		(research-completed ri-champion)
	)
	(research-completed ri-halberdier)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
#end-if
(defrule
	(current-age == castle-age)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle > 1)
	(unit-type-count villager > 20)
	(or
		(or 
			(civ-selected byzantine)
			(civ-selected spanish)
		)
		(or
			(civ-selected japanese)
			(civ-selected gothic)
		)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 24)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-defined BYZANTINE-CIV
(defrule
	(not (goal strategy-goal boom))
	(goal uu-up-goal 1)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle > 1)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 28)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal strategy-goal boom)
	(strategic-number sn-current-age == ci-transit)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle > 1)
	(unit-type-count villager > 20)	
=>
	(set-strategic-number sn-food-gatherer-percentage 24)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#end-if
(defrule
	(or
		(game-time > 2400)
		(strategic-number sn-current-age >= ci-transit)
	)		
	(goal unit-goal knight)
	(up-compare-goal ranged-unit-type-goal != cavalry-archer)
	(up-compare-goal control-goal != my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#load-if-not-defined TEUTONIC-CIV
#load-if-not-defined HUN-CIV
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(stone-amount < 100)
	)
	(not (goal control-goal my-unique-unit-line))
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 19)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center == 2)
	(unit-type-count-total 970 > 2)
	(unit-type-count villager > 20)
	(stone-amount >= 100)
	(nor 
		(goal enemy-goal eagle-warrior)
		(civ-selected viking)
	)
	(goal anti-cavalry-threat-goal 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
	(building-type-count-total town-center >= tc-level-three)
	(nor (research-completed ri-crossbow)
	(goal control-goal my-unique-unit-line))
	(unit-type-count villager > 20)
	(civilian-population < 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 16)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal strategy-goal boom)
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total town-center < tc-level-five)
	(unit-type-count villager > 20)
	(civilian-population < 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
#load-if-defined UP-2-PLAYER-GAME
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(goal strategy-goal flush)
	)
	(not (goal control-goal my-unique-unit-line))
	(unit-type-count villager > 20)
	(strategic-number sn-military-level < 0)
	(current-age-time < 600)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 19)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(unit-type-count-total villager > max-civ)
	(not (goal control-goal my-unique-unit-line))
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#else
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(unit-type-count-total villager > max-civ)
	(not (goal control-goal my-unique-unit-line))
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#end-if
#else
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
	(stone-amount < 100)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)

#end-if
#else
(defrule
	(goal strategy-goal boom)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total castle > 0)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 53)
	(set-strategic-number sn-wood-gatherer-percentage 24)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(or
		(building-type-count-total town-center >= tc-level-three)
		(stone-amount < 100)
	)
	(dropsite-min-distance stone <= 4)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(strategic-number sn-stone-gatherer-percentage < 10); if we started gathering stone don't stop or keep retasking
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(building-type-count-total town-center >= tc-level-four)
	(dropsite-min-distance stone <= 4)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(strategic-number sn-stone-gatherer-percentage < 10); if we started gathering stone don't stop or keep retasking
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 24)
	(set-strategic-number sn-gold-gatherer-percentage 24)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(dropsite-min-distance stone <= 4)
	(strategic-number sn-current-age >= castle)
	(building-type-count-total castle > 0)
	(civilian-population >= max-civ-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(strategic-number sn-archer-threat < 3)
	(goal anti-cavalry-threat-goal 1)
	(up-research-status c: ri-heavy-scorpion < research-pending)
	(unit-type-count villager > 20)
	(goal unit-goal knight)
	(nand
		(goal strategy-goal boom); better boom as pocket and go hscorps later
		(goal position-goal pocket)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 21)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
#end-if ;teutonic civ
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(building-type-count-total stable < 2)
	(building-type-count-total archery-range > 3)
	(strategic-number sn-cavalry-threat < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 24)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 38)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(building-type-count-total stable < 2)
	(building-type-count-total archery-range > 3)
	(or
		(strategic-number sn-cavalry-threat > 1)
		(research-completed ri-elite-skirmisher)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 24)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-defined UP-2-PLAYER-GAME
#load-if-not-defined TEUTONIC-CIV
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(game-time < 1800)
	(unit-type-count villager > 20)
	(goal monk-threat-goal 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 58); too much food actually, but we want early light cavalry
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
(defrule	
	(strategic-number sn-current-age == castle)
	(goal strategy-goal boom)
	(goal unit-goal knight)
	(unit-type-count villager > 20)
	(or
		(strategic-number sn-archer-threat > 0)
		(building-type-count-total stone-wall-line > 10)
	)
	(building-type-count-total siege-workshop == 0); get a siege work shop early in arena
	(unit-type-count 980 == 0); still no stone gatherers, so keep percentage from castle transit
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
(defrule
	(goal unit-goal cavalry-archer)
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(stone-amount < 100)
	)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
(defrule
	(goal unit-goal cavalry-archer)
	(strategic-number sn-current-age == castle)
	(building-type-count stable > 1)
	(dropsite-min-distance stone <= 6)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(stone-amount < 100)
	)
	(goal enemy-goal eagle-warrior)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 24)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal unit-goal cavalry-archer)
	(unit-type-count villager > 95)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 29)
	(set-strategic-number sn-gold-gatherer-percentage 27)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
(defrule
	(goal unit-goal cavalry-archer)
	(unit-type-count villager > 95)
	(building-type-count-total castle > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 29)
	(set-strategic-number sn-gold-gatherer-percentage 29)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-defined TURKISH-CIV
(defrule
	(unit-type-count villager > 95)
	(up-compare-goal unit-goal != my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#end-if
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal control-goal shot)
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 6)
	(unit-type-count villager > 20)
	(building-type-count-total castle == 0)
	(or
		(goal unit-goal knight)
		(research-completed ri-elite-eagle-warrior)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#load-if-defined SPANISH-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(gold-amount > 170)
	(building-type-count blacksmith > 0)
=>
	(set-strategic-number sn-food-modifier-percentage 4)
	(set-strategic-number sn-wood-modifier-percentage 3)
	(set-strategic-number sn-gold-modifier-percentage -7); don't go for archer with spanish, they can't upgrade to xbow
)
#end-if
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal sling)
	(or
		(players-civ any-ally aztec)
		(or
			(players-civ any-ally mayan)
			(players-civ any-ally slavic)
		)
	)
	(players-current-age any-ally == imperial-age)
	(players-building-type-count every-ally castle < 1)
=>
	(set-strategic-number sn-food-modifier-percentage -7)
	(set-strategic-number sn-stone-modifier-percentage 7)
)
(defrule
	(current-age == castle-age)
	(research-available imperial-age)
	(food-amount >= 700)
	(gold-amount < 200)
=>
	(set-strategic-number sn-food-modifier-percentage -7)
	(set-strategic-number sn-gold-modifier-percentage 7)
)
#load-if-defined UP-2-PLAYER-GAME
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(players-building-type-count any-enemy watch-tower > 4)
	(game-time < 1800)
	(current-age >= castle-age)
	(strategic-number sn-gold-gatherer-percentage > 19)
=>
	(set-strategic-number sn-wood-modifier-percentage 10)
	(set-strategic-number sn-gold-modifier-percentage -10)
)
#end-if
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total castle == 0)
	(or
		(or
			(goal enemy-fortifications-goal 1)
			(players-building-type-count any-enemy castle > 0)
		)
		(or
			(population-cap < 100)
			(civ-selected magyar)
		)
	)
	(strategic-number sn-stone-gatherer-percentage == 0)
=>
	(set-strategic-number sn-food-modifier-percentage -3)
	(set-strategic-number sn-wood-modifier-percentage -3)
	(set-strategic-number sn-stone-modifier-percentage 6)
)
(defrule
	(building-type-count-total town-center < 2)
	(building-type-count-total dock > 0)
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(strategic-number sn-current-age == castle)
	(stone-amount > 100)
	(not(goal unit-goal my-unique-unit-line))
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(or
		(not (research-available imperial-age))
		(stone-amount < 100)
	)
	(not(goal unit-goal my-unique-unit-line))
	(building-type-count-total dock > 0)
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone < 6)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(or
		(strategic-number sn-current-age == df-transit)
		(and
			(strategic-number sn-current-age == feudal)
			(not (civ-selected viking))
		)
	)
	(up-compare-goal strategy-goal != boom)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
=>
	(set-strategic-number sn-food-gatherer-percentage 57)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(or
		(civ-selected viking)
		(goal strategy-goal flush)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(current-age < imperial-age)
	(strategic-number sn-current-age >= fc-transit)
	(or
		(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
		(and
			(building-type-count dock > 1)
			(current-age-time < 420)
		)
	)
	(nand
		(goal unit-goal my-unique-unit-line)
		(building-type-count castle == 0)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 60)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(current-age < imperial-age)
	(strategic-number sn-current-age >= fc-transit)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(unit-type-count fishing-ship > 11)
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 67)
	(set-strategic-number sn-gold-gatherer-percentage 33)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(current-age == castle-age)
	(current-age-time > 180)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(civilian-population < 61)
	(dropsite-min-distance stone <= 6)
=>
	(set-strategic-number sn-food-gatherer-percentage 12)
	(set-strategic-number sn-wood-gatherer-percentage 57)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(civilian-population > 60)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(unit-type-count-total trade-cart > 10)
=>
	(set-strategic-number sn-food-gatherer-percentage 18)
	(set-strategic-number sn-wood-gatherer-percentage 53)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-not-defined VIKING-CIV
(defrule
	(civilian-population > 60)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(unit-type-count-total trade-cart < 11)
=>
	(set-strategic-number sn-food-gatherer-percentage 16)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 31)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#else
(defrule
	(civilian-population > 60)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(unit-type-count-total trade-cart < 11)
=>
	(set-strategic-number sn-food-gatherer-percentage 21)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#end-if
(defrule
	(or
		(strategic-number sn-current-age == df-transit)
		(strategic-number current-age == feudal)
	)
	(goal strategy-goal flush)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(unit-type-count fishing-ship > 1)
=>
	(up-get-player-fact my-player-number unit-type-count fishing-ship math-goal)
	(up-modify-goal math-goal c:* 3)
	(up-modify-sn sn-food-gatherer-percentage g:- math-goal)
	(up-modify-sn sn-wood-gatherer-percentage g:+ math-goal)
)
(defrule
	(game-time >= 3600)
	(unit-type-count female-gold-miner == 0); no gold miners
	(unit-type-count male-gold-miner == 0)
	(unit-type-count-total 229 == 0); no dead miners so enemy didn't kill them
	(unit-type-count-total 221 == 0); so there's no gold available
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 2); just because we may find some later that was visible before.
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#load-if-defined DEATH-MATCH
#load-if-not-defined CELTIC-CIV
(defrule
	(civilian-population < max-civ)
	(wood-amount > 1500)
=>
	(set-strategic-number sn-wood-gatherer-percentage 0)
	(set-strategic-number sn-food-gatherer-percentage 70)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(civilian-population < max-civ)
	(wood-amount < 500)
=>
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(commodity-buying-price food < 136)
	(commodity-selling-price stone > 95)
	(building-type-count market > 0)
	(dropsite-min-distance stone < 6)
	(goal unit-goal knight)
	(game-time < 1800)
	(building-type-count-total stable > 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 16)
	(set-strategic-number sn-wood-gatherer-percentage 14)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 35)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(commodity-selling-price stone > 95)
	(building-type-count market > 0)
	(dropsite-min-distance stone < 6)
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(game-time < 1800)
	(building-type-count-total archery-range > 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 10)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 30)
)
#end-if
#load-if-defined UP-MICHI-STYLE
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(current-age < ci-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 8)
)
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-five)
=>
	(set-strategic-number sn-food-gatherer-percentage 57)
	(set-strategic-number sn-wood-gatherer-percentage 31)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-five)
	(or
		(unit-type-count-total villager > 110)
		(unit-type-count-total villager >= max-civ)
	)
	(nor
		(goal unit-goal my-unique-unit-line)
		(goal control-goal my-unique-unit-line)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 19)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-five)
	(unit-type-count-total villager > 110)
	(or
		(goal unit-goal my-unique-unit-line)
		(goal control-goal my-unique-unit-line)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 14)
	(set-strategic-number sn-stone-gatherer-percentage 8)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(or
		(goal unit-goal my-unique-unit-line)
		(goal control-goal my-unique-unit-line)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage michi-food)
	(set-strategic-number sn-wood-gatherer-percentage michi-wood)
	(set-strategic-number sn-gold-gatherer-percentage 23)
	(set-strategic-number sn-stone-gatherer-percentage 18)
)
(defrule
	(or
		(goal unit-goal knight)
		(goal unit-goal eagle-warrior)
	)
	(unit-type-count villager > 20)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 22)
	(set-strategic-number sn-gold-gatherer-percentage 36)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal strategy-goal rush)
	(goal unit-goal monk)
	(current-age == castle-age)
	(commodity-selling-price stone < 105)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 28)
	(set-strategic-number sn-wood-gatherer-percentage 28)
	(set-strategic-number sn-gold-gatherer-percentage 44)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal unit-goal monk)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total castle > 0)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 24)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 42)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal unit-goal monk)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total castle == 0)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 40)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
#end-if
(defrule
	(strategic-number sn-current-age == castle)
	(goal unit-goal wonder)
=>
	(set-goal train-civ-goal wonder)
	(set-strategic-number sn-food-gatherer-percentage 25)
	(set-strategic-number sn-wood-gatherer-percentage 20)
	(set-strategic-number sn-gold-gatherer-percentage 45)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal wonder)
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 40)
	(set-strategic-number sn-stone-gatherer-percentage 30)
	(set-strategic-number sn-wood-dropsite-distance 14)
)
#load-if-defined DEFEND-WONDER
(defrule
	(unit-type-count-total villager < twenty-five-percent-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage 60)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 5)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-not-defined INCAN-CIV
#load-if-not-defined INDIAN-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined AZTEC-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined SPANISH-CIV
#load-if-not-defined TEUTONIC-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(unit-type-count-total villager < twenty-five-percent-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 8)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(timer-triggered one-minute-timer)
	(food-amount < 2500)
	(or
		(food-amount < 1500)
		(unit-type-count-total villager < fourty-percent-pop)
	)
	(wood-amount > 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 10)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
(defrule
	(timer-triggered one-minute-timer)
	(food-amount < 1500)
	(wood-amount < 1500)
	(unit-type-count-total villager >= fourty-percent-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage pidm-food2)
	(set-strategic-number sn-wood-gatherer-percentage pidm-wood2)
	(set-strategic-number sn-gold-gatherer-percentage pidm-gold2)
	(set-strategic-number sn-stone-gatherer-percentage pidm-stone2)
)
(defrule
	(timer-triggered one-minute-timer)
	(food-amount < 1500)
	(wood-amount < 1500)
	(unit-type-count-total villager < fourty-percent-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(timer-triggered one-minute-timer)
	(food-amount > 1500)
	(wood-amount < 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage 14)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 41)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
(defrule
	(timer-triggered one-minute-timer)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(food-amount > 1500)
	(wood-amount > 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage pidm-food)
	(set-strategic-number sn-wood-gatherer-percentage pidm-wood)
	(set-strategic-number sn-gold-gatherer-percentage pidm-gold)
	(set-strategic-number sn-stone-gatherer-percentage pidm-stone)
)
(defrule
	(timer-triggered one-minute-timer)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(food-amount > 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 55)
	(set-strategic-number sn-gold-gatherer-percentage 40)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#end-if


; ********** ATTACK RULES **********

(defrule
	(goal enemy-fortifications-goal -1)
	(or
		(players-building-type-count any-enemy castle > 3)
		(and
			(nand
				(building-type-count stone-wall > 10); arena map
				(unit-type-count battering-ram-line > 0)
			)
			(and
				(players-building-type-count any-enemy castle > 0)
				(players-building-type-count any-enemy stone-wall > 10)
			)
		)
	)
=>
	(set-goal enemy-fortifications-goal 1)
)
(defrule
	(goal enemy-fortifications-goal 1)
	(players-building-type-count every-enemy castle < 2)
	(or
		(players-building-type-count every-enemy stone-wall < 10)
		(and
			(building-type-count stone-wall > 10)
			(unit-type-count battering-ram-line > 0)
		)
	)
=>
	(set-goal enemy-fortifications-goal -1)
)
(defrule
	(up-compare-goal patrol-goal >= 0)
	(timer-triggered attack-timer)
=>
	(set-goal retreat-now-goal 1)
	(set-goal patrol-goal -1)
	(set-goal save-point-goal 0)
	(set-goal save-point-y-goal 0)
	(up-set-attack-stance -1 c: aggressive)
	(chat-local-to-self "patrol help ended")
)
(defrule
	(up-compare-goal patrol-goal >= 1); should be player number of the attacking enemy as stored in goal 82 of the attacked AI
	(up-timer-status attack-timer == timer-running)
	(up-timer-status misc-micro-timer != timer-running)
	(up-compare-goal threat-time-goal > 3000); looks like we're not fighting
	(up-allied-goal any-ally under-attack-goal == 1)
=>
	(up-set-target-point save-point-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 10)
	(set-goal split-rule-goal 15)
)
(defrule
	(goal split-rule-goal 15)
	(up-find-local c: -1 c: 4); but some of our own units are already in the allied town
=>
	(up-modify-sn sn-focus-player-number g:= patrol-goal); search for the attacker, see above
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-range -1 -1 -1 28)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: -1 c: 1)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-remote c: -1 c: 1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: -1 c: 240)
	(up-target-objects -1 action-patrol -1 -1)
	(up-jump-rule 1)
	(enable-timer misc-micro-timer 10)
)
(defrule
	(goal split-rule-goal 15)
=>
	(up-modify-sn sn-focus-player-number g:= patrol-goal); rule above didn't trigger, keep sending units
	(enable-timer misc-micro-timer 10)
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-target-point save-point-goal action-patrol -1 defensive)
)
#load-if-not-defined UP-1-PLAYER-TEAM
#load-if-not-defined UP-2-PLAYER-TEAM
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal position-goal flank)
	(up-compare-goal threat-target-goal != 947); not just scout getting damaged
	(up-compare-goal threat-player-goal s:!= sn-target-player-number)
	(up-compare-goal threat-player-goal g:== closest-enemy-goal)
	(up-compare-goal threat-source-goal != warships)
	(timer-triggered micro-timer)
	(goal team-coordination-goal 1)
=>
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
	(up-get-focus-fact military-population 0 math-goal2)
	(up-get-fact soldier-count 0 math-goal)
	(up-modify-goal math-goal2 g:- math-goal)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal position-goal flank)
	(up-compare-goal threat-target-goal != 947); not just scout getting damaged
	(up-compare-goal threat-player-goal s:!= sn-target-player-number)
	(up-compare-goal threat-player-goal g:== closest-enemy-goal)
	(up-compare-goal threat-source-goal != warships)
	(timer-triggered micro-timer)
	(goal team-coordination-goal 1)
	(up-compare-goal math-goal2 > 10)
=>
	(set-goal retreat-now-goal 1)
	(set-goal team-coordination-goal 0)
	(set-strategic-number sn-target-evaluation-ally-proximity 0); not helping allies anymore
	(enable-timer attack-timer 180)
	(chat-local-to-self "running into wrong enemy: retreat")
)
#end-if
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(up-compare-sn sn-target-player-number g:!= attacking-enemy-goal)
	(or
		(unit-type-count castle-arrow > 0)
		(unit-type-count castle-arrow-chemistry > 0)
	)
	(strategic-number sn-maximum-town-size > 40)
	(timer-triggered micro-timer)
=>
	(up-modify-sn sn-target-player-number g:= attacking-enemy-goal)
	(up-reset-unit c: -1)
	(set-strategic-number sn-disable-defend-groups 0)
	(set-goal restart-attack-goal 1)
	(enable-timer micro-timer 20)
	(enable-timer attack-timer 10)
	(chat-local-to-self "being counter attacked: reset army")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 1080); not when rushing in DM
	(unit-type-count trebuchet-set < 1)
	(unit-type-count battering-ram-line == 0)
	(up-projectile-detected projectile-castle c:< 2000)
	(up-projectile-target projectile-castle != buildings)
	(up-projectile-target projectile-castle != warships)
	(up-projectile-target projectile-castle != civilians)
=>
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat)
	(set-goal attack-goal 0)
	(enable-timer attack-timer 60)
	(chat-to-player my-player-number "retreat out of castle fire with")
)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(current-age < imperial-age)
	(up-projectile-detected projectile-watch-tower c:< 2000)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-garrison c: 3 c: -1)
)
(defrule
	(current-age == feudal-age)
	(up-projectile-detected projectile-watch-tower c:< 2000)
	(up-find-remote c: watch-tower c: 1)
=>
	(chat-to-player my-player-number "retreat out of garrisoned watch-tower")
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat)
	(set-goal attack-goal 0)
	(enable-timer attack-timer 10)
)
(defrule
	(current-age == castle-age)
	(up-projectile-detected projectile-watch-tower c:< 2000)
	(goal unit-goal default-ranged)
	(up-find-remote c: watch-tower c: 1)
=>
        (up-reset-search 1 1 1 1)
        (up-filter-include -1 -1 -1 -1)
        (up-filter-exclude -1 -1 -1 -1)
        (up-filter-range -1 -1 -1 20)
	(set-goal split-rule-goal 16)
)
(defrule
	(goal split-rule-goal 16)
	(not (up-find-local c: battering-ram-line c: 1))
=>
	(chat-to-player my-player-number "retreat out of garrisoned watch-tower")
	(up-retreat-to battering-ram-line c: ranged-units)
	(up-retreat-to battering-ram-line c: cavalry-archer-units)
	(set-goal attack-status-goal retreat)
	(set-goal attack-goal 0)
	(enable-timer attack-timer 10)
)
(defrule
	(current-age == feudal-age)
	(or
		(up-projectile-detected projectile-town-center c:< 2000)
		(up-projectile-detected projectile-castle c:< 2000)
	)
=>
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat); always retreat out of TC fire when flushing
	(set-goal attack-goal 0)
	(chat-to-player my-player-number "retreat out of TC fire")
	(enable-timer attack-timer 10)
)
(defrule
	(current-age == feudal-age)
	(up-projectile-detected projectile-watch-tower c:< 2000)
	(strategic-number sn-maximum-town-size > 45)
	(or
		(players-building-type-count any-enemy watch-tower > 1)
		(or
			(players-civ any-enemy teutonic); teutonic towers destroys AI flush.
			(or
				(players-building-type-count any-enemy stone-wall-line > 0); wall + towers, too
				(players-building-type-count any-enemy palisade-wall > 0)
			)
		)
	)
=>
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat); always retreat out of TC fire when flushing
	(set-goal attack-goal 0)
	(enable-timer attack-timer 60)
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 5)	
)
(defrule
	(goal team-coordination-goal 1)
	(game-time < 1800)
	(goal unit-goal knight)
	(up-compare-goal threat-source-goal == religious-units)
	(goal monk-threat-goal 1)
	(nor
		(research-completed ri-heresy)
		(unit-type-count scout-cavalry-line > 3)
	)
	(strategic-number sn-military-level <= 0)
=>
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat)
	(set-goal attack-goal 0)
	(enable-timer attack-timer 60)
)
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined GOTHIC-CIV
(defrule
	(up-projectile-detected projectile-fortification c:< 2000)
	(up-projectile-target projectile-fortification == ranged-units)
	(unit-type-count siege-units == 0)
	(or
		(goal unit-goal archer)
		(goal unit-goal my-unique-unit-line); civ with ranged uu
	)
=>
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat)
	(set-goal attack-goal 0)
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 5)
	(enable-timer attack-timer 60)
)
#end-if
#end-if
#end-if
(defrule
	(unit-type-count trebuchet-set < 1)
	(up-projectile-detected projectile-town-center c:< 2000)
	(population < 150)
=>
	(up-get-projectile-player projectile-town-center threat-player-goal)
	(up-modify-sn sn-focus-player-number g:= threat-player-goal)
	(up-get-focus-fact military-population 0 math-goal)
	(up-get-fact military-population 0 math-goal2)
	(up-modify-goal math-goal g:- math-goal2)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
)
(defrule
	(unit-type-count trebuchet-set < 1)
	(up-projectile-detected projectile-castle c:< 2000)
	(population < 150)
=>
	(up-get-projectile-player projectile-castle threat-player-goal)
	(up-modify-sn sn-focus-player-number g:= threat-player-goal)
	(up-get-focus-fact military-population 0 math-goal)
	(up-get-fact military-population 0 math-goal2)
	(up-modify-goal math-goal g:- math-goal2)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
)
(defrule
	(population < 150)
	(up-projectile-detected projectile-town-center c:< 2000)
	(up-compare-goal math-goal < 5)
	(or
		(up-projectile-target projectile-town-center == cavalry-units)
		(up-projectile-target projectile-town-center == siege-units)
	)
	(unit-type-count cavalry-units > 20)
	(or
		(players-unit-type-count focus-player archer-line > 12)
		(players-unit-type-count focus-player skirmisher-line > 12)
	)
	(goal anti-cavalry-threat-goal 0)
	(goal monk-threat-goal 0)
	(strategic-number sn-cavalry-threat == 0)
=>
	(up-jump-rule 3)
)
(defrule
	(population < 150)
	(up-projectile-detected projectile-town-center c:< 2000)
	(up-compare-goal math-goal < 5)
	(goal monk-threat-goal 1)
	(unit-type-count eagle-warrior-line > 10)
	(strategic-number sn-cavalry-threat == 0)
=>
	(up-jump-rule 2)
)
(defrule
	(current-age >= castle-age)
	(unit-type-count trebuchet-set < 1)
	(population < 150)
	(up-projectile-detected projectile-town-center c:< 2000)
	(up-compare-goal math-goal > -15)
	(up-projectile-target projectile-town-center != buildings)
	(up-projectile-target projectile-town-center != siege-units)
=>
	(set-strategic-number sn-filter-under-attack 1)
	(set-goal attack-goal 0)
	(set-goal retreat-now-goal 1)
	(enable-timer attack-timer 60)
	(chat-to-player my-player-number "retreat out of TC fire as not enough military superiority")
)
(defrule
	(current-age >= castle-age)
	(unit-type-count trebuchet-set < 1)
	(population < 150)	
	(up-projectile-detected projectile-town-center c:< 2000)
	(unit-type-count heavy-eagle-warrior < 12)
	(unit-type-count eagle-warrior-line < 12)
	(unit-type-count cavalry-units < 6)
	(unit-type-count battering-ram-line < 1)
	(up-compare-goal math-goal > -6); enemy has not much less military than me
	(up-projectile-target projectile-town-center != buildings)
	(up-projectile-target projectile-town-center != siege-units)
=>
	(set-strategic-number sn-filter-under-attack 1)
	(set-goal attack-goal 0)
	(set-goal retreat-now-goal 1)
	(enable-timer attack-timer 60)
	(chat-to-player my-player-number "retreat out of TC fire as not enough military superiority")
)
(defrule
	(unit-type-count trebuchet-set < 1)
	(population < 150)
	(up-projectile-detected projectile-castle c:< 2000)
	(up-compare-goal math-goal > -10)
	(up-projectile-target projectile-castle != buildings)
	(up-projectile-target projectile-castle != civilians)
	(nand
		(goal control-goal shot)
		(unit-type-count battering-ram-line > 0)
	)	
=>
	(set-goal attack-goal 0)
	(set-goal retreat-now-goal 1)
	(enable-timer attack-timer 60)
	(chat-to-player my-player-number "retreat out of castle fire as not enough military superiority")
	(up-jump-rule 1)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(unit-type-count trebuchet-set < 1)
	(unit-type-count battering-ram-line > 0)
	(up-projectile-detected projectile-castle c:< 2000)
	(timer-triggered micro-timer)
	(current-age == castle-age)
=>
	(up-get-projectile-player projectile-castle threat-player-goal)
	(up-modify-sn sn-focus-player-number g:= threat-player-goal); setup search data
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(set-goal split-rule-goal 13)
)
(defrule
	(goal split-rule-goal 13)
	(up-find-remote c: castle c: 1); find an enemy castle
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object object-point-goal)
	(up-set-target-point object-point-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 15); setup up search data for own units
	(set-goal split-rule-goal 14)
)
(defrule
	(goal split-rule-goal 14)
	(not (up-find-local c: battering-ram-line c: 1)); no ram next to the enemy castle
=>	
	(up-retreat-to battering-ram-line c: ranged-units); retreat to our ram
	(up-retreat-to battering-ram-line c: cavalry-archer-units)
	(up-retreat-to battering-ram-line c: infantry-units)
	(up-retreat-to battering-ram-line c: cavalry-units)
	(up-retreat-to battering-ram-line c: gunpowder-units)
	(up-retreat-to battering-ram-line c: religious-units)
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 3)
	(enable-timer micro-timer 5)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(unit-type-count battering-ram-line > 0)
	(up-projectile-detected projectile-town-center c:< 2000)
	(goal unit-goal default-ranged)
	(unit-type-count trebuchet-set == 0)
	(timer-triggered micro-timer)
=>
	(up-get-projectile-player projectile-town-center threat-player-goal)
	(up-modify-sn sn-focus-player-number g:= threat-player-goal); setup search data
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(up-filter-garrison c: 3 c: -1)
	(set-goal split-rule-goal 17)
)
(defrule
	(goal split-rule-goal 17)
	(up-find-remote c: town-center c: 1); find an enemy TC
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object object-point-goal)
	(up-set-target-point object-point-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 15); setup up search data for own units
	(set-goal split-rule-goal 18)
)
(defrule
	(goal split-rule-goal 18)
	(not (up-find-local c: battering-ram-line c: 1)); no ram next to the enemy castle
=>
	(up-retreat-to battering-ram-line c: ranged-units); retreat to our ram
	(up-retreat-to battering-ram-line c: cavalry-archer-units)
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 3)
	(enable-timer micro-timer 15)
)
#end-if
(defrule
	(up-projectile-detected projectile-town-center c:< 5000); enemy recently shot us with TC
	(up-projectile-detected projectile-town-center c:> 3000); but not last rule pass so units moved out of range
	(current-age == feudal-age)
	(goal strategy-goal flush)
	(strategic-number sn-military-level > 1)
=>
	(up-reset-unit c: -1)
	(enable-timer attack-timer 3)
	(enable-timer disable-defend-groups-timer 1)
	(chat-to-player my-player-number "reset as attackers are out of TC")
)
(defrule
	(up-projectile-detected projectile-town-center c:< 5000);recently moved out of TC fire
	(up-projectile-detected projectile-town-center c:> 3000)
	(unit-type-count siege-units == 0); while using raid in team game
	(goal attack-status-goal retreat)
=>
	(up-get-projectile-player projectile-town-center threat-player-goal)
	(up-modify-sn sn-target-player-number g:= threat-player-goal); calculate if we have still advanatage vs that player
	(up-get-target-fact military-population 0 math-goal2)
	(up-get-target-fact unit-type-count galley-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-target-fact unit-type-count fire-ship-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-fact military-population 0 math-goal3)	
	(up-modify-goal math-goal3 g:- math-goal2)
)
(defrule
	(up-projectile-detected projectile-town-center c:< 5000)
	(up-projectile-detected projectile-town-center c:> 3000)
	(unit-type-count siege-units == 0)
	(goal attack-status-goal retreat)
	(up-compare-goal math-goal3 > 5)
	(goal monk-threat-goal 0)
=>
	(enable-timer attack-timer 3)
	(enable-timer disable-defend-groups-timer 1)
	(chat-to-player my-player-number "allow attacks again")
)
(defrule
	(game-time > 600); not when rushing in PIDM
	(goal attack-goal 0)
	(unit-type-count trebuchet-set < 1)
	(unit-type-count battering-ram-line == 0)
	(up-projectile-detected projectile-town-center c:< 2000)
	(up-projectile-target projectile-town-center != buildings)
	(up-projectile-target projectile-town-center != warships)
	(players-military-population target-player > 5)
	(up-compare-goal under-attack-goal != 1)
	(timer-triggered attack-timer)
=>
	(set-goal retreat-now-goal 1)
	(enable-timer attack-timer 60)
	(chat-to-player my-player-number "retreat out of TC fire")
)
(defrule
	(strategic-number sn-military-level < 3)
	(goal enemy-goal flush)
	(goal strategy-goal flush)
	(military-population < 20)
	(players-military-population target-player > 5)
=>
	(up-jump-rule 1)
)
(defrule
	(strategic-number sn-military-level >= 2); military superiority so
	(strategic-number sn-current-age != fc-transit)
=>
	(set-goal attack-goal 1); attack might be an idea, check other conditions
)
#load-if-not-defined DEATH-MATCH
(defrule
	(strategic-number sn-military-level >= 1); more aggressive in team play
	(unit-type-count cavalry-units > 5)
	(current-age >= castle-age)
	(current-age-time >= 240)
	(player-in-game any-ally)
=>
	(set-goal attack-goal 1)
)
(defrule
	(current-age == castle-age)
	(military-population > 16)
	(strategic-number sn-resource-control < 2)
	(or
		(strategic-number sn-military-level >= military-level-flush); test - most aggressive
		(and
			(strategic-number sn-military-level >= military-level-flush-aggressive)
			(current-age-time < 300)
		)
	)
	(goal forward-threat-goal -1)
	(strategic-number sn-cavalry-threat == 0)
	(goal strategy-goal flush)
	(research-completed ri-bodkin-arrow)
	(players-building-type-count any-enemy castle == 0); not in 1v1 if enemy has a castle
=>
	(set-goal attack-goal 1)
)
(defrule
	(unit-type-count ranged-units > 19)
	(strategic-number sn-military-level >= 0)
	(players-current-age every-enemy == feudal-age)
	(goal strategy-goal rush)
	(or
		(goal control-goal aggressive-rush); xbow or ca with bodkin should beat feudal age stuff
		(civ-selected briton)
	)
	(research-completed ri-bodkin-arrow)
=>
	(set-goal attack-goal 1)
)
(defrule
	(game-time < 1620)
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(or
		(goal enemy-goal skirmisher)
		(or
			(strategic-number sn-archer-threat > 1)
			(players-unit-type-count any-enemy skirmisher-line > 7)
		)
	)
	(or
		(or
			(research-completed ri-chain-barding)
			(civ-selected saracen)
		)
		(strategic-number sn-military-level >= 1)
	)
	(strategic-number sn-military-level >= 0)
	(unit-type-count knight-line > 12)
=>
	(set-goal attack-goal 1)
)
(defrule
	(game-time < 1620)
	(goal attack-goal 0)
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(research-completed ri-bloodlines)
	(commodity-selling-price stone < 100)
	(or
		(research-completed ri-chain-barding)
		(civ-selected saracen)
	)
	(food-amount < 60)
	(gold-amount < 80)
	(unit-type-count knight-line > 8)
	(players-unit-type-count every-enemy camel-line < 8)
	(players-unit-type-count every-enemy knight-line < 8)
	(goal monk-threat-goal 0)
=>
	(set-goal attack-goal 1)
)
(defrule
	(game-time < 1800)
	(goal attack-goal 0)
	(goal unit-goal eagle-warrior)
	(or
		(or
			(goal anti-cavalry-threat-goal 1)
			(players-unit-type-count any-enemy skirmisher-line > 7)
		)
		(and
			(players-current-age any-enemy == feudal-age)
			(players-unit-type-count any-enemy militiaman-line < 1)
		)
	)
	(strategic-number sn-military-level >= 0)
	(unit-type-count eagle-warrior-line > 20)
=>
	(set-goal attack-goal 1)
)
(defrule
	(game-time < 1680)
	(goal attack-goal 0)
	(goal strategy-goal flush)
	(goal enemy-goal skirmisher); vs enemy that trys to stall flushes with tons of trash to keep military level high
	(strategic-number sn-military-level >= 0); test - most aggressive
	(unit-type-count knight-line > 0)
	(research-completed ri-bodkin-arrow)
	(players-building-type-count any-enemy castle == 0); not in 1v1 if enemy has a castle
=>
	(set-goal attack-goal 1)
)
(defrule
	(goal attack-goal 0)
	(goal unit-goal monk)
	(or
		(unit-type-count battering-ram-line > 0)
		(unit-type-count trebuchet-set > 0)
	)
	(strategic-number sn-military-level >= 0); test - most aggressive
	(nor
		(or
			(research-available ri-block-printing)
			(research-available ri-theocracy)
		)
		(research-available ri-illumination)
	)
	(current-age == imperial-age)
	(unit-type-count monk > 20)
=>
	(set-goal attack-goal 1)
)
(defrule
	(goal attack-goal 0)
	(goal anti-monk-threat-goal 0)
	(goal unit-goal monk)
	(unit-type-count trebuchet-set > 0)
	(up-allied-goal any-ally under-attack-goal == 1)
	(goal position-goal pocket)
	(nor
		(or
			(research-available ri-block-printing)
			(research-available ri-theocracy)
		)
		(research-available ri-illumination)
	)
	(current-age == imperial-age)
	(unit-type-count monk > 20)
=>
	(set-goal attack-goal 1)
)
(defrule
	(goal attack-goal 0)
	(players-military-population every-enemy < 3)
	(or
		(and
			(or
				(unit-type-count scout-cavalry > 2)
				(and
					(goal strategy-goal flush)
					(military-population > 8)
				)
			)
			(map-size tiny); no fast flush on larger maps
		)
		(unit-type-count cavalry-units > 3)
	)
=>
	(set-goal attack-goal 1)
)
(defrule
	(goal attack-goal 0)
	(up-compare-sn sn-focus-player-number g:== closest-enemy-goal)
	(players-building-count focus-player > 0)
	(players-building-type-count focus-player watch-tower < 2)
	(players-building-type-count focus-player castle == 0)
	(players-military-population focus-player < 2)
	(goal strategy-goal flush)
	(military-population > 6)
	(timer-triggered attack-timer)
=>
	(up-modify-sn sn-target-player-number g:== closest-enemy-goal)
	(set-goal attack-goal 1)
)
(defrule
	(building-type-count stable == 1)
	(building-type-count town-center == 1)
	(military-population >= 70)
	(goal attack-goal 0)
	(goal unit-goal cavalry-archer)
	(research-completed ri-thumb-ring)
	(strategic-number sn-current-age >= castle);high military
	(players-current-age every-enemy == castle-age); while enemy is in castle-age
=>
	(set-goal attack-goal 1)
)
#end-if 
(defrule
	(goal attack-goal 0)
	(population > max-civ-pop)
	(strategic-number sn-current-age >= ci-transit); advancing to or already in imperial age with nearlyfull pop
	(players-current-age every-enemy == castle-age); while enemy is in castle-age
	(strategic-number sn-resource-control < 2)
	(strategic-number sn-military-level >= 0)
=>
	(set-goal attack-goal 1); attack and try to hold him in castle age
)
(defrule
	(goal strategy-goal flush)
	(players-current-age every-enemy == feudal-age)
	(strategic-number sn-military-level >= 0)
	(research-completed ri-bodkin-arrow)
	(or
		(research-completed ri-crossbow)
		(not (goal ranged-unit-type-goal archer))
	)
	(or
		(unit-type-count militiaman-line <= 6)
		(research-completed ri-long-swordsman)
	)
=>
	(set-goal attack-goal 1)
)
(defrule
	(goal strategy-goal flush)
	(current-age == castle-age)
	(players-current-age every-enemy == feudal-age)
	(strategic-number sn-military-level >= 0)
	(nor (research-available ri-bodkin-arrow)
	(research-available ri-crossbow))
	(goal ranged-unit-type-goal archer)
	(military-population > 40)
=>
	(set-goal attack-goal 1)
)
(defrule
	(goal enemy-fortifications-goal 1)
	(unit-type-count trebuchet-set < 3)
	(or
		(or
			(unit-type-count 42 == 0); treb in shooting mode
			(or
				(unit-type-count male-gold-miner > 0)
				(unit-type-count female-gold-miner > 0)
			)
		)
		(unit-type-count trebuchet-set < 1)
	)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(or
		(or
			(and 
				(players-current-age every-enemy == castle-age)
				(players-military-population every-enemy > 10)
			)
			(strategic-number sn-resource-control == 2)
		)
		(players-military-population every-enemy > 16)
	)
=>
	(set-goal attack-goal 0); better go castle age and attack then
)
(defrule
	(goal attack-goal 1)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(players-building-type-count every-enemy watch-tower > 0)
	(or
		(strategic-number sn-military-level < 3)
		(players-military-population target-player > 9)
	)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(not (goal unit-goal militiaman-line))
	(goal enemy-goal eagle-warrior)
=>
	(set-goal attack-goal 0)
)
(defrule
	(players-current-age any-enemy > feudal-age)
	(goal attack-goal 1)
	(or 
		(and
			(goal strategy-goal flush)
			(current-age == feudal-age)
		)
		(and
			(or
				(goal unit-goal eagle-warrior)
				(goal unit-goal archer)
			)
			(unit-type-count spearman-line < 12)
		)
	)
	(strategic-number sn-cavalry-threat >= 1); enemy cavalry found
	(unit-type-count spearman-line < 6); no anti cavalry
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(or
		(players-unit-type-count any-enemy knight-line >= 8); better go castle age, upgrade to pikeman and attack again then.
		(goal forward-threat-goal 1); get rams instead of wasting units vs towers
	)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(goal strategy-goal flush)
	(current-age >= castle-age)
	(or
		(and 
			(unit-type-count spearman-line >= 6)
			(research-available ri-pikeman)
		)
		(and 
			(unit-type-count militiaman-line >= 12)
			(research-available ri-long-swordsman)
		)
	)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(game-time < 1800)
	(goal monk-threat-goal 1)
	(unit-type-count eagle-warrior-line < 4)
	(unit-type-count scout-cavalry-line < 4)
	(nor 
		(research-completed ri-heresy)
		(goal unit-goal archer)
	)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(or
		(or
			(goal unit-goal skirmisher)
			(and
				(goal unit-goal archer)
				(strategic-number sn-cavalry-threat > 0)
			)
		)
		(or
			(goal unit-goal my-unique-unit-line)
			(goal unit-goal mix)
		)
	)
	(goal strategy-goal rush)
	(strategic-number sn-military-level < 3)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(not (research-completed ri-bodkin-arrow))
	(or
		(or
			(goal unit-goal skirmisher)
			(goal unit-goal archer)
		)
		(or
			(and
				(goal unit-goal my-unique-unit-line)
				(unit-type-count ranged-units > 12)
			)
			(goal unit-goal mix)
		)
	)
	(goal strategy-goal rush)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(or
		(goal unit-goal skirmisher)
		(goal unit-goal mix)
	)
	(or
		(goal enemy-goal skirmisher)
		(unit-type-count skirmisher-line > 9)
	)
	(or
		(research-available ri-elite-skirmisher)
		(research-available ri-bodkin-arrow)
	)
=>
	(set-goal attack-goal 0)
)
(defrule
;	(strategic-number sn-military-level < 3)
	(goal attack-goal 1)
	(or
		(strategic-number sn-resource-control == ri-elite-eagle-warrior)
		(or
			(goal strategy-goal fast-imp)
			(goal strategy-goal boom)
		)
	)
	(or
		(current-age < imperial-age)
		(current-age-time < 120)
	)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(unit-type-count monk > 30)
	(or
		(current-age < imperial-age)
		(or
			(research-available ri-theocracy)
			(research-available ri-illumination)
		)
	)
	(strategic-number sn-military-level < 3)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(or
		(or
			(players-building-count every-enemy == 0); no attack when enemy is not yet found.
			(and
				(military-population < 13); low military pop and enemy tower 
				(players-building-type-count every-enemy watch-tower > 0); attacking causes vils to run over the map
			)
		)
		(or
			(and
				(strategic-number sn-resource-control == ri-pikeman)
				(research-available ri-pikeman)
			)
			(and
				(goal unit-goal eagle-warrior)				
				(research-available ri-chain-mail)
			)
		)
	)
=>
	(set-goal attack-goal 0)
)
(defrule
	(current-age == feudal-age)
	(goal strategy-goal flush)
	(or
		(and
			(goal enemy-goal eagle-warrior)
			(unit-type-count militiaman-line < 5)
		)
		(and
			(strategic-number sn-archer-threat > 1)
			(players-building-type-count target-player watch-tower > 0)
		)
	)
=>
	(set-goal retreat-now-goal 2)
)
(defrule
	(goal attack-goal 1)
	(players-building-type-count every-enemy castle < 3)
	(or 
		(and 
			(unit-type-count battering-ram > 1)
			(military-population > 50)
		)
		(players-building-type-count any-enemy castle == 0)
	)
	(goal enemy-fortifications-goal -1)
=>
	(set-goal attack-goal 2)
)
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(current-age == imperial-age)
	(population > seventy-five-percent-pop)
	(players-building-count any-enemy > 0)
	(unit-type-count paladin > 30)
	(game-time < 900)
=>
	(set-goal attack-goal 2)
)
#end-if
#load-if-defined DEFEND-WONDER
(defrule
	(current-age == imperial-age)
	(unit-type-count trebuchet-set > 0)
	(strategic-number sn-military-level > 0)
	(players-building-type-count any-enemy wonder > 0)
=>
	(set-goal attack-goal 2)
)
#end-if
(defrule
	(goal attack-goal 1)
	(unit-type-count battering-ram > 0)
	(players-building-type-count any-enemy castle == 1)
	(strategic-number sn-military-level > 1)
	(goal enemy-fortifications-goal -1)
=>
	(set-goal attack-goal 2)
)
(defrule
	(goal attack-goal 1)
	(unit-type-count battering-ram-line > 0)
	(players-building-type-count every-enemy castle < 2)
	(strategic-number sn-military-level > 1)
	(or
		(unit-type-count cavalry-units > 5)
		(strategic-number sn-military-level > 2)
	)
	(nor 
		(goal enemy-fortifications-goal 1)
		(players-building-type-count any-enemy stone-wall > 10)
	)
=>
	(set-goal attack-goal 2)
)
(defrule
	(current-age == imperial-age)
	(population >= max-civ-pop)
	(players-building-count any-enemy > 0)
	(research-completed ri-elite-eagle-warrior)
	(players-current-age every-enemy <= castle-age)
	(goal enemy-fortifications-goal -1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on islands
=>
	(set-goal attack-goal 2)
)
(defrule
	(current-age == imperial-age)
	(current-age-time > 150)
	(population >= del-civ-pop)
	(players-building-count any-enemy > 0)
	(or
		(unit-type-count battering-ram-line >= 3)
		(unit-type-count trebuchet-set > 0)
	)
	(goal enemy-fortifications-goal -1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on islands
=>
	(set-goal attack-goal 2)
)
(defrule
	(current-age == imperial-age)
	(current-age-time > 150)
	(or
		(population >= del-civ-pop)
		(game-time < 1200)
	)
	(population >= del-civ-pop)
	(unit-type-count trebuchet-set > 0)
	(players-building-count any-enemy > 0)
	(or
		(unit-type-count trebuchet-set > 2)
		(and
			(unit-type-count male-gold-miner == 0)
			(unit-type-count female-gold-miner == 0)
		)
	)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on islands
=>
	(set-goal attack-goal 2)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(or
		(population >= del-civ-pop)
		(game-time < 1200)
	)
	(population >= max-civ-pop)
	(goal enemy-fortifications-goal 1); enemy fortifications
	(or
		(and
			(unit-type-count trebuchet-set < 1); no trebs, but
			(and
				(building-type-count castle == 0); no castle
				(dropsite-min-distance stone > 10); no stone available
			)
		)
		(starting-age == post-imperial-age)
	)
	(unit-type-count battering-ram-line > 3); so still attack if we have rams to prevent idling
=>
	(set-goal attack-goal 2)
)
(defrule
	(or
		(strategic-number sn-minimum-water-body-size-for-dock == water-islands); this is not the water map section here
		(and
			(or
				(dropsite-min-distance wood > 20)
				(cc-players-unit-type-count 0 tree < 20)
			)
			(or
				(population < del-civ-pop)
				(unit-type-count siege-units < 3)
			)
		)
	)
=>
	(set-goal attack-goal 0)
)
(defrule
	(or
		(taunt-detected any-ally 31); standard attack taunt
		(taunt-detected any-ally 100); ATE attack taunt
	)
	(or
		(strategic-number sn-resource-control == ri-pikeman); we want pikeman vs knights
		(and
			(strategic-number sn-cavalry-threat >= 1)
			(unit-type-count spearman-line < 10)
		)
	)
	(or
		(goal unit-goal archer)
		(or
			(goal unit-goal skirmisher)
			(goal unit-goal my-unique-unit-line)
		)
	)
=>
	(acknowledge-taunt any-ally 31)
	(acknowledge-taunt any-ally 100)
	(chat-to-allies "2")
)
(defrule
	(strategic-number sn-number-attack-groups > 0)
	(unit-type-count trebuchet-set > 0)
	(nand
		(strategic-number sn-disable-attack-groups == 1)
		(strategic-number sn-maximum-town-size > 40)
	)
=>
	(up-reset-unit c: -1)
	(set-strategic-number sn-group-form-distance 2)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-minimum-attack-group-size 0)
	(set-strategic-number sn-maximum-attack-group-size 0)
	(set-strategic-number sn-target-evaluation-siege-weapon 500)
)
(defrule
	(or
		(taunt-detected any-human-ally 31)
		(taunt-detected any-human-ally 222)
	)
	(players-unit-type-count any-human-ally flare > 0)
=>
	(up-reset-unit c: -1)
	(up-find-player-flare this-any-ally p1x-goal)
	(up-find-flare p1x-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-set-target-point p1x-goal)
	(set-goal split-rule-goal 3)
)
(defrule
	(goal split-rule-goal 3)
=>
	(up-target-point p1x-goal action-patrol -1 defensive)
	(set-strategic-number sn-number-attack-groups 0);block other military stuff
	(set-strategic-number sn-maximum-town-size 12)
	(enable-timer attack-timer 180)
	(enable-timer reset-town-size-timer 180)
	(enable-timer retreat-timer 60)
	(enable-timer micro-timer 60)
	(set-goal patrol-goal 0)
	(set-goal attack-goal 0)
	(chat-to-allies "1 I'm sending my units to the flare!")
	(acknowledge-taunt this-any-human-ally 31)
	(acknowledge-taunt this-any-human-ally 222)
)
(defrule
	(goal team-coordination-goal 1)
	(taunt-detected any-ally 222)
	(players-building-type-count target-player stone-wall-line > 5)
	(unit-type-count trebuchet < 1)
	(population < eighty-five-percent-pop)
	(or
		(goal position-goal pocket)
		(map-size medium)
	)
=>
	(up-jump-rule 1); target is walled, so better help allies and disable the check for offense below
)
(defrule
	(or
		(goal hostilities-goal 1); already attacking or town under attack
		(goal forward-threat-goal 1)
	)
	(or
		(taunt-detected any-ally 31)
		(taunt-detected any-ally 222)
	)
=>
	(acknowledge-taunt this-any-ally 222)
	(acknowledge-taunt this-any-ally 31)
	(chat-to-allies-using-id 22118)
)
(defrule
	(timer-triggered attack-timer)
	(goal restart-attack-goal 1)
	(strategic-number sn-target-evaluation-ally-proximity == 32767)
=>
	(set-goal restart-attack-goal 0)
	(set-goal attack-goal 4)
)
(defrule
	(taunt-detected any-ally 31)
	(strategic-number sn-military-level < 0)	
=>
	(acknowledge-taunt this-any-ally 31)
	(chat-to-allies-using-id 22118)
)
(defrule
	(taunt-detected any-ally 31)
	(or
		(players-building-type-count focus-player castle > 1)
		(and
			(players-building-type-count focus-player stone-wall-line > 10)
			(unit-type-count battering-ram-line < 1)
		)
	)
	(unit-type-count trebuchet-set < 1)
	(unit-type-count battering-ram-line < 4)
=>
	(acknowledge-taunt this-any-ally 31)
	(chat-to-allies-using-id 22118)
)
(defrule
	(timer-triggered attack-timer)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-maximum-town-size >= 40)
	(population > eighty-five-percent-pop); keep attacking when pop his high
	(or
		(nand
			(goal enemy-fortifications-goal 1)
			(unit-type-count trebuchet-set < 1); except if the enemy has fortification and we don't have trebs
		)
		(unit-type-count siege-ram > 4)
	)
=>
	(set-goal attack-goal 4)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(taunt-detected any-ally 222)
	(warboat-count > 35)
	(or
		(strategic-number sn-military-level > 0)
		(warboat-count > 70)
	)
=>
	(up-get-player-fact this-any-ally allied-goal attacking-enemy-goal math-goal)
	(up-modify-sn sn-focus-player-number g:= math-goal)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(taunt-detected any-ally 222)
	(warboat-count > 35)
	(or
		(strategic-number sn-military-level > 0)
		(warboat-count > 70)
	)
	(up-compare-goal math-goal > 0)
	(players-building-type-count focus-player dock > 0)
=>
	(up-modify-sn sn-target-player-number g:= math-goal); switch target to attacker of that ally
	(set-strategic-number sn-target-evaluation-ally-proximity 32767)
	(up-chat-data-to-self "help ally: target-player = %d" s: sn-target-player-number)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(taunt-detected any-ally 222)
	(warboat-count > 1)
=>	
	(up-gather-inside c: dock c: 0)
	(set-goal attack-goal 6)
	(acknowledge-taunt this-any-ally 222)
	(acknowledge-taunt this-any-ally 211)
	(acknowledge-taunt this-any-ally 31)
	(acknowledge-taunt this-any-ally 100)
	(chat-to-allies "1")
)
#load-if-defined KING-OF-THE-HILL
(defrule
	(game-time > 2520)
	(strategic-number sn-military-level >= 0)
	(timer-triggered attack-timer)
=>
	(up-reset-unit c: -1)
	(up-get-point position-center p1x-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-set-target-point p1x-goal)
	(set-goal split-rule-goal 4)
)
(defrule
	(goal split-rule-goal 4)
=>
	(up-target-point p1x-goal action-patrol -1 aggressive)
	(set-strategic-number sn-number-attack-groups 0);block other military stuff
	(set-strategic-number sn-maximum-town-size 12)
	(enable-timer attack-timer 10)
	(set-goal attack-goal 0)
)
#else
(defrule
	(goal attack-goal 0)
	(or
		(unit-type-count trebuchet-set > 0)
		(up-compare-goal victory-time-goal < 300)
	)
	(or
		(players-building-type-count any-enemy wonder > 0)
		(enemy-captured-relics)
	)
	(up-compare-goal victory-time-goal < 1000)
=>
	(set-goal attack-goal 2)
)
#end-if
(defrule
	(goal hostilities-goal 0)
	(taunt-detected any-computer-ally 31)
=>
	(up-get-player-fact this-any-computer-ally allied-goal position-goal math-goal); check if ally is flank or pocket
)
#load-if-not-defined UP-2-PLAYER-TEAM
(defrule
	(taunt-detected any-ally 31)
	(goal position-goal flank)
	(goal math-goal flank)
	(up-compare-goal control-goal != shot); still allow them if we're shot as we have extra resources to hold our flank
	(up-compare-sn sn-focus-player-number g:!= math-goal)
	(strategic-number sn-target-evaluation-ally-proximity != 32767)
=>
	(acknowledge-taunt this-any-ally 31)
	(chat-to-allies "2")
)
#end-if
(defrule
	(taunt-detected any-ally 31)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(or
		(or
			(and 
				(players-current-age focus-player == castle-age)
				(players-military-population focus-player > 10)
			)
			(strategic-number sn-resource-control == 2)
		)
		(players-military-population focus-player > 16)
	)
=>
	(acknowledge-taunt this-any-ally 31)
	(chat-to-player this-any-ally "2")
)
(defrule
	(taunt-detected any-ally 31)
	(current-age >= castle-age)
	(military-population > 4)
	(or
		(strategic-number sn-military-level >= 0)
		(population > eighty-five-percent-pop)
	)
	(goal under-attack-goal 0)
=>
	(set-goal attack-goal 4)
	(enable-timer help-ally-timer 210)
	(set-strategic-number sn-target-evaluation-ally-proximity 32767)
	(up-get-player-fact this-any-ally allied-sn sn-target-player-number math-goal)
	(up-modify-sn sn-target-player-number g:= math-goal)
	(acknowledge-taunt this-any-ally 31)
	(chat-to-allies-using-id 22153)
)
(defrule
	(or
		(population >= eighty-five-percent-pop)
		(strategic-number sn-military-level > 0)
	)
	(taunt-detected any-ally 222)
	(goal position-goal pocket)
=>
	(set-goal attack-goal 4)
	(enable-timer help-ally-timer 210)
	(up-get-player-fact this-any-ally allied-goal attacking-enemy-goal math-goal)
	(up-modify-sn sn-target-player-number g:= math-goal); help ally with UP
	(set-strategic-number sn-target-evaluation-ally-proximity 32767)
	(acknowledge-taunt this-any-ally 222)
	(chat-to-allies-using-id 22153)
)
#load-if-defined UP-POCKET-POSITION ; not as a flank in 3v3+
(defrule
	(population < eighty-five-percent-pop)
	(taunt-detected any-ally 222)
	(strategic-number sn-military-level >= -2)
=>
	(enable-timer help-ally-timer 210)
	(up-get-player-fact this-any-ally allied-goal position-self-goal math-goal2)
	(up-get-player-fact this-any-ally allied-goal position-self-y-goal math-goal3)
	(set-goal split-rule-goal 5)
	(up-jump-rule 3)
)
(defrule
	(population < eighty-five-percent-pop)
	(taunt-detected any-ally 222)
	(game-time < 1500)
	(military-population > 4)
=>
	(up-get-player-fact this-any-ally player-number 0 math-goal2)
	(set-goal split-rule-goal 19)
	(up-modify-sn sn-focus-player-number g:= math-goal2)
	(up-get-focus-fact allied-goal unit-goal math-goal3)
)
(defrule
	(taunt-detected any-ally 222)
	(goal split-rule-goal 19)
	(or
		(up-allied-goal any-ally patrol-goal g:== math-goal2)
		(goal math-goal3 my-unique-unit-line)
	)
=>
	(enable-timer help-ally-timer 210)
	(up-get-player-fact this-any-ally allied-goal position-self-goal math-goal2)
	(up-get-player-fact this-any-ally allied-goal position-self-y-goal math-goal3)
	(set-goal split-rule-goal 5)
)
(defrule
	(goal split-rule-goal 5)
	(nand
		(goal math-goal2 -1); sort out non cooperative AI
		(goal math-goal3 -1)
	)
=>
	(up-copy-point p1x-goal math-goal2)
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(set-goal split-rule-goal 6)
	(up-jump-rule 1)
)
(defrule
	(population < eighty-five-percent-pop); for non cooperative AIs
	(taunt-detected any-ally 222)
	(strategic-number sn-military-level >= -2)
=>
	(up-get-player-fact this-any-ally player-number 0 math-goal)
	(up-modify-sn sn-focus-player-number g:= math-goal)
        (up-get-point position-focus p1x-goal)
	(up-get-point position-self p2x-goal)
	(up-lerp-tiles p1x-goal p2x-goal c: -20)
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(set-goal split-rule-goal 6)
)
#else
#load-if-defined UP-2-PLAYER-TEAM
(defrule
	(population < eighty-five-percent-pop)
	(taunt-detected any-ally 222)
	(strategic-number sn-military-level >= -1)
=>
	(enable-timer help-ally-timer 210)
	(up-get-player-fact this-any-ally allied-goal position-self-goal math-goal2)
	(up-get-player-fact this-any-ally allied-goal position-self-y-goal math-goal3)
	(set-goal split-rule-goal 5)
)
(defrule
	(goal split-rule-goal 5)
	(nand
		(goal math-goal2 -1); sort out non cooperative AI
		(goal math-goal3 -1)
	)
=>
	(up-copy-point p1x-goal math-goal2)
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(set-goal split-rule-goal 6)
	(up-jump-rule 1)
)
(defrule
	(population < eighty-five-percent-pop); for non cooperative AIs
	(taunt-detected any-ally 222)
	(strategic-number sn-military-level >= -1)
=>
	(enable-timer help-ally-timer 210)
	(up-get-player-fact this-any-ally player-number 0 math-goal)
	(up-modify-sn sn-focus-player-number g:= math-goal)
        (up-get-point position-focus p1x-goal)
	(up-get-point position-self p2x-goal)
	(up-lerp-tiles p1x-goal p2x-goal c: -10)
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(set-goal split-rule-goal 6)
)
#end-if
#end-if
(defrule
	(taunt-detected any-ally 222)
	(goal split-rule-goal 6)
=>
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-target-point p1x-goal action-patrol -1 defensive)
	(up-copy-point save-point-goal p1x-goal)
	(enable-timer attack-timer 180)
	(enable-timer reset-town-size-timer 180)
	(enable-timer retreat-timer 90)
	(enable-timer micro-timer 60)
	(up-get-player-fact this-any-ally allied-goal attacking-enemy-goal patrol-goal)
	(chat-to-allies-using-id 22153)
	(up-chat-data-to-self "help ally against player %d " g: patrol-goal)
	(acknowledge-taunt this-any-ally 222)
)
(defrule
	(taunt-detected any-ally 222)
	(goal hostilities-goal 0)
	(goal position-goal flank); we're flank
=>
	(up-get-player-fact this-any-ally allied-goal position-goal math-goal); check if ally is flank or pocket
)
(defrule
	(taunt-detected any-ally 222)
	(goal hostilities-goal 0)
	(goal position-goal flank)
	(or
		(goal math-goal pocket); ally who asked for help is pocket
		(map-size medium); or 2v2
	)
	(or
		(strategic-number sn-military-level >= 0)
		(unit-type-count cavalry-units > 11)
	)
	(strategic-number sn-military-level >= -1)
=>
	(set-goal attack-goal 4)
	(enable-timer help-ally-timer 210)
	(up-get-player-fact this-any-ally allied-goal attacking-enemy-goal math-goal)
	(up-modify-sn sn-target-player-number g:= math-goal); help ally with UP
	(set-strategic-number sn-target-evaluation-ally-proximity 32767)
	(acknowledge-taunt this-any-ally 222)
)
(defrule
	(game-time < 1800)
	(taunt-detected any-ally 222)
	(goal hostilities-goal 0)
	(goal position-goal flank)
	(goal math-goal flank)
	(players-building-type-count focus-player castle > 0); closest enemy does uu def
	(players-military-population focus-player < 15)
	(not (up-projectile-detected projectile-castle c:< 60000)); castle isn't placed dangerous
=>
	(set-goal attack-goal 4)
	(enable-timer help-ally-timer 210)
	(up-get-player-fact this-any-ally allied-goal attacking-enemy-goal math-goal)
	(up-modify-sn sn-target-player-number g:= math-goal); help ally with UP
	(set-strategic-number sn-target-evaluation-ally-proximity 32767)
	(acknowledge-taunt this-any-ally 222)
	(chat-to-allies-using-id 22153)
)
(defrule
	(taunt-detected any-ally 222)
	(goal hostilities-goal 0)
	(goal position-goal flank)
	(goal math-goal flank)
	(up-compare-sn sn-focus-player-number g:== closest-enemy-goal)
	(up-allied-goal any-ally threat-player-goal g:== closest-enemy-goal); an ally is fighting our closest enemy
=>
	(up-get-focus-fact military-population 0 math-goal)
	(up-get-fact military-population 0 math-goal2)
	(up-modify-goal math-goal2 g:- math-goal)
)
(defrule
	(taunt-detected any-ally 222)
	(goal hostilities-goal 0)
	(goal position-goal flank)
	(goal math-goal flank)
	(up-compare-sn sn-focus-player-number g:== closest-enemy-goal)
	(up-allied-goal any-ally threat-player-goal g:== closest-enemy-goal); an ally is fighting our closest enemy
	(up-compare-goal math-goal2 >= 0); Our military is at least equal
	(nand
		(players-current-age focus-player == imperial-age)
		(current-age < imperial-age)
	)
=>
	(set-goal attack-goal 4)
	(enable-timer help-ally-timer 210)
	(acknowledge-taunt this-any-ally 222)
	(set-strategic-number sn-target-evaluation-ally-proximity 32767)
	(chat-to-allies-using-id 22153)
)
(defrule
	(strategic-number sn-maximum-town-size > 40)
	(up-projectile-detected projectile-castle c:< 2000); running into a castle
	(up-building-type-in-town c: castle == 0); but target player has none?!
	(or
		(unit-type-count battering-ram-line > 0)
		(unit-type-count trebuchet-set > 0)
	)
=>
	(up-modify-sn sn-safe-town-size c:+ 15); increase safe town-size to target the castle
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 1); retarget
)
#load-if-not-defined POPULATION-CAP-25
(defrule
	(current-age == imperial-age)
	(population >= eighty-five-percent-pop)
=>
	(up-jump-rule 2)
)
(defrule
	(or
		(or
			(up-projectile-detected projectile-castle c:< 2000)
			(up-projectile-detected projectile-town-center c:< 2000)
		)
		(and
			(up-compare-goal threat-player-goal g:== closest-enemy-goal)
			(strategic-number sn-target-player-number g:!= closest-enemy-goal)
		)
	)
=>
	(up-modify-sn sn-focus-player-number g:= threat-player-goal)
	(up-get-focus-fact military-population 0 math-goal)
	(up-get-fact military-population 0 math-goal2)
	(up-modify-goal math-goal g:- math-goal2)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
)
(defrule
	(strategic-number sn-target-player-number g:!= closest-enemy-goal)
	(up-compare-goal threat-player-goal g:== closest-enemy-goal)
	(goal team-coordination-goal 1)
	(or
		(or
			(up-projectile-detected projectile-castle c:< 2000)
			(up-projectile-detected town-center c:< 2000)
		)
		(up-compare-goal math-goal > 10)
	)
	(or
		(and
			(players-building-type-count any-enemy stone-wall > 10); we run into fortifications)
			(up-projectile-detected projectile-castle c:< 2000)
		)
		(up-compare-goal math-goal > -6); we run into superior enemys
	)
=>
	(set-goal retreat-now-goal 1)
	(enable-timer attack-timer 180); don't atattack again immediately
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal team-coordination-goal 1)
	(strategic-number sn-military-level < 2)
	(unit-type-count ranged-units > 12)
	(research-available ri-pikeman)
	(strategic-number sn-cavalry-threat > 1)
	(timer-triggered micro-timer)
=>
	(enable-timer micro-timer 10)
	(set-goal retreat-now-goal 2)
)

#load-if-not-defined DEATH-MATCH
#load-if-not-defined UP-1-PLAYER-TEAM
(defrule
	(player-valid any-ally)
	(strategic-number sn-maximum-town-size < 40)
	(strategic-number sn-number-attack-groups == 0)
	(timer-triggered attack-timer)
	(goal attack-goal 0)
	(goal under-attack-goal 0)
	(goal retreat-now-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on islands
	(or
		(unit-type-count cavalry-units > 3)
		(military-population > 15)
	)
=>
	(set-goal raid-goal 2); allow selecting a potential target for raid
)
(defrule
	(goal raid-goal 2)
	(or
		(and
			(goal unit-goal skirmisher)
			(research-available ri-elite-skirmisher)
		)
		(and
			(unit-type-count ranged-units > 14)
			(research-available ri-bodkin-arrow)
		)
	)
	(unit-type-count battering-ram-line == 0)
=>
	(set-goal raid-goal 0)
)
(defrule
	(up-projectile-detected projectile-castle c:< 120000)
	(up-projectile-target projectile-castle != 947); not just scout getting damaged
=>
	(set-goal raid-goal 0)
)

; Check for possible raid targets - highest priority first
; play aggressive vs sling or against grush on mixed maps.

(defrule
	(goal raid-goal 2)
	(strategic-number sn-current-age >= castle)
	(strategic-number sn-target-player-number > 0)
	(players-building-count target-player > 0); keep a previously chosen target player as target
=>
	(up-get-target-fact military-population 0 math-goal2)
	(up-get-target-fact unit-type-count galley-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-target-fact unit-type-count fire-ship-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-fact military-population 0 math-goal3)
	(up-modify-goal math-goal3 g:- math-goal2)
	(set-goal split-rule-goal 2)
)
(defrule
	(goal split-rule-goal 2)
	(up-compare-goal math-goal3 > 5)
	(or
		(up-compare-goal math-goal2 < 10)
		(up-compare-goal math-goal3 > 15)
	)
	(or
		(up-compare-goal math-goal2 < 20)
		(up-compare-goal math-goal3 > 20)
	)
	(up-compare-goal math-goal2 < 30)
	(players-population target-player > 20); don't waste time vs an almost dead enemy
=>
	(set-goal attack-goal 7)
)
(defrule
	(goal attack-goal 7)
	(or
		(players-building-type-count target-player castle > 0)
		(or
			(up-projectile-detected projectile-fortification c:< 10000)
			(players-building-type-count target-player watch-tower > 4)
		)
	)
=>
	(set-goal math-goal 0)
	(set-goal attack-goal 0)
	(set-goal raid-goal 2); enable find another target
	(up-jump-rule 2)
)
(defrule
	(players-current-age target-player > feudal-age)
	(goal attack-goal 7)
	(or 
		(and
			(goal strategy-goal flush)
			(current-age == feudal-age)
		)
		(or
			(goal unit-goal eagle-warrior)
			(goal unit-goal archer)
		)
	)
	(strategic-number sn-cavalry-threat >= 1); enemy cavalry found
	(unit-type-count spearman-line < 6); no anti cavalry
=>
	(set-goal math-goal 0)
	(set-goal attack-goal 0)
	(set-goal raid-goal 2); enable find another target
	(up-jump-rule 1)
)
(defrule
	(goal split-rule-goal 2)
	(goal attack-goal 7)
	(timer-triggered attack-timer)
	(goal under-attack-goal 0)
=>
	(set-goal raid-goal 1)
	(up-chat-data-to-self "Target the old target: %d" s: sn-target-player-number)
)
(defrule
	(strategic-number sn-target-evaluation-ally-proximity != 32767)
	(goal raid-goal 2)
	(up-compare-sn sn-focus-player-number g:== closest-enemy-goal)
	(players-building-count focus-player > 0); focus-player = nearest player as set above ; primary raid target
=>
	(up-get-focus-fact military-population 0 math-goal2)
	(up-get-focus-fact unit-type-count galley-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-focus-fact unit-type-count fire-ship-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-fact military-population 0 math-goal3)	
	(up-modify-goal math-goal3 g:- math-goal2)
	(set-goal split-rule-goal 7)
)
(defrule
	(goal split-rule-goal 7)
	(goal control-goal shot)
	(up-compare-goal math-goal3 > 10)
	(or
		(up-compare-goal math-goal2 < 12)
		(up-compare-goal math-goal3 > 15)
	)
	(or
		(up-compare-goal math-goal2 < 20)
		(up-compare-goal math-goal3 > 20)
	)
	(up-compare-goal math-goal2 < 30)
=>
	(set-goal attack-goal 7)
	(set-goal raid-goal 3); stop selecting a raid target
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
)
(defrule
	(goal split-rule-goal 7)
	(up-compare-goal math-goal2 < 10)
	(or
		(up-compare-goal math-goal3 > 6); my military - land units of enemy => small advantage
		(up-compare-goal math-goal2 < 2); or enemy has still only scout
	)
	(players-building-type-count focus-player castle == 0); no enemy castles
=>
	(set-goal attack-goal 7)
	(set-goal raid-goal 3); stop selecting a raid target
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
)
(defrule
	(goal attack-goal 7)
	(or
		(and
			(up-projectile-detected projectile-castle c:< 100000)
			(unit-type-count battering-ram-line == 0)
		)
		(and
			(players-population focus-player > 10); don't waste time vs an almost dead enemy
			(up-allied-goal any-ally under-attack-goal == 1)
		)
	)
=>
	(set-goal math-goal 0)
	(set-goal attack-goal 0)
	(set-goal raid-goal 2); enable find another target
	(up-jump-rule 1)
)
(defrule
	(goal split-rule-goal 7)
	(goal attack-goal 7)
	(timer-triggered attack-timer)
	(goal under-attack-goal 0)
=>
	(set-goal raid-goal 1)
	(up-chat-data-to-self "Target closest: %d" s: sn-target-player-number)
)
#load-if-not-defined BALTIC-MAP
#load-if-not-defined OASIS-MAP
#load-if-defined UP-4-PLAYER-TEAM
(defrule
	(goal position-goal flank)
	(up-compare-goal control-goal != shot)
=>
	(up-jump-rule 5)
)
#end-if
(defrule
	(goal raid-goal 2)
	(up-allied-goal any-ally team-coordination-goal == 1); ally is attacking
	(up-allied-sn any-ally sn-target-player-number > 0); target already targeted by an ally
	(up-compare-goal position-goal != flank); don't do that with flank as it tends to attack an too far away enemy and we're defenseless vs counter attacks
	(strategic-number sn-current-age >= castle)
=>
	(up-get-player-fact this-any-ally allied-sn sn-target-player-number math-goal)
	(up-modify-sn sn-focus-player-number g:= math-goal)
	(up-get-focus-fact military-population 0 math-goal2)
	(up-get-focus-fact unit-type-count galley-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-focus-fact unit-type-count fire-ship-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-fact military-population 0 math-goal3)	
	(up-modify-goal math-goal3 g:- math-goal2)
	(set-goal split-rule-goal 8)
)
(defrule
	(goal split-rule-goal 8)
	(up-compare-goal math-goal2 < 10)
	(or
		(up-compare-goal math-goal3 > 6)
		(up-compare-goal math-goal2 < 2)
	)
	(or
		(players-building-type-count focus-player castle == 0)
		(unit-type-count battering-ram-line > 0)
	)
=>
	(set-goal attack-goal 7)
	(set-goal raid-goal 3)
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
)
(defrule
	(game-time < 1800)
	(research-completed ri-chain-barding)
	(goal control-goal shot)
	(goal split-rule-goal 8)
	(or
		(up-compare-goal math-goal3 > -5)
		(military-population > 15)
	)
=>
	(set-goal attack-goal 7)
	(set-goal raid-goal 3)
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
)
(defrule
	(goal attack-goal 7)
	(or
		(players-building-type-count target-player castle > 0)
		(up-projectile-detected projectile-fortification c:< 10000)
	)
	(unit-type-count battering-ram-line == 0)
=>
	(set-goal math-goal 0)
	(set-goal attack-goal 0)
	(set-goal raid-goal 2)
	(up-jump-rule 1)
)
(defrule
	(goal split-rule-goal 8)
	(goal attack-goal 7)
	(timer-triggered attack-timer)
	(goal under-attack-goal 0)
=>
	(set-goal raid-goal 1)
	(up-chat-data-to-self "target ally target: %d" s: sn-target-player-number)
)
#end-if
#end-if
(defrule
	(goal raid-goal 2)
	(strategic-number sn-current-age >= castle)
	(strategic-number sn-target-evaluation-ally-proximity != 32767)
=>
	(up-find-player enemy find-closest math-goal); reset up find (?)
	(up-find-next-player enemy find-closest math-goal); find second closest enemy
	(up-modify-sn sn-focus-player-number g:= math-goal)
	(up-get-focus-fact military-population 0 math-goal2)
	(up-get-focus-fact unit-type-count galley-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-focus-fact unit-type-count fire-ship-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-fact military-population 0 math-goal3)	
	(up-modify-goal math-goal3 g:- math-goal2)
	(set-goal split-rule-goal 9)
)
(defrule
	(players-building-count focus-player > 0)
	(players-building-type-count focus-player castle == 0)
	(goal split-rule-goal 9)
	(up-compare-goal math-goal2 < 10)
	(or
		(up-compare-goal math-goal3 > 9)
		(up-compare-goal math-goal2 < 2)
	)
=>
	(set-goal attack-goal 7)
	(set-goal raid-goal 3)
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
)
(defrule
	(goal attack-goal 7)
	(or
		(players-building-type-count target-player castle > 0)
		(up-projectile-detected projectile-fortification c:< 10000)
	)
	(unit-type-count battering-ram-line == 0)
=>
	(set-goal math-goal 0)
	(set-goal attack-goal 0)
	(set-goal raid-goal 2)
	(up-jump-rule 1)
)
(defrule
	(goal split-rule-goal 9)
	(goal attack-goal 7)
	(timer-triggered attack-timer)
	(goal under-attack-goal 0)
=>
	(set-goal raid-goal 1)
	(up-chat-data-to-self "Target second nearest Player: %d" s: sn-target-player-number)
)
#load-if-not-defined UP-2-PLAYER-TEAM
(defrule
	(goal raid-goal 2)
	(strategic-number sn-current-age >= castle)
	(strategic-number sn-target-evaluation-ally-proximity != 32767)
=>
	(up-find-player enemy find-closest math-goal); just overwrite them
	(up-find-next-player enemy find-closest math-goal);
	(up-find-next-player enemy find-closest math-goal); find third closest enemy
	(up-modify-sn sn-focus-player-number g:= math-goal)
	(up-get-focus-fact military-population 0 math-goal2)
	(up-get-focus-fact unit-type-count galley-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-focus-fact unit-type-count fire-ship-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-fact military-population 0 math-goal3)	
	(up-modify-goal math-goal3 g:- math-goal2)
	(set-goal split-rule-goal 10)
)
(defrule
	(players-building-count focus-player > 0)
	(players-building-type-count focus-player castle == 0)
	(goal split-rule-goal 10)
	(up-compare-goal math-goal2 < 10)
	(or
		(up-compare-goal math-goal3 > 9)
		(up-compare-goal math-goal2 < 2)
	)
=>
	(set-goal attack-goal 7)
	(set-goal raid-goal 3)
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
)
(defrule
	(goal attack-goal 7)	
	(or
		(players-building-type-count target-player castle > 0)
		(up-projectile-detected projectile-fortification c:< 10000)
	)
	(unit-type-count battering-ram-line == 0)
=>
	(set-goal math-goal 0)
	(set-goal attack-goal 0)
	(set-goal raid-goal 2)
	(up-jump-rule 1)
)
(defrule
	(goal split-rule-goal 10)
	(goal attack-goal 7)
	(timer-triggered attack-timer)
	(goal under-attack-goal 0)
=>
	(set-goal raid-goal 1)
	(up-chat-data-to-self "Target third nearest Player: %d" s: sn-target-player-number)
)
(defrule
	(goal position-goal pocket)
	(goal raid-goal 2)
	(strategic-number sn-current-age >= castle)
	(strategic-number sn-target-evaluation-ally-proximity != 32767)
=>
	(up-find-player enemy find-closest math-goal); just overwrite them
	(up-find-next-player enemy find-closest math-goal)
	(up-find-next-player enemy find-closest math-goal)
	(up-find-next-player enemy find-closest math-goal); find fourth closest enemy
	(up-get-focus-fact unit-type-count galley-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-focus-fact unit-type-count fire-ship-line math-goal3)
	(up-modify-goal math-goal2 g:- math-goal3)
	(up-get-fact military-population 0 math-goal3)	
	(up-modify-goal math-goal3 g:- math-goal2)
	(set-goal split-rule-goal 11)
)
(defrule
	(players-building-count focus-player > 0)
	(players-building-type-count focus-player castle == 0)
	(goal split-rule-goal 11)
	(up-compare-goal math-goal2 < 10)
	(or
		(up-compare-goal math-goal3 > 12)
		(up-compare-goal math-goal2 < 2)
	)
=>
	(set-goal attack-goal 7)
	(up-modify-sn sn-target-player-number s:= sn-focus-player-number)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
)
(defrule
	(goal attack-goal 7)
	(or
		(players-building-type-count target-player castle > 0)
		(up-projectile-detected projectile-fortification c:< 10000)
	)
	(unit-type-count battering-ram-line == 0)
=>
	(set-goal math-goal 0)
	(set-goal attack-goal 0)
	(set-goal raid-goal 2)
	(up-jump-rule 1)
)
(defrule
	(goal split-rule-goal 11)
	(goal attack-goal 7)
	(timer-triggered attack-timer)
	(goal under-attack-goal 0)
=>
	(set-goal raid-goal 1)
	(up-chat-data-to-self "Target fourth nearest Player: %d" s: sn-target-player-number)
)
#end-if
#else
#load-if-not-defined UP-MULTIPLE-ENEMIES
(defrule
	(game-time < 1620)
	(strategic-number sn-maximum-town-size < 40)
	(strategic-number sn-number-attack-groups == 0)
	(timer-triggered attack-timer)
	(goal attack-goal 0)
	(not (town-under-attack))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on islands
	(unit-type-count cavalry-units > 10)
	(or
		(players-building-type-count every-enemy lumber-camp > 0)
		(players-building-type-count every-enemy mining-camp > 0)
	)
=>
	(set-goal raid-goal 2)
)
(defrule
	(strategic-number sn-military-level >= 0)
	(goal raid-goal 2)
	(or
		(players-unit-type-count every-enemy archer-line > 4)
		(players-unit-type-count every-enemy skirmisher-line > 4)
	)
	(goal anti-cavalry-threat-goal 0)
	(players-building-type-count every-enemy castle == 0)
	(players-unit-type-count every-enemy monk < 4)
=>
	(set-goal attack-goal 7)
	(set-goal raid-goal 1)
)
#end-if ; no FFA Game
#end-if ; playing alone
#else ; = DM
#load-if-not-defined UP-1-PLAYER-TEAM
(defrule
	(goal team-coordination-goal 0)
	(up-compare-sn sn-target-player-number g:= closest-enemy-goal)
	(players-building-count every-enemy > 0)
=>
	(up-get-fact military-population 0 math-goal)
	(up-get-target-fact military-population 0 math-goal2)
	(up-modify-goal math-goal c:* 5)
	(up-modify-goal math-goal2 c:* 7)
)
(defrule
	(goal team-coordination-goal 0)
	(up-compare-sn sn-target-player-number g:= closest-enemy-goal)
	(players-building-count every-enemy > 0)
	(players-population target-player < 20)
	(up-allied-goal any-ally under-attack-goal == 1)
	(up-compare-goal math-goal g:>= math-goal2)	
=>
	(up-get-player-fact this-any-ally allied-goal attacking-enemy-goal math-goal)
	(up-modify-sn target-player g:= math-goal)
)
(defrule
	(goal team-coordination-goal 0)
	(up-compare-sn sn-target-player-number g:= closest-enemy-goal)
	(players-building-count every-enemy > 0)
	(up-compare-goal math-goal g:>= math-goal2)
=>
	(set-goal attack-goal 7)
)
#end-if
#end-if
(defrule
	(players-building-type-count any-enemy stone-wall > 0)
	(strategic-number sn-maximum-town-size >= 40)
	(strategic-number sn-maximum-town-size < 255)
	(up-building-type-in-town c: town-center == 0)
	(up-building-type-in-town c: castle == 0)
	(up-building-type-in-town c: watch-tower == 0)
	(up-building-type-in-town c: monastery == 0)
	(up-building-type-in-town c: market == 0)
	(up-building-type-in-town c: bombard-tower == 0)
	(up-building-type-in-town c: barracks == 0)
	(up-building-type-in-town c: stable == 0)
	(up-building-type-in-town c: archery-range == 0)
	(up-building-type-in-town c: siege-workshop == 0)
	(up-building-type-in-town c: lumber-camp == 0)
	(up-building-type-in-town c: mining-camp == 0)
=>
	(up-modify-sn sn-maximum-town-size c:+ 10); increase TS to reach buildings behind the wall
)
(defrule
	(game-time > 1200)
	(timer-triggered micro-timer)
	(up-compare-goal threat-time-goal > 5000)
	(strategic-number sn-number-attack-groups > 0)
	(strategic-number sn-minimum-attack-group-size < 2)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(unit-type-count religious-units < 12)
	(unit-type-count trebuchet-set == 0)
=>
	(enable-timer micro-timer 25)
	(set-strategic-number sn-group-form-distance 30)
	(set-strategic-number sn-number-attack-groups 196)
	(set-strategic-number sn-minimum-attack-group-size 48)
	(set-strategic-number sn-maximum-attack-group-size 48)
	(set-strategic-number sn-attack-group-gather-spacing 3)
	(chat-to-player my-player-number "no enemy activites detected - large groups")
)
(defrule
	(population > max-civ-pop)
	(strategic-number sn-target-player-number == 0)
=>
	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
	(set-strategic-number sn-safe-town-size 255)
)
(defrule
	(strategic-number sn-target-player-number > 0)
	(or
		(or
			(not (player-in-game target-player))
			(stance-toward target-player ally); reset target player or attacks will be stuck if we set the enemy to ally
		)
		(players-building-count target-player == 0)
	)
=>
	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
	(set-strategic-number sn-safe-town-size 255)
)
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-number-attack-groups > 0)
	(strategic-number sn-maximum-town-size < 40)
	(up-compare-goal attack-goal < 2)
	(nand
		(strategic-number sn-target-evaluation-ally-proximity > 0)
		(up-timer-status help-ally-timer == timer-running)
	)
=>
	(set-strategic-number sn-number-attack-groups 0)
	(set-goal retreat-now-goal 1)
)
#end-if
(defrule
	(strategic-number sn-target-player-number != 0)
	(timer-triggered help-ally-timer)
	(timer-triggered attack-timer)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
)
(defrule
	(goal threat-target-goal warships)
=>
	(set-strategic-number sn-filter-under-attack 1)
)
(defrule
	(up-compare-goal threat-target-goal != warships)
=>
	(set-strategic-number sn-filter-under-attack 2)
)
(defrule
	(or
		(or
			(or
				(goal raid-goal 1)
				(unit-type-count 42 > 0)
			)
			(and
				(unit-type-count battering-ram-line == 0)
				(up-projectile-detected projectile-castle c:< 3000)
			)
		)
		(and
			(goal strategy-goal flush)
			(strategic-number sn-military-level < 2)
		)
	)
	(up-compare-goal threat-target-goal != warships)
=>
	(set-strategic-number sn-filter-under-attack 0)
)
(defrule
	(goal retreat-now-goal 1)
	(not (town-under-attack))
	(military-population > 30)
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total monk == 0); train a single monk for healing
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal retreat-now-goal 1)
	(timer-triggered retreat-timer)
=>
	(enable-timer retreat-timer 5)
	(up-retreat-now)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-disable-defend-groups 1)
	(set-strategic-number sn-filter-under-attack 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-maximum-town-size 12)
	(set-strategic-number sn-safe-town-size safe-town)
	(set-goal retreat-now-goal 0)
	(enable-timer disable-defend-groups-timer 3)
	(set-goal attack-status-goal retreat)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal retreat-now-goal 2)
	(or
		(strategic-number sn-maximum-town-size >= 40)
		(strategic-number sn-number-attack-groups > 0)
	)
	(timer-triggered retreat-timer)
=>
	(enable-timer retreat-timer 5)
	(up-retreat-now)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-disable-defend-groups 1)
	(set-strategic-number sn-filter-under-attack 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-maximum-town-size 12)
	(set-strategic-number sn-safe-town-size safe-town)
	(set-goal retreat-now-goal 0)
	(enable-timer disable-defend-groups-timer 3)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
=>
	(up-jump-rule 18); TSA doesn't work on islands map
)
(defrule
	(goal position-goal pocket)
	(players-building-count any-enemy == 0)
=>
	(up-jump-rule 2); find all players first to eliminate slings
)
(defrule
	(players-building-count any-enemy > 0)
	(current-age >= feudal-age)
=>
	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
	(up-send-scout group-type-land-explore position-enemy)
	(enable-timer scouting-timer 40)
	(disable-self)
)
(defrule
	(or
		(strategic-number sn-target-player-number < 1)
		(up-compare-sn sn-target-player-number g:== closest-enemy-goal)
	)
	(players-current-age any-enemy >= feudal-age)
	(game-time < 1800)
	(timer-triggered scouting-timer)
	(strategic-number sn-infantry-threat == 0)
	(strategic-number sn-archer-threat == 0)
	(strategic-number sn-cavalry-threat == 0)
	(goal monk-threat-goal 0)
=>
	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
	(enable-timer scouting-timer 60)
	(up-send-scout group-type-land-explore position-enemy)
)
(defrule
	(strategic-number sn-number-attack-groups > 0)
	(players-building-type-count target-player market > 0)
	(players-unit-type-count any-enemy trade-cart > 10)
	(strategic-number sn-special-attack-type2 != town-center)
	(strategic-number sn-special-attack-type2 != market)
=>
	(up-set-defense-priority c: market c: 3000)
)
(defrule
	(game-time > 400)
	(or
		(death-match-game)
		(game-time > 1800)
	)
	(player-in-game any-ally)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(up-send-scout group-type-land-explore position-corner)
	(disable-self)
)
(defrule
	(strategic-number sn-maximum-town-size < 300)
	(strategic-number sn-maximum-town-size >= 40)
	(or
		(unit-type-count battering-ram-line > 0)
		(or
			(unit-type-count eagle-warrior-line > 23)
			(unit-type-count knight-line > 12)
		)
	)
	(players-building-type-count target-player town-center > 0)
	(up-building-type-in-town c: town-center == 0)
	(up-building-type-in-town c: castle == 0)
	(up-building-type-in-town c: watch-tower == 0)
	(military-population > 20)
	(players-military-population target-player < 12)
=>
	(up-modify-sn sn-maximum-town-size c:+ 20)
;	(up-chat-data-to-self "target TC: TS = %d" s: sn-maximum-town-size); finish off low pop enemy quickly
	(up-set-defense-priority c: castle c: 3000)
	(up-set-defense-priority c: town-center c: 2000)
)
(defrule
	(strategic-number sn-number-attack-groups > 0)
	(or
		(unit-type-count battering-ram-line > 0)
		(or
			(unit-type-count eagle-warrior-line > 23)
			(unit-type-count knight-line > 12)
		)
	)
	(players-building-type-count target-player town-center > 0)
	(military-population > 20)
	(players-military-population target-player < 12)
	(players-building-type-count target-player watch-tower < 4)
=>
	(set-strategic-number sn-special-attack-type2 town-center)
)
(defrule
	(up-projectile-detected projectile-watch-tower c:< 2000)
	(or
		(unit-type-count battering-ram-line > 0)
		(or
			(unit-type-count eagle-warrior-line > 12)
			(unit-type-count knight-line > 3)
		)
	)
	(players-building-type-count target-player watch-tower > 0)
=>
	(up-set-defense-priority c: watch-tower c: 2000)
	(set-strategic-number sn-disable-tower-priority 0)
)
(defrule
	(cc-players-unit-type-count 0 tree > 50)
	(population > seventy-five-percent-pop)
	(players-population target-player < twenty-five-percent-pop)
=>
	(set-strategic-number sn-number-explore-groups 1); search for enemy to prevent him from hiding
)
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined BLACK-FOREST-MAP
(defrule
	(or
		(unit-type-count castle-arrow > 0)
		(unit-type-count castle-arrow-chemistry > 0)
	)
=>
	(up-jump-rule 1); or it won't react to town under attack
)
(defrule
	(up-compare-goal unit-goal != monk)
	(strategic-number sn-maximum-town-size < 300)
	(strategic-number sn-maximum-town-size >= 40)
	(population >= del-civ-pop)
	(unit-type-count trebuchet-set > 0)
	(up-building-type-in-town c: town-center == 0)
	(up-building-type-in-town c: castle == 0)
	(up-building-type-in-town c: bombard-tower == 0)
	(up-building-type-in-town c: barracks < 3)
	(up-building-type-in-town c: stable < 3)
	(up-building-type-in-town c: archery-range < 3)
	(up-enemy-villagers-in-town < 9); dont't bother with random camps if they're unused; if camp is used, this won't be true
=>
	(up-modify-sn sn-maximum-town-size c:+ 20)
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 5)
	(up-chat-data-to-self "TS = %d" s: sn-maximum-town-size)
)
(defrule
	(goal attack-status-goal tsa)
	(or
		(players-building-type-count target-player lumber-camp > 0)
		(players-building-type-count target-player mining-camp > 0)
	)
	(up-building-type-in-town c: mining-camp == 0)
	(up-building-type-in-town c: lumber-camp == 0)
	(nand
		(up-building-type-in-town c: watch-tower > 0)
		(building-type-count battering-ram > 0)
	)
	(or
		(players-military-population target-player < 25); don't run through his base if he has lots of military
		(up-enemy-buildings-in-town == 0)
	)
=>
	(up-modify-sn sn-maximum-town-size c:+ 5)
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 5)
)
#end-if
#end-if
(defrule
	(unit-type-count siege-units > 1)
=>
	(up-set-defense-priority c: mining-camp c: 300); set camps low and go for TC/castles, to do some damage
	(up-set-defense-priority c: lumber-camp c: 300)
)
(defrule
	(goal attack-status-goal tsa)
	(up-building-type-in-town c: castle > 0)
	(unit-type-count siege-units == 0)
=>
	(up-retreat-now)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-minimum-attack-group-size 0)
	(set-strategic-number sn-maximum-attack-group-size 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-maximum-town-size 12)
	(set-goal attack-status-goal retreat)
	(enable-timer attack-timer 120)
)
(defrule
	(strategic-number sn-target-player-number == 0)
	(up-compare-goal attack-goal >= 2)
	(timer-triggered attack-timer)
	(goal under-attack-goal 0)
	(players-building-count every-enemy > 0)
=>
	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
#load-if-defined DEATH-MATCH
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-target-player-number > 0)
	(up-compare-goal attack-goal >= 2)
	(players-building-count target-player > 0)
	(game-time < 900)
=>
	(set-strategic-number sn-number-attack-groups 199)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
	(set-strategic-number sn-group-form-distance 5)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal groups)
	(enable-timer attack-timer 120)
)
#else
(defrule
	(strategic-number sn-target-player-number > 0)
	(up-compare-goal attack-goal >= 2)
	(not (town-under-attack))
	(players-building-count target-player > 0)
	(game-time < 420)
=>
	(set-strategic-number sn-number-attack-groups 199)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
	(set-strategic-number sn-group-form-distance 5)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal groups)
	(enable-timer attack-timer 120)
)
#end-if
#end-if
(defrule
	(strategic-number sn-target-player-number < 1)
	(up-compare-goal attack-goal >= 2)
	(not (town-under-attack))
	(players-building-count any-enemy > 0)
=>
	(set-strategic-number sn-number-attack-groups 199)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
	(set-strategic-number sn-group-form-distance 5)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal groups)
	(enable-timer attack-timer 60)
)
(defrule
	(strategic-number sn-target-player-number > 0)
	(goal attack-goal 2)
	(timer-triggered attack-timer)
	(not (town-under-attack))
	(players-building-count target-player > 0)
=>
	(set-goal split-rule-goal 12)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal tsa)
	(set-strategic-number sn-group-form-distance 30)
	(set-strategic-number sn-attack-group-gather-spacing 3)
	(chat-to-allies "31")
	(chat-to-allies-using-id 22116)
)
(defrule
	(strategic-number sn-target-player-number > 0)
	(or
		(goal attack-goal 4)
		(goal attack-goal 7)
	)
	(timer-triggered attack-timer)
	(not (town-under-attack))
	(players-building-count target-player > 0)
=>
	(set-goal split-rule-goal 12)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal tsa)
	(set-strategic-number sn-group-form-distance 30)
	(set-strategic-number sn-attack-group-gather-spacing 3)
)
(defrule
	(or
		(unit-type-count scorpion-line > 12)
		(or
			(unit-type-count religious-units > 12)
			(unit-type-count trebuchet-set > 0)
		)
	)
	(goal split-rule-goal 12)
=>
	(set-goal split-rule-goal 0)
	(set-strategic-number sn-disable-defend-groups 1)
	(up-get-target-fact player-distance 0 math-goal)
	(up-modify-sn sn-maximum-town-size g:= math-goal)
	(up-modify-sn sn-maximum-town-size c:+ 2)
	(enable-timer disable-defend-groups-timer 3)
	(enable-timer attack-timer 60)
	(enable-timer reset-town-size-timer 62)
	(up-chat-data-to-self "TSA = %d" s: sn-maximum-town-size)
)
(defrule
	(goal split-rule-goal 12)
=>
	(set-strategic-number sn-disable-attack-groups 1)
	(set-strategic-number sn-number-attack-groups 196)
	(set-strategic-number sn-minimum-attack-group-size 48)
	(set-strategic-number sn-maximum-attack-group-size 48)
	(set-strategic-number sn-disable-defend-groups 1)
	(up-get-target-fact player-distance 0 math-goal)
	(up-modify-sn sn-maximum-town-size g:= math-goal)
	(up-modify-sn sn-maximum-town-size c:+ 2)
	(enable-timer disable-defend-groups-timer 3)
	(enable-timer attack-timer 60)
	(enable-timer reset-town-size-timer 62)
	(up-chat-data-to-self "Group TSA = %d" s: sn-maximum-town-size)
)
(defrule
	(goal attack-goal 4)
	(or
		(unit-type-count scorpion-line > 12)
		(or
			(unit-type-count religious-units > 12)
			(unit-type-count trebuchet-set > 0)
		)
	)
=>
	(up-get-target-fact player-distance 0 math-goal)
	(up-modify-sn sn-maximum-town-size g:= math-goal)
	(up-modify-sn sn-maximum-town-size c:+ 2)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal tsa)
	(enable-timer attack-timer 60)
	(enable-timer reset-town-size-timer 62)
	(up-chat-data-to-self "TSA = %d" s: sn-maximum-town-size)
)
(defrule
	(goal attack-goal 4)
=>
	(set-strategic-number sn-disable-attack-groups 1)
	(set-strategic-number sn-number-attack-groups 196)
	(set-strategic-number sn-minimum-attack-group-size 48)
	(set-strategic-number sn-maximum-attack-group-size 48)
	(set-strategic-number sn-attack-group-gather-spacing 3)
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 3)
	(up-get-target-fact player-distance 0 math-goal)
	(up-modify-sn sn-maximum-town-size g:= math-goal)
	(up-modify-sn sn-maximum-town-size c:+ 2)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal tsa)
	(enable-timer attack-timer 60)
	(enable-timer reset-town-size-timer 62)
	(up-chat-data-to-self "Group TSA = %d" s: sn-maximum-town-size)
)
#load-if-not-defined UP-1-PLAYER-TEAM
(defrule
	(up-projectile-detected projectile-fortification c:> 8000)
	(strategic-number sn-target-evaluation-ally-proximity == 32767)
	(unit-type-count siege-units == 0)
	(goal attack-status-goal retreat)
	(up-allied-goal every-ally attacking-enemy-goal s:!= sn-target-player-number)
=>
	(set-goal attack-status-goal 0)
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
)
#end-if
(defrule
	(up-player-distance every-enemy > 40)
	(strategic-number sn-maximum-town-size < 40); no attacks going anymore
	(or
		(strategic-number sn-disable-attack-groups == 1)
		(goal attack-status-goal tsa)
	)
=>
	(set-strategic-number sn-disable-attack-groups 0); so reset attacking SN
)
(defrule
	(timer-triggered attack-timer)
	(strategic-number sn-maximum-town-size < 40)
	(strategic-number sn-number-attack-groups > 0)
=>
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-minimum-attack-group-size 0)
	(set-goal attack-status-goal 0)
)
(defrule
	(or
		(strategic-number sn-maximum-town-size >= 40)
		(strategic-number sn-number-attack-groups > 0)
	)
	(goal team-coordination-goal 0)
=>
	(set-goal team-coordination-goal 1)
)
(defrule
	(goal raid-goal 1)
	(goal team-coordination-goal 0)
=>
	(set-goal raid-goal 0)
)
(defrule
	(goal under-attack-goal 1)
	(up-compare-goal attacking-enemy-goal > 0)
	(up-compare-sn sn-target-player-number g:!= attacking-enemy-goal)
=>
	(up-modify-sn sn-target-player-number g:= attacking-enemy-goal)
)
#load-if-not-defined UP-2-PLAYER-GAME
(defrule
	(strategic-number sn-target-player-number > 0); current target player is almost dead
	(strategic-number sn-maximum-town-size > 270); TSA bloated to finish TC, but obviously players-building-type-count just hasn't updated and no TC could be targeted
	(up-allied-goal any-ally under-attack-goal == 1); an ally needs help
=>
	(up-get-player-fact this-any-ally allied-goal attacking-enemy-goal math-goal)
	(up-get-player-fact this-any-ally allied-goal position-self-goal p1x-goal)
	(up-get-player-fact this-any-ally allied-goal position-self-y-goal p1y-goal)
)
(defrule
	(strategic-number sn-target-player-number > 0); current target player is almost dead
	(strategic-number sn-maximum-town-size > 270); TSA bloated to finish TC, but obviously players-building-type-count just hasn't updated and no TC could be targeted
	(up-allied-goal any-ally under-attack-goal == 1); an ally needs help
	(nand
		(goal p1x-goal -1); sort out non cooperative AI
		(goal p1y-goal -1)
	)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(set-goal split-rule-goal 20)
)
(defrule
	(strategic-number sn-target-player-number > 0); current target player is almost dead
	(strategic-number sn-maximum-town-size > 270); TSA bloated to finish TC, but obviously players-building-type-count just hasn't updated and no TC could be targeted
	(up-allied-goal any-ally under-attack-goal == 1); an ally needs help
	(goal p1x-goal -1)
	(goal p1y-goal -1)
=>
	(up-get-player-fact this-any-ally player-number 0 math-goal)
	(up-modify-sn sn-focus-player-number g:= math-goal)
        (up-get-point position-focus p1x-goal)
	(up-get-point position-self p2x-goal)
	(up-lerp-tiles p1x-goal p2x-goal c: -10)
	(up-reset-search 1 1 1 1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(set-goal split-rule-goal 20)
)
(defrule
	(up-allied-goal any-ally under-attack-goal == 1)
	(goal split-rule-goal 20)
=>
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-local c: -1 c: 200)
	(up-target-point p1x-goal action-patrol -1 defensive)
	(up-copy-point save-point-goal p1x-goal)
	(enable-timer attack-timer 180)
	(enable-timer reset-town-size-timer 180)
	(enable-timer retreat-timer 90)
	(enable-timer micro-timer 60)
	(set-strategic-number sn-maximum-town-size 32)
	(up-get-player-fact this-any-ally allied-goal attacking-enemy-goal patrol-goal)
	(up-chat-data-to-self "help ally against player %d " g: patrol-goal)
	(up-modify-sn sn-target-player-number g:= patrol-goal)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(strategic-number sn-target-player-number > 0); current target player has lost navy
	(or
		(and
			(players-unit-type-count target-player galley-line < 3)
			(players-unit-type-count target-player fire-ship-line < 3)
		)
		(players-building-type-count target-player dock == 0)
	)
	(up-allied-goal any-ally under-attack-goal == 1); an ally needs help
=>
	(up-get-player-fact this-any-ally allied-goal attacking-enemy-goal math-goal)
	(up-modify-sn sn-target-player-number g:= math-goal); switch target to attacker of that ally
	(set-strategic-number sn-target-evaluation-ally-proximity 32767)
)
(defrule
	(strategic-number sn-target-player-number > 0)
=>
	(set-strategic-number sn-safe-town-size safe-town)
)
(defrule
	(strategic-number sn-safe-town-size < 75)
	(population >= max-civ-pop)
	(or
		(death-match-game)
		(game-time > 3000)
	)
=>
	(set-strategic-number sn-safe-town-size 75)
)
(defrule
	(or
		(strategic-number sn-target-player-number < 1); target-player-number 0: all buildings outside safe-town-size don't trigger enemy-buildings in town
		(and
			(strategic-number sn-maximum-town-size > 270)
			(up-allied-goal any-ally under-attack-goal != 1)
		)
	)
=>
	(set-strategic-number sn-safe-town-size 255)
	(set-strategic-number sn-disable-defend-groups 0)
)
#end-if
(defrule
	(goal team-coordination-goal 1)
	(players-building-count target-player > 0)
	(research-completed ri-theocracy)
	(up-timer-status monk-micro-timer != timer-running)
	(unit-type-count 42 == 0)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 -1)
	(up-find-local c: religious-units c: 240)
	(up-get-point position-target p1x-goal)
	(up-target-point p1x-goal action-patrol -1 defensive)
	(enable-timer monk-micro-timer 30)
)
(defrule
	(or
		(or
			(goal team-coordination-goal 1)
			(strategic-number sn-maximum-town-size == 7)
		)
		(or
			(unit-type-count religious-units == 0)
			(up-enemy-units-in-town == 0)
		)
	)
=>
	(up-jump-rule 1)
)
(defrule
	(up-timer-status monk-micro-timer != timer-running)
=>
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-get-point position-self p1x-goal)
	(up-set-target-point p1x-goal)
	(up-filter-range -1 -1 -1 28)
	(up-filter-include cmdid-military -1 -1 -1)
	(up-find-remote c: -1 c: 40)
	(up-filter-include cmdid-monk -1 -1 -1)
	(up-find-remote c: -1 c: 40)
	(up-filter-include cmdid-villager -1 -1 -1)
	(up-find-remote c: -1 c: 40)
	(up-find-local c: religious-units c: 40)
	(up-target-objects -1 action-default -1 -1)
	(enable-timer monk-micro-timer 30)
)
(defrule
	(up-compare-goal enemy-sighted-goal != 0)
	(strategic-number sn-number-attack-groups > 0)
	(strategic-number sn-minimum-attack-group-size > 1)
	(strategic-number sn-disable-attack-groups == 1)
	(strategic-number sn-maximum-town-size > 40)
=>
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 200)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-disable-defend-groups 1)
	(set-strategic-number sn-enemy-sighted-response-distance 24)
	(enable-timer disable-defend-groups-timer 1)
	(chat-local-to-self "enemy activities detected")
)
(defrule
	(up-compare-goal enemy-sighted-goal != 0)
	(strategic-number sn-number-attack-groups > 0)
	(strategic-number sn-minimum-attack-group-size > 1)
=>
	(up-reset-unit c: ranged-units)
	(up-reset-unit c: cavalry-archer-units)
	(up-reset-unit c: infantry-units)
	(up-reset-unit c: cavalry-units)
	(up-reset-unit c: gunpowder-units)
	(up-reset-unit c: religious-units)
	(up-reset-unit c: 955)
	(up-reset-unit c: 923)
	(enable-timer disable-defend-groups-timer 1)
	(set-strategic-number sn-disable-defend-groups 1)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-enemy-sighted-response-distance 24)
	(chat-local-to-self "enemy activities detected")
)
(defrule
	(timer-triggered reset-town-size-timer)
	(population >= 140)
=>
	(disable-timer reset-town-size-timer)
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-disable-attack-groups 0)
	(set-strategic-number sn-maximum-town-size 24)
	(set-strategic-number sn-safe-town-size safe-town)
	(set-goal attack-status-goal 0)
)
(defrule
	(timer-triggered reset-town-size-timer)
	(population >= 90)
=>
	(disable-timer reset-town-size-timer)
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-disable-attack-groups 0)
	(set-strategic-number sn-maximum-town-size 20)
	(set-strategic-number sn-safe-town-size safe-town)
	(set-goal attack-status-goal 0)
)
(defrule
	(timer-triggered reset-town-size-timer)
	(population >= 60)
=>
	(disable-timer reset-town-size-timer)
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-disable-attack-groups 0)
	(set-strategic-number sn-maximum-town-size 16)
	(set-strategic-number sn-safe-town-size safe-town)
	(set-goal attack-status-goal 0)
)
(defrule
	(timer-triggered reset-town-size-timer)
=>
	(disable-timer reset-town-size-timer)
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-disable-attack-groups 0)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-safe-town-size safe-town)
	(set-goal attack-status-goal 0)
)
(defrule
	(timer-triggered attack-timer)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-maximum-town-size >= 40)
	(population > eighty-five-percent-pop); keep attacking when pop his high
	(or
		(nand
			(goal enemy-fortifications-goal 1)
			(unit-type-count trebuchet-set < 1); except if the enemy has fortification and we don't have trebs
		)
		(unit-type-count siege-ram > 5)
	)
	(unit-type-count castle-arrow == 0)
	(unit-type-count castle-arrow-chemistry == 0)
=>
	(enable-timer attack-timer 30)
	(enable-timer reset-town-size-timer 32)
)
(defrule
	(or
		(or
			(taunt-detected any-ally 222); if we could help, this taunt would have been acknowledeged by now
			(taunt-detected any-ally 211)
		)
		(or
			(taunt-detected any-ally 31)
			(taunt-detected any-ally 100)
		)
	)
=>	
	(acknowledge-taunt this-any-ally 222)
	(acknowledge-taunt this-any-ally 211)
	(acknowledge-taunt this-any-ally 31)
	(acknowledge-taunt this-any-ally 100)
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
	(chat-to-allies-using-id 22118)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed); not on islands
	(strategic-number sn-military-level < 0)
	(population < eighty-five-percent-pop)
=>
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-sentry-distance 1)
)
(defrule
	(goal enemy-sighted-goal 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-number-attack-groups == 198)
	(strategic-number sn-minimum-attack-group-size == 24)
	(strategic-number sn-maximum-attack-group-size == 24)
	(strategic-number sn-group-form-distance == 20)
=>
	(set-strategic-number sn-group-form-distance 5)
	(set-strategic-number sn-number-attack-groups 198)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
)

(defrule
	(or
		(and
			(death-match-game)
			(military-population > sixty-percent-pop)
		)
		(and
			(or
				(players-building-type-count any-enemy wonder > 0)
				(enemy-captured-relics)
			)
			(up-compare-goal victory-time-goal < 5000)
		)
	)
=>
	(up-jump-rule 4)
)
(defrule
	(goal team-coordination-goal 1)
	(unit-type-count battering-ram-line > 0)
	(unit-type-count trebuchet-set == 0)
	(up-projectile-detected projectile-castle c:< 2000)
	(up-projectile-target projectile-castle != civilians)
	(up-projectile-target projectile-castle != siege-units)
	(up-projectile-target projectile-castle != buildings)
	(up-compare-goal threat-target-goal != siege-units)
	(up-compare-goal threat-target-goal != civilians)
	(players-building-type-count any-enemy stone-wall-line > 10)
	(timer-triggered micro-timer)
=>
	(enable-timer micro-timer 40)
	(enable-timer disable-defend-groups-timer 10)
	(set-strategic-number sn-disable-defend-groups 1)
	(up-retreat-to battering-ram-line g: threat-target-goal)
	(up-chat-data-to-player my-player-number "projectile detected: retreat target to ram" g: threat-target-goal)
)
(defrule
	(game-time > 1200)
	(strategic-number sn-maximum-town-size >= 40)
	(unit-type-count 42 > 0)
	(up-projectile-detected projectile-castle c:< 2000)
	(up-projectile-target projectile-castle != civilians)
	(up-projectile-target projectile-castle != siege-units)
	(up-projectile-target projectile-castle != buildings)
	(up-compare-goal threat-target-goal != siege-units)
	(up-compare-goal threat-target-goal != civilians)
	(timer-triggered micro-timer)
=>
	(enable-timer micro-timer 5)
	(enable-timer disable-defend-groups-timer 8)
	(set-strategic-number sn-disable-defend-groups 1)
	(up-retreat-to 42 g: threat-target-goal)
	(up-chat-data-to-player my-player-number "projectile detected: retreat target to trebuchet" g: threat-target-goal)
)
(defrule
	(nor
		(up-projectile-detected projectile-castle c:< 20000)
		(up-projectile-detected projectile-bombard-tower c:< 20000)
	)
	(unit-type-count monk < 20)
=>
	(up-jump-rule 1)
)
(defrule
	(unit-type-count 42 > 0)
	(or
		(unit-type-count 469 > 0); trebuchet bullets
		(unit-type-count 371 > 0)
	)
	(strategic-number sn-military-level < 3)
	(timer-triggered retreat-timer)
=>
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 22)
	(enable-timer retreat-timer 20)
	(up-retreat-to 42 c: ranged-units)
	(up-retreat-to 42 c: cavalry-archer-units)
	(up-retreat-to 42 c: infantry-units)
	(up-retreat-to 42 c: cavalry-units)
	(up-retreat-to 42 c: gunpowder-units)
	(up-retreat-to 42 c: religious-units)
	(chat-to-player my-player-number "guard shooting trebs")
)
(defrule
	(or
		(goal forward-threat-goal 1)
		(strategic-number sn-number-civilian-militia != 0)
	)
=>
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
	(up-set-target-point position-self-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 30)
)
(defrule
	(or
		(goal forward-threat-goal 1)
		(strategic-number sn-number-civilian-militia != 0)
	)
	(nor 
		(up-find-remote c: watch-tower c: 1)
		(up-find-remote c: castle c: 1)
	)
=>
	(set-goal forward-threat-goal -1)
	(set-strategic-number sn-number-civilian-militia 0)
	(set-strategic-number sn-allow-civilian-offense 0)
	(chat-to-player my-player-number "The forward threat has been eliminated")
)
(defrule
	(building-type-count town-center > 0); doesn't work if no TC
	(or
		(players-building-type-count focus-player watch-tower > 0)
		(players-building-type-count focus-player castle > 0)
	)
=>
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
	(up-set-target-point position-self-goal)
	(up-reset-search 1 1 1 1)
	(up-filter-include -1 -1 -1 -1)
	(up-filter-exclude -1 -1 -1 -1)
	(up-filter-range -1 -1 -1 30)
)
(defrule
	(building-type-count town-center > 0); doesn't work if no TC
	(or
		(players-building-type-count focus-player watch-tower > 0)
		(players-building-type-count focus-player castle > 0)
	)
	(or 
		(up-find-remote c: watch-tower c: 1)
		(up-find-remote c: castle c: 1)
	)
=>
	(set-goal forward-threat-goal 1)
	(set-goal raid-goal -1)
	(set-strategic-number sn-maximum-hunt-drop-distance 0)
	(set-strategic-number sn-defer-dropsite-update 1)
	(set-strategic-number sn-number-explore-groups 0)
	(up-reset-scouts)
)
(defrule
	(goal forward-threat-goal 1)
	(up-player-distance any-enemy < 36)
	(strategic-number sn-military-level >= 0)
	(goal increase-town-size-goal 0)
	(unit-type-count battering-ram-line > 0)
=>
	(up-modify-sn sn-maximum-town-size g:= math-goal)
	(up-modify-sn sn-maximum-town-size c:+ 2)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-sentry-distance 0)
;	(chat-to-player my-player-number "rams vs forward")
)
(defrule
	(players-building-type-count every-enemy watch-tower > 1)
	(goal forward-threat-goal 1)
	(unit-type-count battering-ram-line == 0)
	(nor 
		(goal unit-goal knight)
		(goal unit-goal eagle-warrior)
	)
	(or
		(goal threat-source-goal 952); tower is attacking us
		(goal threat-source-goal 0); nobody is attacking us, just prevent walking in
	)
	(strategic-number sn-number-civilian-militia == 0)
=>
	(up-retreat-to town-center c: ranged-units)
	(up-retreat-to town-center c: cavalry-archer-units)
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 5)
)
(defrule
	(or
		(and
			(up-projectile-detected projectile-town-center c:< 2000)
			(up-projectile-target projectile-town-center == civilians)
		)
		(and
			(up-projectile-detected projectile-castle c:< 2000)
			(up-projectile-target projectile-castle == civilians)
		)
	)
=>
	(set-strategic-number sn-number-civilian-militia 0)
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-allow-civilian-defense 3)
	(up-jump-rule 3)
)
(defrule
	(or
		(and
			(or
				(up-enemy-units-in-town > 5)
				(players-military-population focus-player > 7)
			)
			(military-population < 5)
		)
		(or
			(players-building-type-count focus-player palisade-wall > 3); don't figt towers if enemy may block vills with walls
			(players-building-type-count focus-player stone-wall > 3); up-building-type in town may not work if TS is so small no buildings are in town before launching attack
		)
	)
=>
	(set-strategic-number sn-number-civilian-militia 0)
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-allow-civilian-defense 3)
	(up-jump-rule 2)
)
(defrule
	(goal forward-threat-goal 1)
	(game-time < 1500)
	(players-building-type-count focus-player watch-tower < 4)
	(players-building-type-count every-enemy castle == 0)
	(up-player-distance any-enemy < 30)
	(strategic-number sn-maximum-town-size < 40)
=>
	(up-get-focus-fact player-distance 0 math-goal2)
	(up-modify-sn sn-maximum-town-size g:= math-goal2)
	(up-modify-sn sn-maximum-town-size c:+ 12)
	(set-strategic-number sn-number-civilian-militia 10); send villagers to kill it
	(set-strategic-number sn-allow-civilian-offense 2)
	(set-strategic-number sn-allow-civilian-defense 3)
	(set-strategic-number sn-disable-defend-groups 0)
	(enable-timer reset-town-size-timer 60)
	(chat-to-player my-player-number "villager vs forward")
)
(defrule
	(goal forward-threat-goal 1)
	(game-time < 1500)
	(up-player-distance any-enemy < 30)
	(players-building-type-count focus-player watch-tower < 4)
	(players-building-type-count every-enemy castle == 0)
	(strategic-number sn-maximum-town-size > 45); enemy tower rush and we're flushing => focus on minining camps with units and allow villagers vs towers
=>
	(set-strategic-number sn-number-civilian-militia 20); send villagers to kill it
	(set-strategic-number sn-allow-civilian-offense 2)
	(set-strategic-number sn-allow-civilian-defense 3)
	(set-strategic-number sn-disable-defend-groups 0)
	(up-set-defense-priority c: mining-camp c: 2750)
	(enable-timer reset-town-size-timer 60)
	(chat-to-player my-player-number "villager vs forward")
)
(defrule
	(game-time > 1200)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(population > 50)
	(population < 130)
	(goal housing-goal 0)
	(strategic-number sn-military-level < 0)
	(military-population < 25)
	(strategic-number sn-maximum-town-size > 18)
	(strategic-number sn-maximum-town-size < 40)
	(unit-type-count tc-arrow == 0)
	(goal increase-town-size-goal 0); otherwise we can't build anything and lose as well.
=>
	(set-strategic-number sn-maximum-town-size 18)
	(set-strategic-number sn-defense-distance 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-cap-civilian-builders 9)
	(chat-to-player my-player-number "outnumbered - maximum TS = 18")
)
(defrule
	(goal forward-threat-goal 1)
	(players-building-type-count any-enemy watch-tower > 4)
=>
	(set-strategic-number sn-allow-civilian-offense 0)
	(set-strategic-number sn-number-civilian-militia 0)
	(set-strategic-number sn-number-explore-groups 0)
)
(defrule
	(goal forward-threat-goal 1)
	(players-building-type-count any-enemy watch-tower > 4)
	(current-age == feudal-age)
	(or
		(goal ranged-unit-type-goal archer)
		(goal ranged-unit-type-goal cavalry-archer)
	)
=>
	(set-goal unit-goal melee-unit)
	(set-goal ranged-unit-type-goal 0)
)
(defrule
	(game-time < 1800)
	(up-projectile-detected projectile-fortification c:< 5000)
	(goal forward-threat-goal 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(unit-type-count battering-ram == 0)
	(unit-type-count trebuchet-set == 0)
	(strategic-number sn-maximum-town-size < 40)
	(strategic-number sn-maximum-town-size > 7)
	(strategic-number sn-allow-civilian-offense == 0)
	(goal increase-town-size-goal 0); otherwise we can't build anything and lose as well.
=>
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-maximum-town-size 7)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-disable-defend-groups 1)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(chat-to-player my-player-number "forwarded - maximum TS = 7")
)
(defrule
	(players-military-population every-enemy < 10)
	(research-completed ri-loom)
	(up-compare-goal control-goal != shot)
=>
	(set-strategic-number sn-allow-civilian-defense 3)
)
(defrule
	(strategic-number sn-allow-civilian-offense == 0)
	(strategic-number sn-allow-civilian-defense == 3)
	(players-military-population any-enemy > 10)
	(research-completed ri-loom)
=>
	(set-strategic-number sn-allow-civilian-defense 1)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(current-age == feudal-age)
	(goal strategy-goal flush)
	(or
		(goal enemy-goal flush)
		(strategic-number sn-archer-threat > 1)
	)
	(players-current-age any-enemy == castle-age)
	(strategic-number sn-maximum-town-size == 7)
	(timer-triggered one-minute-timer)
=>
	(up-retreat-now)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(current-age == feudal-age)
	(goal strategy-goal flush)
	(goal forward-threat-goal 1)
	(goal threat-source-goal 952)
	(up-projectile-target projectile-watch-tower == ranged-units)
	(strategic-number sn-maximum-town-size == 7)
=>
	(up-retreat-now)
	(chat-to-player my-player-number "retreat out of tower fire")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(players-current-age any-enemy == castle-age)
	(strategic-number sn-maximum-town-size == 7)
	(up-projectile-target projectile-watch-tower == ranged-units)
	(goal forward-threat-goal 1)
=>
	(up-retreat-now)
	(set-strategic-number sn-disable-defend-groups 1)
	(enable-timer disable-defend-groups-timer 10)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); don't mess transports on islands
	(goal team-coordination-goal 1)
	(goal unit-goal archer)
	(strategic-number sn-cavalry-threat > 0)
	(unit-type-count spearman-line < 12)
	(unit-type-count battering-ram-line > 0)
	(timer-triggered garrison-timer)
=>
	(enable-timer garrison-timer 15)
	(set-strategic-number sn-disable-tower-priority 0)
	(set-strategic-number sn-number-garrison-units 1)
	(up-garrison battering-ram c: ranged-units)
	(up-set-offense-priority c: 109 c: 5)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal team-coordination-goal 1)
	(unit-type-count battering-ram-line > 0)
	(timer-triggered garrison-timer)
=>
	(enable-timer garrison-timer 15)
	(set-strategic-number sn-disable-tower-priority 0)
	(set-strategic-number sn-number-garrison-units number-garrison-units)
	(up-garrison battering-ram c: infantry-units)
	(up-set-offense-priority c: 109 c: 5)
)
(defrule
	(military-population < 13)
	(strategic-number sn-maximum-town-size == 7); outnumbered early in game
	(unit-type-count tc-arrow == 0)
	(unit-type-count watch-tower-arrow == 0)
	(unit-type-count castle-arrow == 0)
	(game-time < 1260)
=>
	(up-gather-inside c: stable c: 1)
	(up-gather-inside c: archery-range c: 1)
	(up-gather-inside c: barracks c: 1)
)
(defrule
	(or
		(or
			(military-population > 12)
			(game-time > 1260)
		)
		(goal team-coordination-goal 1); attacking
	)
=>
	(up-gather-inside c: stable c: 0)
	(up-gather-inside c: archery-range c: 0)
	(up-gather-inside c: barracks c: 0)
)
(defrule
	(military-population < 13)
	(up-timer-status garrison-timer == timer-running)
=>
	(up-gather-inside c: stable c: 0)
	(up-gather-inside c: archery-range c: 0)
	(up-gather-inside c: barracks c: 0)
)
(defrule
	(military-population < 13)
	(or
		(unit-type-count tc-arrow > 0); if fortifications are shooting, join fight with units
		(or
			(unit-type-count watch-tower-arrow > 0)
			(strategic-number sn-allow-civilian-offense > 0)
		)
	)
	(timer-triggered garrison-timer)
=>
	(enable-timer garrison-timer 15)
)
#load-if-not-defined VICTORY-CONQUEST
#load-if-not-defined VICTORY-TIME-LIMIT
#load-if-not-defined VICTORY-SCORE
(defrule
	(enemy-captured-relics)
=>
	(up-get-victory-data winning-player-goal victory-type-goal victory-time-goal)
	(up-modify-sn sn-target-player-number g:= winning-player-goal)
	(up-set-defense-priority c: monastery c: 3000)
	(set-strategic-number sn-special-attack-type2 monastery)
	(set-strategic-number sn-safe-town-size 45)
)
(defrule
	(players-building-type-count any-enemy wonder > 0)
=>
	(up-get-victory-data winning-player-goal victory-type-goal victory-time-goal)
	(up-modify-sn sn-target-player-number g:= winning-player-goal)
	(set-strategic-number sn-special-attack-type2 wonder)
	(set-strategic-number sn-safe-town-size 45)
)
(defrule
	(enemy-captured-relics)
	(players-building-type-count target-player monastery > 0)
	(up-building-type-in-town c: monastery == 0)
	(nand
		(up-building-type-in-town c: castle > 0)
		(up-compare-goal victory-time-goal > 300)
	)
	(strategic-number sn-maximum-town-size >= 40)
=>
	(up-modify-sn sn-maximum-town-size c:+ 20)
	(up-chat-data-to-self "TS = %d" s: sn-maximum-town-size)
	(set-strategic-number sn-disable-defend-groups 1)
)
(defrule
	(players-building-type-count target-player wonder > 0)
	(up-building-type-in-town c: wonder == 0)
	(nand
		(up-building-type-in-town c: castle > 0)
		(up-compare-goal victory-time-goal > 300)
	)
	(strategic-number sn-maximum-town-size >= 40)
=>
	(up-modify-sn sn-maximum-town-size c:+ 20)
	(up-chat-data-to-self "TS = %d" s: sn-maximum-town-size)
	(set-strategic-number sn-disable-defend-groups 1)
)
#end-if
#end-if
#end-if

; NAVY MANAGEMENT
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(up-jump-rule 23)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(warboat-count > 4)
	(or
		(game-time < 1260)
		(warboat-count > 9)
	)
	(or
		(game-time < 1620)
		(warboat-count > 15)
	)
	(or
		(game-time < 2000)
		(warboat-count > 21)
	)
	(or
		(game-time < 2700)
		(strategic-number sn-minimum-water-body-size-for-dock == water-mixed); not likely to get more ships on mixed maps
	)
=>
	(set-goal attack-goal 6)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(game-time > 2100)
	(warboat-count > 40)
	(or
		(or
			(players-unit-type-count any-enemy galley-line > 12); eliminate reamaining ships
			(players-unit-type-count any-enemy fire-ship-line > 12)
		)
		(or
			(unit-type-count cannon-galleon-line > 7); or bring cannon-galleons against castles/tower
			(not (research-available ri-cannon-galleon))
		)
	)
=>
	(set-goal attack-goal 6)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(goal attack-goal 6)
	(timer-triggered attack-timer)
	(players-unit-type-count any-enemy galley-line < 15)
	(players-unit-type-count any-enemy fire-ship-line < 15)
	(unit-type-count transport-ship > 0)
	(soldier-count >= 20)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-group-form-distance 30)
	(set-strategic-number sn-attack-group-gather-spacing 30)
	(attack-now)
	(enable-timer attack-timer 300)
	(set-strategic-number sn-special-attack-type2 -1)
)
(defrule
	(current-age >= feudal-age)
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(or
		(goal strategy-goal flush)
		(current-age == castle-age)
	)
=>
	(set-strategic-number sn-dock-training-filter 2)
	(disable-self)
)
(defrule
	(or
		(strategic-number sn-number-boat-attack-groups > 0)
		(goal attack-goal 6)
	)
	(strategic-number sn-target-player-number > 0)
	(players-building-type-count target-player dock == 0)
	(players-building-type-count any-enemy dock > 0)
=>
	(up-get-player-fact this-any-enemy player-number 0 math-goal)
	(up-modify-sn sn-target-player-number g:= math-goal); switch target
	(up-chat-data-to-self "current player has no docks in sight: switch target to %d" s: sn-target-player-number)
)
(defrule
	(up-building-type-in-town c: dock > 0)
	(up-compare-goal raid-goal != 1)
=>
	(set-goal attack-goal 6)
)
(defrule
	(cc-players-unit-type-count 0 sea-fish >= 20)
	(unit-type-count fishing-ship > 0)
	(building-type-count dock > 0)
	(up-gaia-type-count c: sea-fish == 0)
=>
	(up-find-local c: dock c: 1)
        (up-set-target-object search-local c: 0)
        (up-get-point position-object p1x-goal)
        (set-strategic-number sn-focus-player-number 0)
        (up-reset-search 1 1 1 1)
        (up-filter-include -1 -1 -1 -1)
        (up-filter-exclude -1 -1 -1 -1)
        (up-filter-range -1 -1 -1 5)
	(up-find-remote c: shore-fish c: 1)
)

(defrule
	(cc-players-unit-type-count 0 sea-fish >= 20)
	(unit-type-count fishing-ship > 0)
	(up-gaia-type-count c: sea-fish == 0)
	(up-find-remote c: shore-fish c: 0)
=>
	(set-strategic-number sn-maximum-fish-boat-drop-distance 0)
	(set-strategic-number sn-number-boat-explore-groups 1)
	(enable-timer civ-explore-timer 20)
	(chat-to-player my-player-number "search for deep sea fish")
	(disable-self)
)
(defrule
	(strategic-number sn-maximum-fish-boat-drop-distance == 0)
	(or
		(up-gaia-type-count c: sea-fish > 0)
		(timer-triggered civ-explore-timer)
	)
=>	
	(up-reset-scouts)
	(set-strategic-number sn-number-boat-explore-groups 0)
	(set-strategic-number sn-maximum-fish-boat-drop-distance 30)
	(disable-timer civ-explore-timer)
	(chat-to-player my-player-number "deep sea fish found or explore timer run out")
)
(defrule
	(strategic-number sn-minimum-boat-attack-group-size == 32)
	(goal threat-target-goal warships)
	(up-compare-goal threat-source-goal == warships)
=>
	(up-reset-unit c: warships)
	(set-strategic-number sn-minimum-boat-attack-group-size 1)
	(set-strategic-number sn-maximum-boat-attack-group-size 1)
	(set-strategic-number sn-number-boat-attack-groups 200)
	(set-strategic-number sn-group-form-distance 5)
	(set-strategic-number sn-free-siege-targeting 2)
	(up-set-offense-priority c: warships c: 11)
	(chat-to-player my-player-number "enemy navy activities detected - split boat groups!")
	(enable-timer navy-attack-timer 10)
)
(defrule
	(goal attack-goal 6)
	(timer-triggered navy-attack-timer)
	(up-compare-goal threat-target-goal != warships)
	(players-building-count any-enemy > 0)	
	(nand
		(up-projectile-detected projectile-castle c:< 30000)
		(and
			(unit-type-count cannon-galleon-line == 0)
			(up-projectile-target projectile-castle == warships)
		)
	)
=>
	(set-strategic-number sn-minimum-boat-attack-group-size 32)
	(set-strategic-number sn-maximum-boat-attack-group-size 32)
	(set-strategic-number sn-number-boat-attack-groups 200)
	(set-strategic-number sn-group-form-distance 70)
	(enable-timer navy-attack-timer 10)
)
(defrule
	(goal attack-goal 6)
	(timer-triggered navy-attack-timer)
	(goal threat-target-goal warships)
	(players-building-count any-enemy > 0)
	(nand
		(up-projectile-detected projectile-castle c:< 30000)
		(and
			(unit-type-count cannon-galleon-line == 0)
			(up-projectile-target projectile-castle == warships)
		)
	)
=>
	(set-strategic-number sn-minimum-boat-attack-group-size 1)
	(set-strategic-number sn-maximum-boat-attack-group-size 1)
	(set-strategic-number sn-number-boat-attack-groups 200)
	(enable-timer navy-attack-timer 10)
)
(defrule
	(or
		(up-projectile-detected projectile-castle c:< 2000)
		(up-projectile-detected projectile-bombard-tower c:< 2000)
	)
	(or
		(players-unit-type-count target-player galley-line < 8); retreat only to avoid targeting castles without standard ships
		(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	)
	(up-projectile-target projectile-fortification == warships)
	(unit-type-count cannon-galleon-line == 0)
=>
	(set-strategic-number sn-number-boat-attack-groups 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(up-retreat-to dock c: galley-line)
	(up-retreat-to dock c: fire-ship-line)
	(enable-timer navy-attack-timer 60)
	(chat-to-player my-player-number "retreat warships to avoid fortifications")
)
(defrule
	(up-projectile-detected projectile-castle c:< 2000)
	(up-projectile-target projectile-castle == warships)
	(unit-type-count cannon-galleon-line > 0)
	(players-unit-type-count target-player galley-line < 8)
=>
	(set-strategic-number sn-number-boat-attack-groups 0)
	(up-retreat-to cannon-galleon-line c: galley-line)
	(up-retreat-to cannon-galleon-line c: fire-ship-line)
	(up-set-offense-priority c: castle c: 10)
	(up-set-offense-priority c: bombard-tower c: 10)
	(enable-timer navy-attack-timer 5)
	(chat-to-player my-player-number "move warships to cannon galleons")
	(set-difficulty-parameter ability-to-maintain-distance 0); hopefully cannon galleon will to max distance vs castle
)
(defrule
	(up-projectile-detected projectile-bombard-tower c:< 2000)
	(up-projectile-target projectile-bombard-tower == warships)
	(unit-type-count cannon-galleon-line > 0)
	(players-unit-type-count target-player galley-line < 8)
=>
	(set-strategic-number sn-number-boat-attack-groups 0)
	(up-retreat-to cannon-galleon-line c: galley-line)
	(up-retreat-to cannon-galleon-line c: fire-ship-line)
	(up-set-offense-priority c: bombard-tower c: 8)
	(enable-timer navy-attack-timer 5)
	(chat-to-player my-player-number "move warships to cannon galleons")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(or
		(and
			(up-projectile-detected projectile-bombard-tower c:< 5000)
			(up-projectile-detected projectile-bombard-tower c:> 3000)	
		)
		(and
			(up-projectile-detected projectile-castle c:< 5000)
			(up-projectile-detected projectile-castle c:> 3000)
		)
	)
	(up-projectile-target projectile-fortification == warships)
=>
	(up-reset-unit c: galley-line)
	(up-reset-unit c: fire-ship-line)
	(chat-to-player my-player-number "reset warships")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(unit-type-count 42 == 0)
	(or
		(goal threat-target-goal cavalry-units); Enemy fighting our units with non warships 
		(goal threat-target-goal infantry-units); This assumes we have successfully landed on the enemy island
	)
	(up-compare-goal threat-source-goal != warships)
	(timer-triggered retreat-timer)
	(unit-type-count transport-ship > 0)
=>
	(up-reset-unit c: -1); disable the attack, attack now groups react horrible
	(up-reset-attack-now)
	(enable-timer retreat-timer 120)
	(enable-timer attack-timer 60)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(unit-type-count 42 > 0)
	(or
		(unit-type-count 469 > 0); trebuchet bullets
		(unit-type-count 371 > 0)
	)
	(timer-triggered retreat-timer)
=>
	(up-reset-unit c: -1)	
	(up-reset-attack-now)
	(enable-timer retreat-timer 120)
	(up-retreat-to 42 c: ranged-units)
	(up-retreat-to 42 c: cavalry-archer-units)
	(up-retreat-to 42 c: infantry-units)
	(up-retreat-to 42 c: cavalry-units)
	(up-retreat-to 42 c: gunpowder-units)
	(up-retreat-to 42 c: religious-units)
)
(defrule
	(building-type-count dock > 0)
	(or
		(unit-type-count warships < 6)
		(goal under-attack-goal 1)
	)
	(unit-type-count warships < 24)
=>
	(up-get-fact-max any-enemy unit-type-count galley-line math-goal)
	(up-get-fact-max any-enemy unit-type-count fire-ship-line math-goal2)
	(up-get-fact unit-type-count warships math-goal3)
	(up-modify-goal math-goal g:+ math-goal2)
	(up-modify-goal math-goal g:- math-goal3)
)
(defrule
	(or
		(unit-type-count warships < 6)
		(goal under-attack-goal 1)
	)
	(unit-type-count warships < 24)
	(building-type-count dock > 0)
	(up-compare-goal math-goal > 3)
	(up-compare-goal threat-target-goal != warships)
	(strategic-number sn-number-boat-attack-groups == 0)
=>
	(up-gather-inside c: dock c: 1)
)
(defrule
	(building-type-count dock > 0)
	(or
		(unit-type-count warships >= 24)
		(goal threat-target-goal warships)
	)
	(unit-type-count warships >= 6)
	(strategic-number sn-number-boat-attack-groups > 0)
=>
	(up-gather-inside c: dock c: 0)
)
(defrule
	(strategic-number sn-number-boat-attack-groups > 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(up-compare-goal attack-goal != 6)
=>
	(set-strategic-number sn-minimum-boat-attack-group-size 0)
	(set-strategic-number sn-maximum-boat-attack-group-size 0)
	(set-strategic-number sn-number-boat-attack-groups 0)
)

;spread military to prevent blocking
(defrule
	(goal spread-military-goal 0)
	(timer-triggered spread-military-timer)
=>
	(disable-timer spread-military-timer)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
	(set-goal spread-military-goal 1)
	(enable-timer spread-military-timer 3));5
(defrule
	(goal spread-military-goal 1)
	(timer-triggered spread-military-timer)
=>
	(disable-timer spread-military-timer)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-goal spread-military-goal 0); use a goal because sn-task-ungrouped-soldiers is always 1 when used as a fact
	(enable-timer spread-military-timer spread-interval)
)

; check if out town under attack and not an annoying wolf
(defrule
	(goal under-attack-goal 0)
	(strategic-number sn-maximum-town-size < 40)
	(players-military-population any-enemy > 1)
	(town-under-attack)
=>
	(set-goal under-attack-goal 2)
	(enable-timer under-attack-timer 30)
)
(defrule
	(town-under-attack)
	(not (timer-triggered under-attack-timer))
	(goal under-attack-goal 3)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
	(set-goal under-attack-goal 1)
	(chat-local-to-self "attack was not over yet")
)
(defrule
	(timer-triggered under-attack-timer)
	(town-under-attack)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
	(disable-timer under-attack-timer)
	(enable-timer under-attack-timer 20)
	(set-goal under-attack-goal 1)
	(chat-to-allies "222")
	(chat-to-player-using-id every-ally 22115)
	(set-goal under-attack-goal 1)
)
(defrule
	(not (town-under-attack))
	(goal under-attack-goal 1)
=>
	(enable-timer under-attack-timer 60)
	(set-goal under-attack-goal 3)
)
(defrule
	(or
		(strategic-number sn-maximum-town-size >= 40)
		(or
			(and
				(timer-triggered under-attack-timer)
				(goal under-attack-goal 3)
			)
			(and
				(not (town-under-attack))
				(goal under-attack-goal 2)
			)
		)
	)
=>
	(disable-timer under-attack-timer)
	(set-goal under-attack-goal 0)
)

; ********** INCREASE TS CODE **********

#load-if-defined DEATH-MATCH
(defrule
	(not (goal increase-town-size-goal 0))
	(or
		(and
			(current-age == castle-age)
			(current-age-time < 30)
		)
		(or
			(current-age < castle-age)
			(starting-age == post-imperial-age)
		)
	)
=>
	(set-goal increase-town-size-goal 0); don't increase TS too early in DM, as there might be more building rules than available villagers!
)
#else
; in PIDM increase TS according to game time, everything else will be too slow
;These rules increase town-size by population as our TS increase system doesn't cover houses and farms
#load-if-not-defined UP-MICHI-STYLE
; Compact TS and prevent enemy lure us when under outnumbered.
(defrule
	(building-type-count town-center > 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(population < 60)
	(goal housing-goal 0)
	(strategic-number sn-military-level < 0)
	(military-population < 15)
	(strategic-number sn-maximum-town-size < 40)
	(strategic-number sn-maximum-town-size > 7)
	(strategic-number sn-allow-civilian-offense != 2)
	(goal increase-town-size-goal 0); otherwise we can't build anything and lose as well.
=>
	(set-strategic-number sn-maximum-town-size 7)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(chat-to-player my-player-number "outnumbered - maximum TS = 7")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(current-age == feudal-age)
	(goal strategy-goal flush)
	(or
		(goal enemy-goal flush)
		(strategic-number sn-archer-threat > 1)
	)
	(players-current-age every-enemy == castle-age)
	(goal housing-goal 0)
	(strategic-number sn-maximum-town-size > 7)
	(goal increase-town-size-goal 0); otherwise we can't build anything and lose as well.
=>
	(set-strategic-number sn-maximum-town-size 7)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(chat-to-player my-player-number "enemy castled faster, stay defenseive - maximum TS = 7")
)
#end-if
(defrule
	(or
		(or
			(goal housing-goal 1)
			(not (goal increase-town-size-goal 0)); need to build something
		)
		(or
			(strategic-number sn-military-level >= 0); military situation normalized
			(military-population >= 20)
		)
	)
	(strategic-number sn-maximum-town-size < 8)
=>
	(set-strategic-number sn-maximum-town-size 12); make room for buildings
)
#end-if
(defrule
	(game-time > 600); not when rushed very early in DM
	(population > 185)
	(or
		(unit-type-count castle-arrow > 0)
		(unit-type-count castle-arrow-chemistry > 0)
	)
	(strategic-number sn-maximum-town-size <= 39)
=>
	(set-strategic-number sn-maximum-town-size 39)
	(set-strategic-number sn-sentry-distance 12)
	(set-strategic-number sn-enemy-sighted-response-distance 32)
	(set-strategic-number sn-disable-defend-groups 0)
)
(defrule
	(population > 185)
	(strategic-number sn-maximum-town-size <= 39)
	(building-type-count castle > 2)
	(goal under-attack-goal 1)
=>
	(set-strategic-number sn-maximum-town-size 49)
)
(defrule
	(up-pending-placement c: farm)
	(strategic-number sn-maximum-town-size < 31)
	(building-type-count farm > 8)
	(up-compare-goal threat-time-goal > 30000)
=>
	(set-strategic-number sn-maximum-town-size 31)
	(enable-timer reset-town-size-timer 1)
)
(defrule
	(strategic-number sn-maximum-town-size < 37)
	(up-compare-goal increase-town-size-goal != 2)
	(goal housing-goal 1)
	(up-pending-objects c: house < 1)
	(wood-amount >= 30)
=>
	(up-modify-sn sn-maximum-town-size c:+ 2)
	(up-chat-data-to-player my-player-number "build town-size = %d" s: sn-maximum-town-size)
)
(defrule
	(or
		(and
			(strategic-number sn-maximum-town-size < 40)
			(goal increase-town-size-goal 2)
		)
		(goal increase-town-size-goal house)
	)
=>
	(set-goal increase-town-size-goal 0); building already placed, no need to increase TS
	(disable-timer increase-town-size-timer)	
)
#load-if-defined UP-MICHI-STYLE
(defrule
	(timer-triggered increase-town-size-timer)
	(up-compare-goal increase-town-size-goal != 0)
	(strategic-number sn-maximum-town-size >= 7)
=>
	(enable-timer increase-town-size-timer 3)
	(set-goal increase-town-size-goal 0)
	(up-modify-sn sn-maximum-town-size c:+ 2)
	(up-chat-data-to-player my-player-number "build town-size = %d" s: sn-maximum-town-size)
	(up-jump-rule 1)
)
#end-if
(defrule
	(timer-triggered increase-town-size-timer)
	(or
		(strategic-number sn-maximum-town-size < 37)
		(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	)
	(strategic-number sn-maximum-town-size < 57)
	(up-compare-goal increase-town-size-goal != 0)
	(strategic-number sn-maximum-town-size >= 7)
=>
	(enable-timer increase-town-size-timer 3)
	(set-goal increase-town-size-goal 0)
	(up-modify-sn sn-maximum-town-size c:+ 2)
	(up-chat-data-to-player my-player-number "build town-size = %d" s: sn-maximum-town-size)
)
(defrule
	(building-type-count-total town-center == 0)
=>
	(set-strategic-number sn-camp-max-distance 255)
	(set-strategic-number sn-maximum-town-size 255); entire map viable to place TC
	(set-strategic-number sn-mill-max-distance 255)
	(set-strategic-number sn-maximum-food-drop-distance 30)
	(set-strategic-number sn-wood-gatherer-percentage 100)
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-escrow-percentage wood 100)
	(set-goal escrow-purpose-goal town-center)
)
(defrule
	(up-gaia-type-count c: forage-bush >= 4)
	(building-type-count-total town-center == 0)
	(strategic-number sn-mill-max-distance == 255)
=>
	(set-strategic-number sn-town-center-placement mill)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(building-type-count town-center > 0)
	(building-type-count-total mill == 0)
	(strategic-number sn-mill-max-distance > 30)
	(up-pending-placement c: mill); mill placement from last cycle still in progress
	(wood-amount > 300)
=>
	(set-strategic-number sn-mill-max-distance 8); reduce distance in case it couldn't be built due to insufficient exploration.
)
(defrule
	(strategic-number sn-minimum-civilian-explorers > 0)
	(or
		(and
			(or
				(unit-type-count sheep > 1)
				(resource-found food)
			)
			(strategic-number sn-mill-max-distance < 31)
		)
		(timer-triggered civ-explore-timer)
	)
=>
	(disable-timer civ-explore-timer)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(set-strategic-number sn-percent-civilian-builders 0)
	(set-strategic-number sn-percent-civilian-explorers 0)
)
(defrule
	(game-time > 600)
	(building-type-count-total town-center > 0)
	(building-type-count town-center == 0)
	(building-type-count farm > 0)
	(population < 20)
=>
	(delete-building farm); delete all farm, prevent losing villagers by walking back into old town
)
(defrule
	(game-time > 900)
	(idle-farm-count > 0)
=>
	(up-delete-distant-farms c: 15)
)
(defrule
	(game-time > 32)
	(strategic-number sn-current-age == dark)
	(strategic-number sn-percent-civilian-explorers == 0)
	(building-type-count-total town-center == 0)
	(wood-amount > 330)
	(stone-amount >= 100)
=>
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-minimum-civilian-explorers 13)
	(set-strategic-number sn-maximum-wood-drop-distance 0)
	(chat-to-player my-player-number "nomad map TC placement failure")
)
(defrule
	(game-time > 30)
	(can-build-with-escrow town-center)
	(building-type-count town-center == 0)
=>
	(up-assign-builders c: lumber-camp c: 1)
	(release-escrow wood)
	(set-escrow-percentage wood 0)
	(build town-center)
	(set-strategic-number sn-food-gatherer-percentage 94)
	(set-strategic-number sn-wood-gatherer-percentage 6)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-maximum-wood-drop-distance 25)
	(set-strategic-number sn-minimum-civilian-explorers 0)
)
(defrule
	(building-type-count-total town-center == 1)
	(up-pending-objects c: town-center == 1)
=>
	(release-escrow wood)
	(set-escrow-percentage wood 0)
	(set-goal escrow-purpose-goal 0)
	(set-strategic-number sn-mill-max-distance 31)
	(set-strategic-number sn-maximum-town-size 30)
	(set-strategic-number sn-camp-max-distance 35)
)
(defrule
	(game-time > 33)
	(resource-found wood)
	(building-type-count-total town-center == 0)
	(or
		(building-type-count-total lumber-camp == 0)
		(dropsite-min-distance wood > 10)
	)
	(up-pending-objects c: lumber-camp < 1)
	(can-build lumber-camp)
=>
	(build lumber-camp)
	(up-assign-builders c: lumber-camp c: 6)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(set-strategic-number sn-maximum-wood-drop-distance -1)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(set-strategic-number sn-percent-civilian-builders 100)
	(set-strategic-number sn-percent-civilian-explorers 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 2); building placed
	(strategic-number sn-maximum-town-size >= 40); TSA in action
=>
	(disable-timer increase-town-size-timer)
	(set-strategic-number sn-maximum-town-size 18); build close
	(set-goal increase-town-size-goal 0)
	(enable-timer attack-timer 1); re-enable TSA immediately
	(set-goal restart-attack-goal 1)
)
(defrule
	(goal restart-attack-goal 1)
	(strategic-number sn-target-evaluation-ally-proximity < 32767)
=>
	(set-goal restart-attack-goal 0)
)
(defrule
	(strategic-number sn-military-level >= 0)
	(population >= eighty-five-percent-pop)
	(building-type-count stone-wall-line > 0)
	(current-age == imperial-age)
=>
	(up-delete-objects c: 927 c: 32767); In late game walls blocking the AI are worse than the protection they offer
	(up-delete-objects c: 939 c: 32767); as we can't delete specific parts (e.g. backside only) we delete them all.
)
#load-if-not-defined DEATH-MATCH ;TC avoid and TC garrison code is from II2N/TheMax
(defrule
	(game-time > 960)
	(up-compare-goal kill-scouts-goal < 1)
=>
	(up-jump-rule 7)
)
(defrule
	(goal kill-scouts-goal -1)
=>
	(set-strategic-number sn-focus-player-number 0)
)
(defrule
	(up-compare-goal kill-scouts-goal >= 1)
=>
	(up-modify-sn sn-focus-player-number g:= kill-scouts-goal)
	(up-get-point position-self p1x-goal)
	(up-set-target-point p1x-goal)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 4)
)
(defrule
	(up-compare-goal kill-scouts-goal >= 1)
	(nor
		(up-find-remote c: scout-cavalry-line c: 1)
		(or   
			(up-find-remote c: eagle-warrior-line c: 1)
			(or
				(up-find-remote c: villager c: 1)
				(up-find-remote c: militiaman-line c: 1)
			)
		)
	)
=>
	(up-ungarrison c: town-center)
	(set-goal kill-scouts-goal -1)
)
(defrule
	(goal kill-scouts-goal -1)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-get-point position-self p1x-goal)
	(up-set-target-point p1x-goal)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 4)
)
(defrule
	(goal kill-scouts-goal -1)
	(stance-toward focus-player enemy)
	(or
		(up-find-remote c: scout-cavalry-line c: 1)
		(or   
			(up-find-remote c: eagle-warrior-line c: 1)
			(or   
				(up-find-remote c: civilians c: 1)
				(up-find-remote c: militiaman-line c: 1)
			)
		)
	)
	(up-timer-status misc-micro-timer != timer-running)
=>
	(up-modify-goal kill-scouts-goal s:= sn-focus-player-number)
	(up-filter-distance c: -1 c: 4)
)
(defrule
	(up-find-local c: civilians c: 1)
	(up-compare-goal kill-scouts-goal >= 1)
=>
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 8)
	(up-find-local c: civilians c: 10)
	(up-get-search-state math-goal)
	(up-modify-sn sn-number-garrison-units g:= math-goal2)
	(up-modify-sn sn-maximum-garrison-fill g:= math-goal2)
	(up-garrison town-center c: civilians)
)
(defrule
	(up-compare-goal kill-scouts-goal >= 1)
	(up-timer-status misc-micro-timer != timer-running)
=>
	(enable-timer misc-micro-timer 30)
)
(defrule
	(goal kill-scouts-goal -1)
	(player-valid focus-player)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-jump-rule -5)
)
(defrule
	(or
		(game-time > 960)
		(or
			(unit-type-count scout-unit == 0)
			(or
				(strategic-number sn-number-explore-groups == 0)
				(current-age >= castle-age)
			)
		)
	)
	(goal tc-dodging-goal -1)
=>
	(up-jump-rule 8)
)
(defrule
	(goal tc-dodging-goal -1)
=>
	(set-strategic-number sn-focus-player-number 0)
)
(defrule
	(goal tc-dodging-goal -1)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object p1x-goal)
	(up-set-target-point p1x-goal)
	(up-filter-range -1 -1 -1 11)
)
(defrule
	(stance-toward focus-player enemy)
	(or	
		(up-find-remote c: town-center c: 1)
		(up-find-remote c: castle c: 1)
	)
	(goal tc-dodging-goal -1)
=>
	(set-strategic-number sn-number-explore-groups 0)
	(set-strategic-number sn-total-number-explorers 0)
	(up-reset-unit c: scout-unit)
	(up-reset-scouts)
	(up-modify-goal tc-dodging-goal s:= sn-focus-player-number)
)
(defrule
	(goal tc-dodging-goal -1)
	(player-valid focus-player)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-jump-rule -3)
)
(defrule
	(up-compare-goal tc-dodging-goal >= 1)
=>
	(up-modify-sn sn-focus-player-number g:= tc-dodging-goal)
)	
(defrule
	(up-compare-goal tc-dodging-goal >= 1)
=>
	(up-modify-sn sn-focus-player-number g:= tc-dodging-goal)
	(up-reset-search 1 1 1 1)
	(up-reset-filters)
	(up-find-local c: scout-unit c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object p1x-goal)
	(up-set-target-point p1x-goal)
	(up-filter-range -1 -1 -1 13)
)
(defrule
	(nor
		(up-find-remote c: town-center c: 1)
		(up-find-remote c: castle c: 1)
	)
	(up-compare-goal tc-dodging-goal >= 1)
=>
	(set-goal tc-dodging-goal -1)
	(up-set-attack-stance scout-unit c: aggressive)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
)
(defrule
	(players-current-age focus-player == dark-age)
	(up-compare-goal tc-dodging-goal >= 1)
	(or
		(up-find-remote c: town-center c: 1)
		(up-find-remote c: castle c: 1)
	)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object p2x-goal)
	(up-lerp-tiles p1x-goal p2x-goal c: -8); move out while in dark age
	(up-target-point p1x-goal action-move -1 no-attack)
	(enable-timer retreat-timer 2)
)
(defrule
	(players-current-age focus-player >= feudal-age)
	(up-compare-goal tc-dodging-goal >= 1)
	(or
		(up-find-remote c: town-center c: 1)
		(up-find-remote c: castle c: 1)
	)
=>
	(up-set-target-object search-remote c: 0)
	(up-get-point position-object p2x-goal)
	(up-cross-tiles p1x-goal p2x-goal c: 7); move around in circle if enemy is in feudal to detect threats early
	(up-target-point p1x-goal action-move -1 no-attack)
	(enable-timer retreat-timer 2)
)
#load-if-defined NEEDS-MORE-TESTING
(defrule
	(up-compare-goal forward-point-goal > 0)
	(or
		(or
			(up-pending-placement c: stable)
			(up-pending-placement c: archery-range)
		)
		(up-pending-placement c: barracks)
	)
=>
	(up-set-target-point forward-point-goal); target points for place-point building are not saved, so it they must stay the same until the building foundation is dropped
;	(up-send-flare forward-point-goal)
)
#end-if
#load-if-not-defined WONDER-RACE
#load-if-not-defined UP-MICHI-STYLE
#load-if-not-defined NOMAD-MAP
#load-if-not-defined UP-2-PLAYER-GAME
#load-if-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 10)
=>
	(set-goal position-goal pocket)
	(set-goal strategy-goal pocket-strategy)
	(set-goal unit-goal pocket-unit)
	(set-goal control-goal 0)
	(chat-to-player my-player-number "I'm pocket")(disable-self))
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(game-time > 10)
=>
	(set-goal position-goal flank)
	(chat-to-player my-player-number "I'm flank")(disable-self))
#end-if
#end-if
#end-if
#end-if
#end-if
#else
#load-if-not-defined UP-2-PLAYER-GAME
#load-if-defined UP-POCKET-POSITION
(defrule
	(game-time > 10)
=>
	(set-goal position-goal pocket)
	(chat-to-player my-player-number "I'm pocket")(disable-self))
#else
(defrule
	(game-time > 10)
=>
	(set-goal position-goal flank)
	(chat-to-player my-player-number "I'm flank")(disable-self))
#end-if
#end-if
#end-if
#load-if-not-defined TEAMS-LOCKED
(defrule
	(not (stance-toward 1 ally))
	(or
		(player-resigned 1)
		(not (player-in-game 1))
	)
	(players-military-population 1 < 2)
	(players-building-type-count 1 castle < 1)
	(players-building-type-count 1 watch-tower < 1)
	(players-building-type-count 1 bombard-tower < 1)
	(players-unit-type-count 1 monk < 1)
=>
	(set-stance 1 ally)
)
(defrule
	(not (stance-toward 2 ally))
	(or
		(player-resigned 2)
		(not (player-in-game 2))
	)
	(players-military-population 2 < 2)
	(players-building-type-count 2 castle < 1)
	(players-building-type-count 2 watch-tower < 1)
	(players-building-type-count 2 bombard-tower < 1)
	(players-unit-type-count 2 monk < 1)
=>
	(set-stance 2 ally)
)
(defrule
	(not (stance-toward 3 ally))
	(or
		(player-resigned 3)
		(not (player-in-game 3))
	)
	(players-military-population 3 < 2)
	(players-building-type-count 3 castle < 1)
	(players-building-type-count 3 watch-tower < 1)
	(players-building-type-count 3 bombard-tower < 1)
	(players-unit-type-count 3 monk < 1)
=>
	(set-stance 3 ally)
)
(defrule
	(not (stance-toward 4 ally))
	(or
		(player-resigned 4)
		(not (player-in-game 4))
	)
	(players-military-population 4 < 2)
	(players-building-type-count 4 castle < 1)
	(players-building-type-count 4 watch-tower < 1)
	(players-building-type-count 4 bombard-tower < 1)
	(players-unit-type-count 4 monk < 1)
=>
	(set-stance 4 ally)
)
(defrule
	(not (stance-toward 5 ally))
	(or
		(player-resigned 5)
		(not (player-in-game 5))
	)
	(players-military-population 5 < 2)
	(players-building-type-count 5 castle < 1)
	(players-building-type-count 5 watch-tower < 1)
	(players-building-type-count 5 bombard-tower < 1)
	(players-unit-type-count 5 monk < 1)
=>
	(set-stance 5 ally)
)
(defrule
	(not (stance-toward 6 ally))
	(or
		(player-resigned 6)
		(not (player-in-game 6))
	)
	(players-military-population 6 < 2)
	(players-building-type-count 6 castle < 1)
	(players-building-type-count 6 watch-tower < 1)
	(players-building-type-count 6 bombard-tower < 1)
	(players-unit-type-count 6 monk < 1)
=>
	(set-stance 6 ally)
)
(defrule
	(not (stance-toward 7 ally))
	(or
		(player-resigned 7)
		(not (player-in-game 7))
	)
	(players-military-population 7 < 2)
	(players-building-type-count 7 castle < 1)
	(players-building-type-count 7 watch-tower < 1)
	(players-building-type-count 7 bombard-tower < 1)
	(players-unit-type-count 7 monk < 1)
=>
	(set-stance 7 ally)
)
(defrule
	(not (stance-toward 8 ally))
	(or
		(player-resigned 8)
		(not (player-in-game 8))
	)
	(players-military-population 8 < 2)
	(players-building-type-count 8 castle < 1)
	(players-building-type-count 8 watch-tower < 1)
	(players-building-type-count 8 bombard-tower < 1)
	(players-unit-type-count 8 monk < 1)
=>
	(set-stance 8 ally)
)
(defrule
	(or
		(players-stance any-human-ally neutral)
		(players-stance any-human-ally enemy)
	)
=>
	(chat-to-player-using-id this-any-human-ally 22102)
	(set-stance this-any-human-ally enemy)
)
#end-if
(defrule
	(taunt-detected any-computer 249)
	(not (taunt-detected my-player-number 249)); I can see my own resources
=>
	(up-get-fact food-amount 0 math-goal)
	(up-chat-data-to-player this-any-computer "Food: %d" g: math-goal)
	(up-get-fact wood-amount 0 math-goal)
	(up-chat-data-to-player this-any-computer "Wood: %d" g: math-goal)
	(up-get-fact gold-amount 0 math-goal)
	(up-chat-data-to-player this-any-computer "Gold: %d" g: math-goal)
	(up-get-fact stone-amount 0 math-goal)
	(up-chat-data-to-player this-any-computer "Stone: %d" g: math-goal)
	(acknowledge-taunt this-any-computer 249)
)
(defrule
	(taunt-detected any-human-ally 249)
	(not (taunt-detected my-player-number 249))
=>
	(chat-to-player this-any-human-ally "My current resources are:")
	(up-get-fact food-amount 0 math-goal)
	(up-chat-data-to-player this-any-human-ally "Food: %d" g: math-goal)
	(up-get-fact wood-amount 0 math-goal)
	(up-chat-data-to-player this-any-human-ally "Wood: %d" g: math-goal)
	(up-get-fact gold-amount 0 math-goal)
	(up-chat-data-to-player this-any-human-ally "Gold: %d" g: math-goal)
	(up-get-fact stone-amount 0 math-goal)
	(up-chat-data-to-player this-any-human-ally "Stone: %d" g: math-goal)
	(acknowledge-taunt this-any-human-ally 249)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human 250)
	)
=>
	(chat-to-player this-any-computer "The Horde Artificial Intelligence Script 3.1")
	(chat-to-player this-any-human "The Horde Artificial Intelligence Script 3.1")
	(acknowledge-taunt this-any-human-enemy 250)
	(acknowledge-taunt this-any-human-neutral 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal strategy-goal sling)
=>
	(chat-to-player this-any-computer "I am sling")
	(chat-to-player this-any-human-ally "I am sling")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal control-goal shot)
=>
	(chat-to-player this-any-computer "I am shot")
	(chat-to-player this-any-human-ally "I am shot")
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal strategy-goal rush)
=>
	(chat-to-player this-any-computer "I go fast castle age.")
	(chat-to-player this-any-human-ally "I go fast castle age.")
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal strategy-goal flush)
=>
	(chat-to-player this-any-computer "I train an army in feudal age.")
	(chat-to-player this-any-human-ally "I train an army in feudal age.")
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal strategy-goal fast-imp)
=>
	(chat-to-player this-any-computer "I go fast imperial age.")
	(chat-to-player this-any-human-ally "I go fast imperial age.")
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal strategy-goal boom)
=>
	(chat-to-player this-any-computer "I will boom.")
	(chat-to-player this-any-human-ally "I will boom.")
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal monk)
=>
	(chat-to-player this-any-computer "I focus on monks.")
	(chat-to-player this-any-human-ally "I focus on monks.")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal eagle-warrior)
=>
	(chat-to-player this-any-computer "I focus on eagle warriors.")
	(chat-to-player this-any-human-ally "I focus on eagle warriors.")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(or
		(civ-selected byzantine)
		(civ-selected indian)
	)
	(goal unit-goal knight)
=>
	(chat-to-player this-any-computer "I focus on camels.")
	(chat-to-player this-any-human-ally "I focus on camels")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal knight)
=>
	(chat-to-player this-any-computer "I focus on knights.")
	(chat-to-player this-any-human-ally "I focus on knights")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal archer)
=>
	(chat-to-player this-any-computer "I focus on archers.")
	(chat-to-player this-any-human-ally "I focus on archers")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal cavalry-archer)
=>
	(chat-to-player this-any-computer "I focus on cavalry archers.")
	(chat-to-player this-any-human-ally "I focus on cavalry archers")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal skirmisher)
=>
	(chat-to-player this-any-computer "I focus on trash units.")
	(chat-to-player this-any-human-ally "I focus on trash units")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal militiaman-line)
=>
	(chat-to-player this-any-computer "I focus on infantry.")
	(chat-to-player this-any-human-ally "I focus on infantry")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal my-unique-unit-line)
=>
	(chat-to-player this-any-computer "I focus on unique units.")
	(chat-to-player this-any-human-ally "I focus on unique units")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal scout-cavalry)
=>
	(chat-to-player this-any-computer "I focus on scouts.")
	(chat-to-player this-any-human-ally "I focus on scouts")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal gunpowder-units)
=>
	(chat-to-player this-any-computer "I focus on guns.")
	(chat-to-player this-any-human-ally "I focus on guns")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
	(goal unit-goal scorpion)
=>
	(chat-to-player this-any-computer "I focus scorpions.")
	(chat-to-player this-any-human-ally "I focus scorpions.")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(or
		(taunt-detected any-computer 250)
		(taunt-detected any-human-ally 250)
	)
=>
	(chat-to-player this-any-computer "I don't focus on any particular unit.")
	(chat-to-player this-any-human-ally "I don't focus on any particular unit.")
	(acknowledge-taunt any-computer 250)
	(acknowledge-taunt any-human-ally 250)
)
(defrule
	(taunt-detected any-human 250)
=>
	(acknowledge-taunt any-human 250)
)
#load-if-defined DIFFICULTY-HARDEST
#load-if-not-defined DEATH-MATCH
#load-if-not-defined DEFEND-WONDER
(defrule
	(current-age >= dark-age)
=>
	(cc-add-resource food -500)
	(cc-add-resource wood -450)
	(cc-add-resource gold -500)
	(cc-add-resource stone -500)
	(disable-self)
)
(defrule
	(current-age >= dark-age)
	(building-type-count-total town-center > 0); no instant TC on LN
=>
	(cc-add-resource food 500)
	(cc-add-resource wood 450)
	(cc-add-resource gold 100)
	(disable-self)
)
(defrule
	(current-age >= feudal-age)
=>
	(cc-add-resource wood -400)
	(cc-add-resource gold -450)
	(cc-add-resource stone -500)
	(disable-self)
)
(defrule
	(current-age >= feudal-age)
	(building-type-count-total watch-tower > 0)
=>
	(cc-add-resource stone 125)
	(disable-self)
)
(defrule
	(current-age >= feudal-age)
	(goal strategy-goal flush)
	(or
		(goal unit-goal archer)
		(goal unit-goal skirmisher)
	)
=>
	(cc-add-resource food -300)
	(cc-add-resource gold 50)
	(disable-self)
)
(defrule
	(current-age >= castle-age)
=>
	(cc-add-resource gold -300)
	(cc-add-resource stone -400)
	(disable-self)
)
(defrule
	(civilian-population > 20)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(current-age-time > 760)
=>
	(cc-add-resource food 600)
	(cc-add-resource gold 180)
	(disable-self)
)
#load-if-defined DARK-AGE-START
(defrule
	(cc-players-building-type-count any-human barracks > 0)
	(players-current-age every-enemy == dark-age)
	(players-military-population any-enemy > 1)
	(game-time < 600)
	(unit-type-count-total militiaman-line < 4)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
#end-if
#end-if
#end-if
#else
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DEATH-MATCH
(defrule
	(game-time < 600)
	(unit-type-count villager < 17)
	(players-civilian-population every-human > 19)
	(player-in-game any-human)
=>
	(chat-to-all "Looks like you're an experienced player")
	(chat-to-all "Please restart the game on hard difficulty")
	(disable-self)
)
#end-if
(defrule
	(population < twenty-five-percent-pop)
	(players-population every-ally < twenty-five-percent-pop)
	(players-population any-human-enemy > seventy-five-percent-pop)
=>
	(chat-to-enemies "Well played! You're prepared to play on a higher difficulty.")
	(resign)
)
#end-if
#end-if
(defrule
	(unit-type-count-total villager == 0)
	(building-type-count town-center == 0)
	(player-in-game any-ally)
	(military-population < 10)
=>
	(up-get-player-fact this-any-ally player-number 0 math-goal)
	(up-modify-sn sn-focus-player-number g:= math-goal)
	(tribute-to-player focus-player wood 100000)
	(tribute-to-player focus-player food 100000)
	(tribute-to-player focus-player gold 100000)
	(tribute-to-player focus-player stone 100000)
)
(defrule
	(unit-type-count-total villager == 0)
	(or
		(and
			(food-amount < 50)
			(not (player-in-game any-ally))
		)
		(building-type-count town-center == 0)
	)
	(military-population < 10)
=>
	(resign)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined UP-MULTIPLAYER-GAME
(defrule
	(game-time > 600)
	(goal ffa-game-goal -1)
	(population < fourty-percent-pop)
	(players-population every-ally < fourty-percent-pop)
	(or
		(player-resigned any-ally)
		(and
			(population < twenty-five-percent-pop)
			(players-population every-ally < twenty-five-percent-pop)
		)
	)
	(players-population any-enemy > eighty-five-percent-pop)
=>
	(chat-to-player-using-id every-enemy 22300)
	(resign)
)
#else
(defrule
	(game-time > 600)
	(goal ffa-game-goal -1)
	(population < fourty-percent-pop)
	(players-population every-ally < fourty-percent-pop)
	(or
		(player-resigned any-ally)
		(and
			(population < twenty-five-percent-pop)
			(and
				(players-population every-ally < twenty-five-percent-pop)
				(players-population any-enemy > max-civ-pop)
			)
		)
	)
=>
	(chat-to-all "gg")
	(resign)
)
#end-if
#end-if
#end-if
#end-if
(defrule
	(timer-triggered one-minute-timer)
=>
	(set-strategic-number sn-food-modifier-percentage 0)
	(set-strategic-number sn-wood-modifier-percentage 0)
	(set-strategic-number sn-gold-modifier-percentage 0)
	(set-strategic-number sn-stone-modifier-percentage 0)
	(enable-timer one-minute-timer 60)
)
(defrule	
	(taunt-detected any-computer 247)
=>
	(up-chat-data-to-all "Food: %d %" s: sn-food-gatherer-percentage)
	(up-chat-data-to-all "Wood: %d %" s: sn-wood-gatherer-percentage)
	(up-chat-data-to-all "Gold: %d %" s: sn-gold-gatherer-percentage)
	(up-chat-data-to-all "Stone: %d %" s: sn-stone-gatherer-percentage)
	(acknowledge-taunt this-any-computer 247)
)
(defrule
	(taunt-detected any-computer 248)
	(not (taunt-detected my-player-number 248))
=>
	(up-chat-data-to-all "focus-player: %d" s: sn-focus-player-number)
	(up-chat-data-to-all "target-player: %d" s: sn-target-player-number)
	(up-chat-data-to-all "number of attack groups: %d" s: sn-number-attack-groups)
	(up-chat-data-to-all "minimum attack group size: %d" s: sn-minimum-attack-group-size)
	(up-chat-data-to-all "sentry distance: %d" s: sn-sentry-distance)
	(up-chat-data-to-all "enemy sighted response distance: %d" s: sn-enemy-sighted-response-distance)
	(up-chat-data-to-all "maximum town size: %d" s: sn-maximum-town-size)
	(up-chat-data-to-all "disable-attack-groups = %d" s: sn-disable-attack-groups)
	(up-chat-data-to-all "disable-defend-groups = %d" s: sn-disable-defend-groups)
	(acknowledge-taunt this-any-computer 248)
)
(defrule
	(taunt-detected my-player-number 246)
=>
	(up-chat-data-to-all "focus-player: %d" s: sn-focus-player-number)
	(up-chat-data-to-all "target-player: %d" s: sn-target-player-number)
	(up-chat-data-to-all "number of attack groups: %d" s: sn-number-attack-groups)
	(up-chat-data-to-all "minimum attack group size: %d" s: sn-minimum-attack-group-size)
	(up-chat-data-to-all "sentry distance: %d" s: sn-sentry-distance)
	(up-chat-data-to-all "enemy sighted response distance: %d" s: sn-enemy-sighted-response-distance)
	(up-chat-data-to-all "maximum town size: %d" s: sn-maximum-town-size)
	(up-chat-data-to-all "disable-attack-groups = %d" s: sn-disable-attack-groups)
	(up-chat-data-to-all "disable-defend-groups = %d" s: sn-disable-defend-groups)
	(acknowledge-taunt my-player-number 246)
)
#load-if-defined TESTING
(defrule
	(unit-type-count flare > 0)
=>
	(up-find-player-flare my-player-number p2x-goal)
	(up-chat-data-to-self "position x = %d" g: p2x-goal)
	(up-chat-data-to-self "position y = %d" g: p2y-goal)
)
#end-if
